module.exports = {

"[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    } else {
        if ("TURBOPACK compile-time truthy", 1) {
            module.exports = __turbopack_require__("[externals]/next/dist/compiled/next-server/app-page.runtime.dev.js [external] (next/dist/compiled/next-server/app-page.runtime.dev.js, cjs)");
        } else {
            "TURBOPACK unreachable";
        }
    }
} //# sourceMappingURL=module.compiled.js.map
}}),
"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_require__("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['react-ssr'].ReactJsxDevRuntime; //# sourceMappingURL=react-jsx-dev-runtime.js.map
}}),
"[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
module.exports = __turbopack_require__("[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-ssr] (ecmascript)").vendored['react-ssr'].React; //# sourceMappingURL=react.js.map
}}),
"[project]/node_modules/@esri/arcgis-html-sanitizer/dist/esm/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*!
 * @esri/arcgis-html-sanitizer - v4.1.0 - Tue Dec 03 2024 09:13:28 GMT-0500 (Eastern Standard Time)
 * Copyright (c) 2024 - Environmental Systems Research Institute, Inc.
 * Apache-2.0
 * 
 * js-xss
 * Copyright (c) 2012-2018 Zongmin Lei(雷宗民) <leizongmin@gmail.com>
 * http://ucdok.com
 * MIT License, see https://github.com/leizongmin/js-xss/blob/master/LICENSE for details
 */ /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ __turbopack_esm__({
    "Sanitizer": (()=>Sanitizer),
    "default": (()=>Sanitizer)
});
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var lib$1 = {
    exports: {}
};
var _default$1 = {};
var lib = {
    exports: {}
};
var _default = {};
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */ function getDefaultWhiteList$1() {
    // 白名单值说明：
    // true: 允许该属性
    // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
    // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
    // 除上面列出的值外均表示不允许
    var whiteList = {};
    whiteList['align-content'] = false; // default: auto
    whiteList['align-items'] = false; // default: auto
    whiteList['align-self'] = false; // default: auto
    whiteList['alignment-adjust'] = false; // default: auto
    whiteList['alignment-baseline'] = false; // default: baseline
    whiteList['all'] = false; // default: depending on individual properties
    whiteList['anchor-point'] = false; // default: none
    whiteList['animation'] = false; // default: depending on individual properties
    whiteList['animation-delay'] = false; // default: 0
    whiteList['animation-direction'] = false; // default: normal
    whiteList['animation-duration'] = false; // default: 0
    whiteList['animation-fill-mode'] = false; // default: none
    whiteList['animation-iteration-count'] = false; // default: 1
    whiteList['animation-name'] = false; // default: none
    whiteList['animation-play-state'] = false; // default: running
    whiteList['animation-timing-function'] = false; // default: ease
    whiteList['azimuth'] = false; // default: center
    whiteList['backface-visibility'] = false; // default: visible
    whiteList['background'] = true; // default: depending on individual properties
    whiteList['background-attachment'] = true; // default: scroll
    whiteList['background-clip'] = true; // default: border-box
    whiteList['background-color'] = true; // default: transparent
    whiteList['background-image'] = true; // default: none
    whiteList['background-origin'] = true; // default: padding-box
    whiteList['background-position'] = true; // default: 0% 0%
    whiteList['background-repeat'] = true; // default: repeat
    whiteList['background-size'] = true; // default: auto
    whiteList['baseline-shift'] = false; // default: baseline
    whiteList['binding'] = false; // default: none
    whiteList['bleed'] = false; // default: 6pt
    whiteList['bookmark-label'] = false; // default: content()
    whiteList['bookmark-level'] = false; // default: none
    whiteList['bookmark-state'] = false; // default: open
    whiteList['border'] = true; // default: depending on individual properties
    whiteList['border-bottom'] = true; // default: depending on individual properties
    whiteList['border-bottom-color'] = true; // default: current color
    whiteList['border-bottom-left-radius'] = true; // default: 0
    whiteList['border-bottom-right-radius'] = true; // default: 0
    whiteList['border-bottom-style'] = true; // default: none
    whiteList['border-bottom-width'] = true; // default: medium
    whiteList['border-collapse'] = true; // default: separate
    whiteList['border-color'] = true; // default: depending on individual properties
    whiteList['border-image'] = true; // default: none
    whiteList['border-image-outset'] = true; // default: 0
    whiteList['border-image-repeat'] = true; // default: stretch
    whiteList['border-image-slice'] = true; // default: 100%
    whiteList['border-image-source'] = true; // default: none
    whiteList['border-image-width'] = true; // default: 1
    whiteList['border-left'] = true; // default: depending on individual properties
    whiteList['border-left-color'] = true; // default: current color
    whiteList['border-left-style'] = true; // default: none
    whiteList['border-left-width'] = true; // default: medium
    whiteList['border-radius'] = true; // default: 0
    whiteList['border-right'] = true; // default: depending on individual properties
    whiteList['border-right-color'] = true; // default: current color
    whiteList['border-right-style'] = true; // default: none
    whiteList['border-right-width'] = true; // default: medium
    whiteList['border-spacing'] = true; // default: 0
    whiteList['border-style'] = true; // default: depending on individual properties
    whiteList['border-top'] = true; // default: depending on individual properties
    whiteList['border-top-color'] = true; // default: current color
    whiteList['border-top-left-radius'] = true; // default: 0
    whiteList['border-top-right-radius'] = true; // default: 0
    whiteList['border-top-style'] = true; // default: none
    whiteList['border-top-width'] = true; // default: medium
    whiteList['border-width'] = true; // default: depending on individual properties
    whiteList['bottom'] = false; // default: auto
    whiteList['box-decoration-break'] = true; // default: slice
    whiteList['box-shadow'] = true; // default: none
    whiteList['box-sizing'] = true; // default: content-box
    whiteList['box-snap'] = true; // default: none
    whiteList['box-suppress'] = true; // default: show
    whiteList['break-after'] = true; // default: auto
    whiteList['break-before'] = true; // default: auto
    whiteList['break-inside'] = true; // default: auto
    whiteList['caption-side'] = false; // default: top
    whiteList['chains'] = false; // default: none
    whiteList['clear'] = true; // default: none
    whiteList['clip'] = false; // default: auto
    whiteList['clip-path'] = false; // default: none
    whiteList['clip-rule'] = false; // default: nonzero
    whiteList['color'] = true; // default: implementation dependent
    whiteList['color-interpolation-filters'] = true; // default: auto
    whiteList['column-count'] = false; // default: auto
    whiteList['column-fill'] = false; // default: balance
    whiteList['column-gap'] = false; // default: normal
    whiteList['column-rule'] = false; // default: depending on individual properties
    whiteList['column-rule-color'] = false; // default: current color
    whiteList['column-rule-style'] = false; // default: medium
    whiteList['column-rule-width'] = false; // default: medium
    whiteList['column-span'] = false; // default: none
    whiteList['column-width'] = false; // default: auto
    whiteList['columns'] = false; // default: depending on individual properties
    whiteList['contain'] = false; // default: none
    whiteList['content'] = false; // default: normal
    whiteList['counter-increment'] = false; // default: none
    whiteList['counter-reset'] = false; // default: none
    whiteList['counter-set'] = false; // default: none
    whiteList['crop'] = false; // default: auto
    whiteList['cue'] = false; // default: depending on individual properties
    whiteList['cue-after'] = false; // default: none
    whiteList['cue-before'] = false; // default: none
    whiteList['cursor'] = false; // default: auto
    whiteList['direction'] = false; // default: ltr
    whiteList['display'] = true; // default: depending on individual properties
    whiteList['display-inside'] = true; // default: auto
    whiteList['display-list'] = true; // default: none
    whiteList['display-outside'] = true; // default: inline-level
    whiteList['dominant-baseline'] = false; // default: auto
    whiteList['elevation'] = false; // default: level
    whiteList['empty-cells'] = false; // default: show
    whiteList['filter'] = false; // default: none
    whiteList['flex'] = false; // default: depending on individual properties
    whiteList['flex-basis'] = false; // default: auto
    whiteList['flex-direction'] = false; // default: row
    whiteList['flex-flow'] = false; // default: depending on individual properties
    whiteList['flex-grow'] = false; // default: 0
    whiteList['flex-shrink'] = false; // default: 1
    whiteList['flex-wrap'] = false; // default: nowrap
    whiteList['float'] = false; // default: none
    whiteList['float-offset'] = false; // default: 0 0
    whiteList['flood-color'] = false; // default: black
    whiteList['flood-opacity'] = false; // default: 1
    whiteList['flow-from'] = false; // default: none
    whiteList['flow-into'] = false; // default: none
    whiteList['font'] = true; // default: depending on individual properties
    whiteList['font-family'] = true; // default: implementation dependent
    whiteList['font-feature-settings'] = true; // default: normal
    whiteList['font-kerning'] = true; // default: auto
    whiteList['font-language-override'] = true; // default: normal
    whiteList['font-size'] = true; // default: medium
    whiteList['font-size-adjust'] = true; // default: none
    whiteList['font-stretch'] = true; // default: normal
    whiteList['font-style'] = true; // default: normal
    whiteList['font-synthesis'] = true; // default: weight style
    whiteList['font-variant'] = true; // default: normal
    whiteList['font-variant-alternates'] = true; // default: normal
    whiteList['font-variant-caps'] = true; // default: normal
    whiteList['font-variant-east-asian'] = true; // default: normal
    whiteList['font-variant-ligatures'] = true; // default: normal
    whiteList['font-variant-numeric'] = true; // default: normal
    whiteList['font-variant-position'] = true; // default: normal
    whiteList['font-weight'] = true; // default: normal
    whiteList['grid'] = false; // default: depending on individual properties
    whiteList['grid-area'] = false; // default: depending on individual properties
    whiteList['grid-auto-columns'] = false; // default: auto
    whiteList['grid-auto-flow'] = false; // default: none
    whiteList['grid-auto-rows'] = false; // default: auto
    whiteList['grid-column'] = false; // default: depending on individual properties
    whiteList['grid-column-end'] = false; // default: auto
    whiteList['grid-column-start'] = false; // default: auto
    whiteList['grid-row'] = false; // default: depending on individual properties
    whiteList['grid-row-end'] = false; // default: auto
    whiteList['grid-row-start'] = false; // default: auto
    whiteList['grid-template'] = false; // default: depending on individual properties
    whiteList['grid-template-areas'] = false; // default: none
    whiteList['grid-template-columns'] = false; // default: none
    whiteList['grid-template-rows'] = false; // default: none
    whiteList['hanging-punctuation'] = false; // default: none
    whiteList['height'] = true; // default: auto
    whiteList['hyphens'] = false; // default: manual
    whiteList['icon'] = false; // default: auto
    whiteList['image-orientation'] = false; // default: auto
    whiteList['image-resolution'] = false; // default: normal
    whiteList['ime-mode'] = false; // default: auto
    whiteList['initial-letters'] = false; // default: normal
    whiteList['inline-box-align'] = false; // default: last
    whiteList['justify-content'] = false; // default: auto
    whiteList['justify-items'] = false; // default: auto
    whiteList['justify-self'] = false; // default: auto
    whiteList['left'] = false; // default: auto
    whiteList['letter-spacing'] = true; // default: normal
    whiteList['lighting-color'] = true; // default: white
    whiteList['line-box-contain'] = false; // default: block inline replaced
    whiteList['line-break'] = false; // default: auto
    whiteList['line-grid'] = false; // default: match-parent
    whiteList['line-height'] = false; // default: normal
    whiteList['line-snap'] = false; // default: none
    whiteList['line-stacking'] = false; // default: depending on individual properties
    whiteList['line-stacking-ruby'] = false; // default: exclude-ruby
    whiteList['line-stacking-shift'] = false; // default: consider-shifts
    whiteList['line-stacking-strategy'] = false; // default: inline-line-height
    whiteList['list-style'] = true; // default: depending on individual properties
    whiteList['list-style-image'] = true; // default: none
    whiteList['list-style-position'] = true; // default: outside
    whiteList['list-style-type'] = true; // default: disc
    whiteList['margin'] = true; // default: depending on individual properties
    whiteList['margin-bottom'] = true; // default: 0
    whiteList['margin-left'] = true; // default: 0
    whiteList['margin-right'] = true; // default: 0
    whiteList['margin-top'] = true; // default: 0
    whiteList['marker-offset'] = false; // default: auto
    whiteList['marker-side'] = false; // default: list-item
    whiteList['marks'] = false; // default: none
    whiteList['mask'] = false; // default: border-box
    whiteList['mask-box'] = false; // default: see individual properties
    whiteList['mask-box-outset'] = false; // default: 0
    whiteList['mask-box-repeat'] = false; // default: stretch
    whiteList['mask-box-slice'] = false; // default: 0 fill
    whiteList['mask-box-source'] = false; // default: none
    whiteList['mask-box-width'] = false; // default: auto
    whiteList['mask-clip'] = false; // default: border-box
    whiteList['mask-image'] = false; // default: none
    whiteList['mask-origin'] = false; // default: border-box
    whiteList['mask-position'] = false; // default: center
    whiteList['mask-repeat'] = false; // default: no-repeat
    whiteList['mask-size'] = false; // default: border-box
    whiteList['mask-source-type'] = false; // default: auto
    whiteList['mask-type'] = false; // default: luminance
    whiteList['max-height'] = true; // default: none
    whiteList['max-lines'] = false; // default: none
    whiteList['max-width'] = true; // default: none
    whiteList['min-height'] = true; // default: 0
    whiteList['min-width'] = true; // default: 0
    whiteList['move-to'] = false; // default: normal
    whiteList['nav-down'] = false; // default: auto
    whiteList['nav-index'] = false; // default: auto
    whiteList['nav-left'] = false; // default: auto
    whiteList['nav-right'] = false; // default: auto
    whiteList['nav-up'] = false; // default: auto
    whiteList['object-fit'] = false; // default: fill
    whiteList['object-position'] = false; // default: 50% 50%
    whiteList['opacity'] = false; // default: 1
    whiteList['order'] = false; // default: 0
    whiteList['orphans'] = false; // default: 2
    whiteList['outline'] = false; // default: depending on individual properties
    whiteList['outline-color'] = false; // default: invert
    whiteList['outline-offset'] = false; // default: 0
    whiteList['outline-style'] = false; // default: none
    whiteList['outline-width'] = false; // default: medium
    whiteList['overflow'] = false; // default: depending on individual properties
    whiteList['overflow-wrap'] = false; // default: normal
    whiteList['overflow-x'] = false; // default: visible
    whiteList['overflow-y'] = false; // default: visible
    whiteList['padding'] = true; // default: depending on individual properties
    whiteList['padding-bottom'] = true; // default: 0
    whiteList['padding-left'] = true; // default: 0
    whiteList['padding-right'] = true; // default: 0
    whiteList['padding-top'] = true; // default: 0
    whiteList['page'] = false; // default: auto
    whiteList['page-break-after'] = false; // default: auto
    whiteList['page-break-before'] = false; // default: auto
    whiteList['page-break-inside'] = false; // default: auto
    whiteList['page-policy'] = false; // default: start
    whiteList['pause'] = false; // default: implementation dependent
    whiteList['pause-after'] = false; // default: implementation dependent
    whiteList['pause-before'] = false; // default: implementation dependent
    whiteList['perspective'] = false; // default: none
    whiteList['perspective-origin'] = false; // default: 50% 50%
    whiteList['pitch'] = false; // default: medium
    whiteList['pitch-range'] = false; // default: 50
    whiteList['play-during'] = false; // default: auto
    whiteList['position'] = false; // default: static
    whiteList['presentation-level'] = false; // default: 0
    whiteList['quotes'] = false; // default: text
    whiteList['region-fragment'] = false; // default: auto
    whiteList['resize'] = false; // default: none
    whiteList['rest'] = false; // default: depending on individual properties
    whiteList['rest-after'] = false; // default: none
    whiteList['rest-before'] = false; // default: none
    whiteList['richness'] = false; // default: 50
    whiteList['right'] = false; // default: auto
    whiteList['rotation'] = false; // default: 0
    whiteList['rotation-point'] = false; // default: 50% 50%
    whiteList['ruby-align'] = false; // default: auto
    whiteList['ruby-merge'] = false; // default: separate
    whiteList['ruby-position'] = false; // default: before
    whiteList['shape-image-threshold'] = false; // default: 0.0
    whiteList['shape-outside'] = false; // default: none
    whiteList['shape-margin'] = false; // default: 0
    whiteList['size'] = false; // default: auto
    whiteList['speak'] = false; // default: auto
    whiteList['speak-as'] = false; // default: normal
    whiteList['speak-header'] = false; // default: once
    whiteList['speak-numeral'] = false; // default: continuous
    whiteList['speak-punctuation'] = false; // default: none
    whiteList['speech-rate'] = false; // default: medium
    whiteList['stress'] = false; // default: 50
    whiteList['string-set'] = false; // default: none
    whiteList['tab-size'] = false; // default: 8
    whiteList['table-layout'] = false; // default: auto
    whiteList['text-align'] = true; // default: start
    whiteList['text-align-last'] = true; // default: auto
    whiteList['text-combine-upright'] = true; // default: none
    whiteList['text-decoration'] = true; // default: none
    whiteList['text-decoration-color'] = true; // default: currentColor
    whiteList['text-decoration-line'] = true; // default: none
    whiteList['text-decoration-skip'] = true; // default: objects
    whiteList['text-decoration-style'] = true; // default: solid
    whiteList['text-emphasis'] = true; // default: depending on individual properties
    whiteList['text-emphasis-color'] = true; // default: currentColor
    whiteList['text-emphasis-position'] = true; // default: over right
    whiteList['text-emphasis-style'] = true; // default: none
    whiteList['text-height'] = true; // default: auto
    whiteList['text-indent'] = true; // default: 0
    whiteList['text-justify'] = true; // default: auto
    whiteList['text-orientation'] = true; // default: mixed
    whiteList['text-overflow'] = true; // default: clip
    whiteList['text-shadow'] = true; // default: none
    whiteList['text-space-collapse'] = true; // default: collapse
    whiteList['text-transform'] = true; // default: none
    whiteList['text-underline-position'] = true; // default: auto
    whiteList['text-wrap'] = true; // default: normal
    whiteList['top'] = false; // default: auto
    whiteList['transform'] = false; // default: none
    whiteList['transform-origin'] = false; // default: 50% 50% 0
    whiteList['transform-style'] = false; // default: flat
    whiteList['transition'] = false; // default: depending on individual properties
    whiteList['transition-delay'] = false; // default: 0s
    whiteList['transition-duration'] = false; // default: 0s
    whiteList['transition-property'] = false; // default: all
    whiteList['transition-timing-function'] = false; // default: ease
    whiteList['unicode-bidi'] = false; // default: normal
    whiteList['vertical-align'] = false; // default: baseline
    whiteList['visibility'] = false; // default: visible
    whiteList['voice-balance'] = false; // default: center
    whiteList['voice-duration'] = false; // default: auto
    whiteList['voice-family'] = false; // default: implementation dependent
    whiteList['voice-pitch'] = false; // default: medium
    whiteList['voice-range'] = false; // default: medium
    whiteList['voice-rate'] = false; // default: normal
    whiteList['voice-stress'] = false; // default: normal
    whiteList['voice-volume'] = false; // default: medium
    whiteList['volume'] = false; // default: medium
    whiteList['white-space'] = false; // default: normal
    whiteList['widows'] = false; // default: 2
    whiteList['width'] = true; // default: auto
    whiteList['will-change'] = false; // default: auto
    whiteList['word-break'] = true; // default: normal
    whiteList['word-spacing'] = true; // default: normal
    whiteList['word-wrap'] = true; // default: normal
    whiteList['wrap-flow'] = false; // default: auto
    whiteList['wrap-through'] = false; // default: wrap
    whiteList['writing-mode'] = false; // default: horizontal-tb
    whiteList['z-index'] = false; // default: auto
    return whiteList;
}
/**
 * 匹配到白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */ function onAttr(name, value, options) {
// do nothing
}
/**
 * 匹配到不在白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */ function onIgnoreAttr(name, value, options) {
// do nothing
}
var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
/**
 * 过滤属性值
 *
 * @param {String} name
 * @param {String} value
 * @return {String}
 */ function safeAttrValue$1(name, value) {
    if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
    return value;
}
_default.whiteList = getDefaultWhiteList$1();
_default.getDefaultWhiteList = getDefaultWhiteList$1;
_default.onAttr = onAttr;
_default.onIgnoreAttr = onIgnoreAttr;
_default.safeAttrValue = safeAttrValue$1;
var util$1 = {
    indexOf: function(arr, item) {
        var i, j;
        if (Array.prototype.indexOf) {
            return arr.indexOf(item);
        }
        for(i = 0, j = arr.length; i < j; i++){
            if (arr[i] === item) {
                return i;
            }
        }
        return -1;
    },
    forEach: function(arr, fn, scope) {
        var i, j;
        if (Array.prototype.forEach) {
            return arr.forEach(fn, scope);
        }
        for(i = 0, j = arr.length; i < j; i++){
            fn.call(scope, arr[i], i, arr);
        }
    },
    trim: function(str) {
        if (String.prototype.trim) {
            return str.trim();
        }
        return str.replace(/(^\s*)|(\s*$)/g, '');
    },
    trimRight: function(str) {
        if (String.prototype.trimRight) {
            return str.trimRight();
        }
        return str.replace(/(\s*$)/g, '');
    }
};
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */ var _$3 = util$1;
/**
 * 解析style
 *
 * @param {String} css
 * @param {Function} onAttr 处理属性的函数
 *   参数格式： function (sourcePosition, position, name, value, source)
 * @return {String}
 */ function parseStyle$1(css, onAttr) {
    css = _$3.trimRight(css);
    if (css[css.length - 1] !== ';') css += ';';
    var cssLength = css.length;
    var isParenthesisOpen = false;
    var lastPos = 0;
    var i = 0;
    var retCSS = '';
    function addNewAttr() {
        // 如果没有正常的闭合圆括号，则直接忽略当前属性
        if (!isParenthesisOpen) {
            var source = _$3.trim(css.slice(lastPos, i));
            var j = source.indexOf(':');
            if (j !== -1) {
                var name = _$3.trim(source.slice(0, j));
                var value = _$3.trim(source.slice(j + 1));
                // 必须有属性名称
                if (name) {
                    var ret = onAttr(lastPos, retCSS.length, name, value, source);
                    if (ret) retCSS += ret + '; ';
                }
            }
        }
        lastPos = i + 1;
    }
    for(; i < cssLength; i++){
        var c = css[i];
        if (c === '/' && css[i + 1] === '*') {
            // 备注开始
            var j = css.indexOf('*/', i + 2);
            // 如果没有正常的备注结束，则后面的部分全部跳过
            if (j === -1) break;
            // 直接将当前位置调到备注结尾，并且初始化状态
            i = j + 1;
            lastPos = i + 1;
            isParenthesisOpen = false;
        } else if (c === '(') {
            isParenthesisOpen = true;
        } else if (c === ')') {
            isParenthesisOpen = false;
        } else if (c === ';') {
            if (isParenthesisOpen) ;
            else {
                addNewAttr();
            }
        } else if (c === '\n') {
            addNewAttr();
        }
    }
    return _$3.trim(retCSS);
}
var parser$2 = parseStyle$1;
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */ var DEFAULT$1 = _default;
var parseStyle = parser$2;
/**
 * 返回值是否为空
 *
 * @param {Object} obj
 * @return {Boolean}
 */ function isNull$1(obj) {
    return obj === undefined || obj === null;
}
/**
 * 浅拷贝对象
 *
 * @param {Object} obj
 * @return {Object}
 */ function shallowCopyObject$1(obj) {
    var ret = {};
    for(var i in obj){
        ret[i] = obj[i];
    }
    return ret;
}
/**
 * 创建CSS过滤器
 *
 * @param {Object} options
 *   - {Object} whiteList
 *   - {Function} onAttr
 *   - {Function} onIgnoreAttr
 *   - {Function} safeAttrValue
 */ function FilterCSS$2(options) {
    options = shallowCopyObject$1(options || {});
    options.whiteList = options.whiteList || DEFAULT$1.whiteList;
    options.onAttr = options.onAttr || DEFAULT$1.onAttr;
    options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT$1.onIgnoreAttr;
    options.safeAttrValue = options.safeAttrValue || DEFAULT$1.safeAttrValue;
    this.options = options;
}
FilterCSS$2.prototype.process = function(css) {
    // 兼容各种奇葩输入
    css = css || '';
    css = css.toString();
    if (!css) return '';
    var me = this;
    var options = me.options;
    var whiteList = options.whiteList;
    var onAttr = options.onAttr;
    var onIgnoreAttr = options.onIgnoreAttr;
    var safeAttrValue = options.safeAttrValue;
    var retCSS = parseStyle(css, function(sourcePosition, position, name, value, source) {
        var check = whiteList[name];
        var isWhite = false;
        if (check === true) isWhite = check;
        else if (typeof check === 'function') isWhite = check(value);
        else if (check instanceof RegExp) isWhite = check.test(value);
        if (isWhite !== true) isWhite = false;
        // 如果过滤后 value 为空则直接忽略
        value = safeAttrValue(name, value);
        if (!value) return;
        var opts = {
            position: position,
            sourcePosition: sourcePosition,
            source: source,
            isWhite: isWhite
        };
        if (isWhite) {
            var ret = onAttr(name, value, opts);
            if (isNull$1(ret)) {
                return name + ':' + value;
            } else {
                return ret;
            }
        } else {
            var ret = onIgnoreAttr(name, value, opts);
            if (!isNull$1(ret)) {
                return ret;
            }
        }
    });
    return retCSS;
};
var css = FilterCSS$2;
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */ (function(module, exports) {
    var DEFAULT = _default;
    var FilterCSS = css;
    /**
	 * XSS过滤
	 *
	 * @param {String} css 要过滤的CSS代码
	 * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
	 * @return {String}
	 */ function filterCSS(html, options) {
        var xss = new FilterCSS(options);
        return xss.process(html);
    }
    // 输出
    exports = module.exports = filterCSS;
    exports.FilterCSS = FilterCSS;
    for(var i in DEFAULT)exports[i] = DEFAULT[i];
})(lib, lib.exports);
var libExports$1 = lib.exports;
var util = {
    indexOf: function(arr, item) {
        var i, j;
        if (Array.prototype.indexOf) {
            return arr.indexOf(item);
        }
        for(i = 0, j = arr.length; i < j; i++){
            if (arr[i] === item) {
                return i;
            }
        }
        return -1;
    },
    forEach: function(arr, fn, scope) {
        var i, j;
        if (Array.prototype.forEach) {
            return arr.forEach(fn, scope);
        }
        for(i = 0, j = arr.length; i < j; i++){
            fn.call(scope, arr[i], i, arr);
        }
    },
    trim: function(str) {
        if (String.prototype.trim) {
            return str.trim();
        }
        return str.replace(/(^\s*)|(\s*$)/g, "");
    },
    spaceIndex: function(str) {
        var reg = /\s|\n|\t/;
        var match = reg.exec(str);
        return match ? match.index : -1;
    }
};
/**
 * default settings
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */ var FilterCSS$1 = libExports$1.FilterCSS;
var getDefaultCSSWhiteList = libExports$1.getDefaultWhiteList;
var _$2 = util;
function getDefaultWhiteList() {
    return {
        a: [
            "target",
            "href",
            "title"
        ],
        abbr: [
            "title"
        ],
        address: [],
        area: [
            "shape",
            "coords",
            "href",
            "alt"
        ],
        article: [],
        aside: [],
        audio: [
            "autoplay",
            "controls",
            "crossorigin",
            "loop",
            "muted",
            "preload",
            "src"
        ],
        b: [],
        bdi: [
            "dir"
        ],
        bdo: [
            "dir"
        ],
        big: [],
        blockquote: [
            "cite"
        ],
        br: [],
        caption: [],
        center: [],
        cite: [],
        code: [],
        col: [
            "align",
            "valign",
            "span",
            "width"
        ],
        colgroup: [
            "align",
            "valign",
            "span",
            "width"
        ],
        dd: [],
        del: [
            "datetime"
        ],
        details: [
            "open"
        ],
        div: [],
        dl: [],
        dt: [],
        em: [],
        figcaption: [],
        figure: [],
        font: [
            "color",
            "size",
            "face"
        ],
        footer: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        header: [],
        hr: [],
        i: [],
        img: [
            "src",
            "alt",
            "title",
            "width",
            "height"
        ],
        ins: [
            "datetime"
        ],
        li: [],
        mark: [],
        nav: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        section: [],
        small: [],
        span: [],
        sub: [],
        summary: [],
        sup: [],
        strong: [],
        strike: [],
        table: [
            "width",
            "border",
            "align",
            "valign"
        ],
        tbody: [
            "align",
            "valign"
        ],
        td: [
            "width",
            "rowspan",
            "colspan",
            "align",
            "valign"
        ],
        tfoot: [
            "align",
            "valign"
        ],
        th: [
            "width",
            "rowspan",
            "colspan",
            "align",
            "valign"
        ],
        thead: [
            "align",
            "valign"
        ],
        tr: [
            "rowspan",
            "align",
            "valign"
        ],
        tt: [],
        u: [],
        ul: [],
        video: [
            "autoplay",
            "controls",
            "crossorigin",
            "loop",
            "muted",
            "playsinline",
            "poster",
            "preload",
            "src",
            "height",
            "width"
        ]
    };
}
var defaultCSSFilter = new FilterCSS$1();
/**
 * default onTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */ function onTag(tag, html, options) {
// do nothing
}
/**
 * default onIgnoreTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */ function onIgnoreTag(tag, html, options) {
// do nothing
}
/**
 * default onTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */ function onTagAttr(tag, name, value) {
// do nothing
}
/**
 * default onIgnoreTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */ function onIgnoreTagAttr(tag, name, value) {
// do nothing
}
/**
 * default escapeHtml function
 *
 * @param {String} html
 */ function escapeHtml(html) {
    return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
}
/**
 * default safeAttrValue function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @param {Object} cssFilter
 * @return {String}
 */ function safeAttrValue(tag, name, value, cssFilter) {
    // unescape attribute value firstly
    value = friendlyAttrValue(value);
    if (name === "href" || name === "src") {
        // filter `href` and `src` attribute
        // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
        value = _$2.trim(value);
        if (value === "#") return "#";
        if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value.substr(0, 11) === "data:image/" || value.substr(0, 6) === "ftp://" || value.substr(0, 2) === "./" || value.substr(0, 3) === "../" || value[0] === "#" || value[0] === "/")) {
            return "";
        }
    } else if (name === "background") {
        // filter `background` attribute (maybe no use)
        // `javascript:`
        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
            return "";
        }
    } else if (name === "style") {
        // `expression()`
        REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
        if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
            return "";
        }
        // `url()`
        REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
        if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
            REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
            if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                return "";
            }
        }
        if (cssFilter !== false) {
            cssFilter = cssFilter || defaultCSSFilter;
            value = cssFilter.process(value);
        }
    }
    // escape `<>"` before returns
    value = escapeAttrValue(value);
    return value;
}
// RegExp list
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
// var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi;
// var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
// var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
/**
 * escape double quote
 *
 * @param {String} str
 * @return {String} str
 */ function escapeQuote(str) {
    return str.replace(REGEXP_QUOTE, "&quot;");
}
/**
 * unescape double quote
 *
 * @param {String} str
 * @return {String} str
 */ function unescapeQuote(str) {
    return str.replace(REGEXP_QUOTE_2, '"');
}
/**
 * escape html entities
 *
 * @param {String} str
 * @return {String}
 */ function escapeHtmlEntities(str) {
    return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
        return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
    });
}
/**
 * escape html5 new danger entities
 *
 * @param {String} str
 * @return {String}
 */ function escapeDangerHtml5Entities(str) {
    return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
}
/**
 * clear nonprintable characters
 *
 * @param {String} str
 * @return {String}
 */ function clearNonPrintableCharacter(str) {
    var str2 = "";
    for(var i = 0, len = str.length; i < len; i++){
        str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
    }
    return _$2.trim(str2);
}
/**
 * get friendly attribute value
 *
 * @param {String} str
 * @return {String}
 */ function friendlyAttrValue(str) {
    str = unescapeQuote(str);
    str = escapeHtmlEntities(str);
    str = escapeDangerHtml5Entities(str);
    str = clearNonPrintableCharacter(str);
    return str;
}
/**
 * unescape attribute value
 *
 * @param {String} str
 * @return {String}
 */ function escapeAttrValue(str) {
    str = escapeQuote(str);
    str = escapeHtml(str);
    return str;
}
/**
 * `onIgnoreTag` function for removing all the tags that are not in whitelist
 */ function onIgnoreTagStripAll() {
    return "";
}
/**
 * remove tag body
 * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
 *
 * @param {array} tags
 * @param {function} next
 */ function StripTagBody(tags, next) {
    if (typeof next !== "function") {
        next = function() {};
    }
    var isRemoveAllTag = !Array.isArray(tags);
    function isRemoveTag(tag) {
        if (isRemoveAllTag) return true;
        return _$2.indexOf(tags, tag) !== -1;
    }
    var removeList = [];
    var posStart = false;
    return {
        onIgnoreTag: function(tag, html, options) {
            if (isRemoveTag(tag)) {
                if (options.isClosing) {
                    var ret = "[/removed]";
                    var end = options.position + ret.length;
                    removeList.push([
                        posStart !== false ? posStart : options.position,
                        end
                    ]);
                    posStart = false;
                    return ret;
                } else {
                    if (!posStart) {
                        posStart = options.position;
                    }
                    return "[removed]";
                }
            } else {
                return next(tag, html, options);
            }
        },
        remove: function(html) {
            var rethtml = "";
            var lastPos = 0;
            _$2.forEach(removeList, function(pos) {
                rethtml += html.slice(lastPos, pos[0]);
                lastPos = pos[1];
            });
            rethtml += html.slice(lastPos);
            return rethtml;
        }
    };
}
/**
 * remove html comments
 *
 * @param {String} html
 * @return {String}
 */ function stripCommentTag(html) {
    var retHtml = "";
    var lastPos = 0;
    while(lastPos < html.length){
        var i = html.indexOf("<!--", lastPos);
        if (i === -1) {
            retHtml += html.slice(lastPos);
            break;
        }
        retHtml += html.slice(lastPos, i);
        var j = html.indexOf("-->", i);
        if (j === -1) {
            break;
        }
        lastPos = j + 3;
    }
    return retHtml;
}
/**
 * remove invisible characters
 *
 * @param {String} html
 * @return {String}
 */ function stripBlankChar(html) {
    var chars = html.split("");
    chars = chars.filter(function(char) {
        var c = char.charCodeAt(0);
        if (c === 127) return false;
        if (c <= 31) {
            if (c === 10 || c === 13) return true;
            return false;
        }
        return true;
    });
    return chars.join("");
}
_default$1.whiteList = getDefaultWhiteList();
_default$1.getDefaultWhiteList = getDefaultWhiteList;
_default$1.onTag = onTag;
_default$1.onIgnoreTag = onIgnoreTag;
_default$1.onTagAttr = onTagAttr;
_default$1.onIgnoreTagAttr = onIgnoreTagAttr;
_default$1.safeAttrValue = safeAttrValue;
_default$1.escapeHtml = escapeHtml;
_default$1.escapeQuote = escapeQuote;
_default$1.unescapeQuote = unescapeQuote;
_default$1.escapeHtmlEntities = escapeHtmlEntities;
_default$1.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
_default$1.clearNonPrintableCharacter = clearNonPrintableCharacter;
_default$1.friendlyAttrValue = friendlyAttrValue;
_default$1.escapeAttrValue = escapeAttrValue;
_default$1.onIgnoreTagStripAll = onIgnoreTagStripAll;
_default$1.StripTagBody = StripTagBody;
_default$1.stripCommentTag = stripCommentTag;
_default$1.stripBlankChar = stripBlankChar;
_default$1.cssFilter = defaultCSSFilter;
_default$1.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
var parser$1 = {};
/**
 * Simple HTML Parser
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */ var _$1 = util;
/**
 * get tag name
 *
 * @param {String} html e.g. '<a hef="#">'
 * @return {String}
 */ function getTagName(html) {
    var i = _$1.spaceIndex(html);
    var tagName;
    if (i === -1) {
        tagName = html.slice(1, -1);
    } else {
        tagName = html.slice(1, i + 1);
    }
    tagName = _$1.trim(tagName).toLowerCase();
    if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
    if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
    return tagName;
}
/**
 * is close tag?
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */ function isClosing(html) {
    return html.slice(0, 2) === "</";
}
/**
 * parse input html and returns processed html
 *
 * @param {String} html
 * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml
 * @return {String}
 */ function parseTag$1(html, onTag, escapeHtml) {
    var rethtml = "";
    var lastPos = 0;
    var tagStart = false;
    var quoteStart = false;
    var currentPos = 0;
    var len = html.length;
    var currentTagName = "";
    var currentHtml = "";
    chariterator: for(currentPos = 0; currentPos < len; currentPos++){
        var c = html.charAt(currentPos);
        if (tagStart === false) {
            if (c === "<") {
                tagStart = currentPos;
                continue;
            }
        } else {
            if (quoteStart === false) {
                if (c === "<") {
                    rethtml += escapeHtml(html.slice(lastPos, currentPos));
                    tagStart = currentPos;
                    lastPos = currentPos;
                    continue;
                }
                if (c === ">") {
                    rethtml += escapeHtml(html.slice(lastPos, tagStart));
                    currentHtml = html.slice(tagStart, currentPos + 1);
                    currentTagName = getTagName(currentHtml);
                    rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, isClosing(currentHtml));
                    lastPos = currentPos + 1;
                    tagStart = false;
                    continue;
                }
                if (c === '"' || c === "'") {
                    var i = 1;
                    var ic = html.charAt(currentPos - i);
                    while(ic.trim() === "" || ic === "="){
                        if (ic === "=") {
                            quoteStart = c;
                            continue chariterator;
                        }
                        ic = html.charAt(currentPos - ++i);
                    }
                }
            } else {
                if (c === quoteStart) {
                    quoteStart = false;
                    continue;
                }
            }
        }
    }
    if (lastPos < html.length) {
        rethtml += escapeHtml(html.substr(lastPos));
    }
    return rethtml;
}
var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\_:.-]/gim;
/**
 * parse input attributes and returns processed attributes
 *
 * @param {String} html e.g. `href="#" target="_blank"`
 * @param {Function} onAttr e.g. `function (name, value)`
 * @return {String}
 */ function parseAttr$1(html, onAttr) {
    var lastPos = 0;
    var lastMarkPos = 0;
    var retAttrs = [];
    var tmpName = false;
    var len = html.length;
    function addAttr(name, value) {
        name = _$1.trim(name);
        name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
        if (name.length < 1) return;
        var ret = onAttr(name, value || "");
        if (ret) retAttrs.push(ret);
    }
    // 逐个分析字符
    for(var i = 0; i < len; i++){
        var c = html.charAt(i);
        var v, j;
        if (tmpName === false && c === "=") {
            tmpName = html.slice(lastPos, i);
            lastPos = i + 1;
            lastMarkPos = html.charAt(lastPos) === '"' || html.charAt(lastPos) === "'" ? lastPos : findNextQuotationMark(html, i + 1);
            continue;
        }
        if (tmpName !== false) {
            if (i === lastMarkPos) {
                j = html.indexOf(c, i + 1);
                if (j === -1) {
                    break;
                } else {
                    v = _$1.trim(html.slice(lastMarkPos + 1, j));
                    addAttr(tmpName, v);
                    tmpName = false;
                    i = j;
                    lastPos = i + 1;
                    continue;
                }
            }
        }
        if (/\s|\n|\t/.test(c)) {
            html = html.replace(/\s|\n|\t/g, " ");
            if (tmpName === false) {
                j = findNextEqual(html, i);
                if (j === -1) {
                    v = _$1.trim(html.slice(lastPos, i));
                    addAttr(v);
                    tmpName = false;
                    lastPos = i + 1;
                    continue;
                } else {
                    i = j - 1;
                    continue;
                }
            } else {
                j = findBeforeEqual(html, i - 1);
                if (j === -1) {
                    v = _$1.trim(html.slice(lastPos, i));
                    v = stripQuoteWrap(v);
                    addAttr(tmpName, v);
                    tmpName = false;
                    lastPos = i + 1;
                    continue;
                } else {
                    continue;
                }
            }
        }
    }
    if (lastPos < html.length) {
        if (tmpName === false) {
            addAttr(html.slice(lastPos));
        } else {
            addAttr(tmpName, stripQuoteWrap(_$1.trim(html.slice(lastPos))));
        }
    }
    return _$1.trim(retAttrs.join(" "));
}
function findNextEqual(str, i) {
    for(; i < str.length; i++){
        var c = str[i];
        if (c === " ") continue;
        if (c === "=") return i;
        return -1;
    }
}
function findNextQuotationMark(str, i) {
    for(; i < str.length; i++){
        var c = str[i];
        if (c === " ") continue;
        if (c === "'" || c === '"') return i;
        return -1;
    }
}
function findBeforeEqual(str, i) {
    for(; i > 0; i--){
        var c = str[i];
        if (c === " ") continue;
        if (c === "=") return i;
        return -1;
    }
}
function isQuoteWrapString(text) {
    if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
        return true;
    } else {
        return false;
    }
}
function stripQuoteWrap(text) {
    if (isQuoteWrapString(text)) {
        return text.substr(1, text.length - 2);
    } else {
        return text;
    }
}
parser$1.parseTag = parseTag$1;
parser$1.parseAttr = parseAttr$1;
/**
 * filter xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */ var FilterCSS = libExports$1.FilterCSS;
var DEFAULT = _default$1;
var parser = parser$1;
var parseTag = parser.parseTag;
var parseAttr = parser.parseAttr;
var _ = util;
/**
 * returns `true` if the input value is `undefined` or `null`
 *
 * @param {Object} obj
 * @return {Boolean}
 */ function isNull(obj) {
    return obj === undefined || obj === null;
}
/**
 * get attributes for a tag
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */ function getAttrs(html) {
    var i = _.spaceIndex(html);
    if (i === -1) {
        return {
            html: "",
            closing: html[html.length - 2] === "/"
        };
    }
    html = _.trim(html.slice(i + 1, -1));
    var isClosing = html[html.length - 1] === "/";
    if (isClosing) html = _.trim(html.slice(0, -1));
    return {
        html: html,
        closing: isClosing
    };
}
/**
 * shallow copy
 *
 * @param {Object} obj
 * @return {Object}
 */ function shallowCopyObject(obj) {
    var ret = {};
    for(var i in obj){
        ret[i] = obj[i];
    }
    return ret;
}
function keysToLowerCase(obj) {
    var ret = {};
    for(var i in obj){
        if (Array.isArray(obj[i])) {
            ret[i.toLowerCase()] = obj[i].map(function(item) {
                return item.toLowerCase();
            });
        } else {
            ret[i.toLowerCase()] = obj[i];
        }
    }
    return ret;
}
/**
 * FilterXSS class
 *
 * @param {Object} options
 *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,
 *        onIgnoreTagAttr, safeAttrValue, escapeHtml
 *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
 *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
 */ function FilterXSS(options) {
    options = shallowCopyObject(options || {});
    if (options.stripIgnoreTag) {
        if (options.onIgnoreTag) {
            console.error('Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time');
        }
        options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
    }
    if (options.whiteList || options.allowList) {
        options.whiteList = keysToLowerCase(options.whiteList || options.allowList);
    } else {
        options.whiteList = DEFAULT.whiteList;
    }
    options.onTag = options.onTag || DEFAULT.onTag;
    options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
    options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
    options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
    options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
    options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
    this.options = options;
    if (options.css === false) {
        this.cssFilter = false;
    } else {
        options.css = options.css || {};
        this.cssFilter = new FilterCSS(options.css);
    }
}
/**
 * start process and returns result
 *
 * @param {String} html
 * @return {String}
 */ FilterXSS.prototype.process = function(html) {
    // compatible with the input
    html = html || "";
    html = html.toString();
    if (!html) return "";
    var me = this;
    var options = me.options;
    var whiteList = options.whiteList;
    var onTag = options.onTag;
    var onIgnoreTag = options.onIgnoreTag;
    var onTagAttr = options.onTagAttr;
    var onIgnoreTagAttr = options.onIgnoreTagAttr;
    var safeAttrValue = options.safeAttrValue;
    var escapeHtml = options.escapeHtml;
    var cssFilter = me.cssFilter;
    // remove invisible characters
    if (options.stripBlankChar) {
        html = DEFAULT.stripBlankChar(html);
    }
    // remove html comments
    if (!options.allowCommentTag) {
        html = DEFAULT.stripCommentTag(html);
    }
    // if enable stripIgnoreTagBody
    var stripIgnoreTagBody = false;
    if (options.stripIgnoreTagBody) {
        stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);
        onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
    }
    var retHtml = parseTag(html, function(sourcePosition, position, tag, html, isClosing) {
        var info = {
            sourcePosition: sourcePosition,
            position: position,
            isClosing: isClosing,
            isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag)
        };
        // call `onTag()`
        var ret = onTag(tag, html, info);
        if (!isNull(ret)) return ret;
        if (info.isWhite) {
            if (info.isClosing) {
                return "</" + tag + ">";
            }
            var attrs = getAttrs(html);
            var whiteAttrList = whiteList[tag];
            var attrsHtml = parseAttr(attrs.html, function(name, value) {
                // call `onTagAttr()`
                var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
                var ret = onTagAttr(tag, name, value, isWhiteAttr);
                if (!isNull(ret)) return ret;
                if (isWhiteAttr) {
                    // call `safeAttrValue()`
                    value = safeAttrValue(tag, name, value, cssFilter);
                    if (value) {
                        return name + '="' + value + '"';
                    } else {
                        return name;
                    }
                } else {
                    // call `onIgnoreTagAttr()`
                    ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
                    if (!isNull(ret)) return ret;
                    return;
                }
            });
            // build new tag html
            html = "<" + tag;
            if (attrsHtml) html += " " + attrsHtml;
            if (attrs.closing) html += " /";
            html += ">";
            return html;
        } else {
            // call `onIgnoreTag()`
            ret = onIgnoreTag(tag, html, info);
            if (!isNull(ret)) return ret;
            return escapeHtml(html);
        }
    }, escapeHtml);
    // if enable stripIgnoreTagBody
    if (stripIgnoreTagBody) {
        retHtml = stripIgnoreTagBody.remove(retHtml);
    }
    return retHtml;
};
var xss = FilterXSS;
/**
 * xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */ (function(module, exports) {
    var DEFAULT = _default$1;
    var parser = parser$1;
    var FilterXSS = xss;
    /**
	 * filter xss function
	 *
	 * @param {String} html
	 * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
	 * @return {String}
	 */ function filterXSS(html, options) {
        var xss = new FilterXSS(options);
        return xss.process(html);
    }
    exports = module.exports = filterXSS;
    exports.filterXSS = filterXSS;
    exports.FilterXSS = FilterXSS;
    (function() {
        for(var i in DEFAULT){
            exports[i] = DEFAULT[i];
        }
        for(var j in parser){
            exports[j] = parser[j];
        }
    })();
    // using `xss` on the WebWorker, output `filterXSS` to the globals
    function isWorkerEnv() {
        return typeof self !== "undefined" && typeof DedicatedWorkerGlobalScope !== "undefined" && self instanceof DedicatedWorkerGlobalScope;
    }
    if (isWorkerEnv()) {
        self.filterXSS = module.exports;
    }
})(lib$1, lib$1.exports);
var libExports = lib$1.exports;
/**
 * Determine if the value is a plain object.
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 */ var isPlainObject = function(value) {
    if (typeof value !== "object" || value === null) {
        return false;
    }
    if (Object.prototype.toString.call(value) !== "[object Object]") {
        return false;
    }
    var proto = Object.getPrototypeOf(value);
    if (proto === null) {
        return true;
    }
    while(Object.getPrototypeOf(proto) !== null){
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(value) === proto;
};
/**
 * The Sanitizer Class
 *
 * @export
 * @class Sanitizer
 */ var Sanitizer = function() {
    function Sanitizer(filterOptions, extendDefaults) {
        var _this = this;
        // Supported HTML Spec: https://doc.arcgis.com/en/arcgis-online/reference/supported-html.htm
        this.arcgisWhiteList = {
            a: [
                "href",
                "style",
                "target"
            ],
            abbr: [
                "title"
            ],
            article: [
                "style"
            ],
            aside: [
                "style"
            ],
            audio: [
                "autoplay",
                "controls",
                "loop",
                "muted",
                "preload"
            ],
            b: [],
            blockquote: [
                "style"
            ],
            br: [],
            code: [
                "style"
            ],
            dd: [
                "style"
            ],
            del: [
                "style"
            ],
            details: [
                "open",
                "style"
            ],
            div: [
                "align",
                "aria-hidden",
                "aria-label",
                "style"
            ],
            dl: [
                "style"
            ],
            dt: [
                "style"
            ],
            em: [],
            figcaption: [
                "style"
            ],
            figure: [
                "style"
            ],
            font: [
                "color",
                "face",
                "size",
                "style"
            ],
            footer: [
                "style"
            ],
            h1: [
                "style"
            ],
            h2: [
                "style"
            ],
            h3: [
                "style"
            ],
            h4: [
                "style"
            ],
            h5: [
                "style"
            ],
            h6: [
                "style"
            ],
            header: [
                "style"
            ],
            hr: [],
            i: [],
            img: [
                "alt",
                "border",
                "height",
                "src",
                "style",
                "width"
            ],
            li: [],
            main: [
                "style"
            ],
            mark: [
                "style"
            ],
            nav: [
                "style"
            ],
            ol: [],
            p: [
                "style"
            ],
            pre: [
                "style"
            ],
            section: [
                "style"
            ],
            source: [
                "media",
                "src",
                "type"
            ],
            span: [
                "aria-hidden",
                "aria-label",
                "style"
            ],
            strong: [],
            sub: [
                "style"
            ],
            summary: [
                "style"
            ],
            sup: [
                "style"
            ],
            table: [
                "border",
                "cellpadding",
                "cellspacing",
                "height",
                "style",
                "width"
            ],
            tbody: [],
            tr: [
                "align",
                "height",
                "style",
                "valign"
            ],
            td: [
                "align",
                "colspan",
                "height",
                "nowrap",
                "rowspan",
                "style",
                "valign",
                "width"
            ],
            th: [
                "align",
                "colspan",
                "height",
                "nowrap",
                "rowspan",
                "style",
                "valign",
                "width"
            ],
            time: [
                "style"
            ],
            u: [],
            ul: [],
            video: [
                "autoplay",
                "controls",
                "height",
                "loop",
                "muted",
                "poster",
                "preload",
                "width"
            ]
        };
        this.arcgisCSSWhiteList = __assign(__assign({}, libExports.getDefaultCSSWhiteList()), {
            "align-items": true,
            "align-self": true,
            "flex": true,
            "flex-basis": true,
            "flex-direction": true,
            "flex-flow": true,
            "flex-grow": true,
            "flex-shrink": true,
            "flex-wrap": true,
            "float": true,
            "gap": true,
            "grid": true,
            "grid-area": true,
            "grid-auto-columns": true,
            "grid-auto-flow": true,
            "grid-auto-rows": true,
            "grid-column": true,
            "grid-column-end": true,
            "grid-column-start": true,
            "grid-row": true,
            "grid-row-end": true,
            "grid-row-start": true,
            "grid-template": true,
            "grid-template-areas": true,
            "grid-template-columns": true,
            "grid-template-rows": true,
            "justify-content": true,
            "justify-items": true,
            "justify-self": true,
            "line-height": true,
            "overflow": true
        });
        this.allowedProtocols = [
            "http",
            "https",
            "mailto",
            "iform",
            "tel",
            "flow",
            "lfmobile",
            "arcgis-navigator",
            "arcgis-appstudio-player",
            "arcgis-survey123",
            "arcgis-collector",
            "arcgis-workforce",
            "arcgis-explorer",
            "arcgis-trek2there",
            "arcgis-quickcapture",
            "mspbi",
            "comgooglemaps",
            "pdfefile",
            "pdfehttp",
            "pdfehttps",
            "boxapp",
            "boxemm",
            "awb",
            "awbs",
            "gropen",
            "radarscope"
        ];
        this.arcgisFilterOptions = {
            allowCommentTag: true,
            safeAttrValue: function(tag, name, value, cssFilter) {
                // Take over safe attribute filtering for `a` `href`, `img` `src`,
                // and `source` `src` attributes, otherwise pass onto the
                // default `XSS.safeAttrValue` method.
                if (tag === "a" && name === "href" || (tag === "img" || tag === "source") && name === "src") {
                    return _this.sanitizeUrl(value);
                }
                return libExports.safeAttrValue(tag, name, value, cssFilter);
            }
        };
        this._entityMap = {
            "&": "&#x38;",
            "<": "&#x3C;",
            ">": "&#x3E;",
            '"': "&#x22;",
            "'": "&#x27;",
            "/": "&#x2F;"
        };
        var xssFilterOptions;
        if (filterOptions && !extendDefaults) {
            // Override the defaults
            xssFilterOptions = filterOptions;
        } else if (filterOptions && extendDefaults) {
            // Extend the defaults
            xssFilterOptions = Object.create(this.arcgisFilterOptions);
            xssFilterOptions.css = {
                whiteList: this.arcgisCSSWhiteList
            };
            Object.keys(filterOptions).forEach(function(key) {
                if (key === "whiteList") {
                    // Extend the whitelist by concatenating arrays
                    xssFilterOptions.whiteList = _this._extendObjectOfArrays([
                        _this.arcgisWhiteList,
                        filterOptions.whiteList || {}
                    ]);
                } else if (key === "css") {
                    var cssExtensions_1 = filterOptions.css.whiteList;
                    if (cssExtensions_1 != null && filterOptions.css instanceof Object) {
                        Object.keys(cssExtensions_1).forEach(function(attr) {
                            return xssFilterOptions.css.whiteList[attr] = cssExtensions_1[attr];
                        });
                    }
                } else {
                    xssFilterOptions[key] = filterOptions[key];
                }
            });
        } else {
            // Only use the defaults
            xssFilterOptions = Object.create(this.arcgisFilterOptions);
            xssFilterOptions.whiteList = this.arcgisWhiteList;
            xssFilterOptions.css = {
                whiteList: this.arcgisCSSWhiteList
            };
        }
        this.xssFilterOptions = xssFilterOptions;
        // Make this readable to tests
        this._xssFilter = new libExports.FilterXSS(xssFilterOptions);
    }
    /**
     * Sanitizes value to remove invalid HTML tags.
     *
     * Note: If the value passed does not contain a valid JSON data type (String,
     * Number, JSON Object, Array, Boolean, or null), the value will be nullified.
     *
     * @param {any} value The value to sanitize.
     * @returns {any} The sanitized value.
     * @memberof Sanitizer
     */ Sanitizer.prototype.sanitize = function(value, options) {
        if (options === void 0) {
            options = {};
        }
        switch(typeof value){
            case "number":
                if (isNaN(value) || !isFinite(value)) {
                    return null;
                }
                return value;
            case "boolean":
                return value;
            case "string":
                return this._xssFilter.process(value);
            case "object":
                return this._iterateOverObject(value, options);
            default:
                if (options.allowUndefined && typeof value === "undefined") {
                    return;
                }
                return null;
        }
    };
    /**
     * Sanitizes a URL string following the allowed protocols and sanitization rules.
     *
     * @param {string} value The URL to sanitize.
     * @param {{ isProtocolRequired: boolean }} options Configuration options for URL checking.
     * @returns {string} The sanitized URL if it's valid, or an empty string if the URL is invalid.
     */ Sanitizer.prototype.sanitizeUrl = function(value, options) {
        var _a = (options !== null && options !== void 0 ? options : {}).isProtocolRequired, isProtocolRequired = _a === void 0 ? true : _a;
        var protocol = this._trim(value.substring(0, value.indexOf(":")));
        var isRootUrl = value === "/";
        var isUrlFragment = /^#/.test(value);
        var isValidProtocol = protocol && this.allowedProtocols.indexOf(protocol.toLowerCase()) > -1;
        if (isRootUrl || isUrlFragment || isValidProtocol) {
            return libExports.escapeAttrValue(value);
        }
        if (!protocol && !isProtocolRequired) {
            return libExports.escapeAttrValue("https://".concat(value));
        }
        return "";
    };
    /**
     * Sanitizes an HTML attribute value.
     *
     * @param {string} tag The tagname of the HTML element.
     * @param {string} attribute The attribute name of the HTML element.
     * @param {string} value The raw value to be used for the HTML attribute value.
     * @param {XSS.ICSSFilter} [cssFilter] The CSS filter to be used.
     * @returns {string} The sanitized attribute value.
     * @memberof Sanitizer
     */ Sanitizer.prototype.sanitizeHTMLAttribute = function(tag, attribute, value, cssFilter) {
        // use the custom safeAttrValue function if provided
        if (typeof this.xssFilterOptions.safeAttrValue === "function") {
            return this.xssFilterOptions.safeAttrValue(tag, attribute, value, // @ts-expect-error safeAttrValue does handle undefined cssFilter
            cssFilter);
        }
        // otherwise use the default
        // @ts-ignore safeAttrValue does handle undefined cssFilter
        return libExports.safeAttrValue(tag, attribute, value, cssFilter);
    };
    /**
     * Checks if a value only contains valid HTML.
     *
     * @param {any} value The value to validate.
     * @returns {boolean}
     * @memberof Sanitizer
     */ Sanitizer.prototype.validate = function(value, options) {
        if (options === void 0) {
            options = {};
        }
        var sanitized = this.sanitize(value, options);
        return {
            isValid: value === sanitized,
            sanitized: sanitized
        };
    };
    /**
     * Encodes the following characters, `& < > \" ' /` to their hexadecimal HTML entity code.
     * Example: "&middot;" => "&#x38;middot;"
     *
     * @param {string} value The value to encode.
     * @returns {string} The encoded string value.
     * @memberof Sanitizer
     */ Sanitizer.prototype.encodeHTML = function(value) {
        var _this = this;
        return String(value).replace(/[&<>"'\/]/g, function(s) {
            return _this._entityMap[s];
        });
    };
    /**
     * Encodes all non-alphanumeric ASCII characters to their hexadecimal HTML entity codes.
     * Example: "alert(document.cookie)" => "alert&#x28;document&#x2e;cookie&#x29;"
     *
     * @param {string} value The value to encode.
     * @returns {string} The encoded string value.
     * @memberof Sanitizer
     */ Sanitizer.prototype.encodeAttrValue = function(value) {
        var alphanumericRE = /^[a-zA-Z0-9]$/;
        return String(value).replace(/[\x00-\xFF]/g, function(c, idx) {
            return !alphanumericRE.test(c) ? "&#x".concat(Number(value.charCodeAt(idx)).toString(16), ";") : c;
        });
    };
    /**
     * Extends an object of arrays by by concatenating arrays of the same object
     * keys. If the if the previous key's value is not an array, the next key's
     * value will replace the previous key. This method is used for extending the
     * whiteList in the XSS filter options.
     *
     * @private
     * @param {Array<{}>} objects An array of objects.
     * @returns {{}} The extended object.
     * @memberof Sanitizer
     */ Sanitizer.prototype._extendObjectOfArrays = function(objects) {
        var finalObj = {};
        objects.forEach(function(obj) {
            Object.keys(obj).forEach(function(key) {
                if (Array.isArray(obj[key]) && Array.isArray(finalObj[key])) {
                    finalObj[key] = finalObj[key].concat(obj[key]);
                } else {
                    finalObj[key] = obj[key];
                }
            });
        });
        return finalObj;
    };
    /**
     * Iterate over a plain object or array to deeply sanitize each value.
     *
     * @private
     * @param {object} obj The object to iterate over.
     * @returns {(object | null)} The sanitized object.
     * @memberof Sanitizer
     */ Sanitizer.prototype._iterateOverObject = function(obj, options) {
        var _this = this;
        if (options === void 0) {
            options = {};
        }
        try {
            var hasChanged_1 = false;
            var changedObj = void 0;
            if (Array.isArray(obj)) {
                changedObj = obj.reduce(function(prev, value) {
                    var validation = _this.validate(value, options);
                    if (validation.isValid) {
                        return prev.concat([
                            value
                        ]);
                    } else {
                        hasChanged_1 = true;
                        return prev.concat([
                            validation.sanitized
                        ]);
                    }
                }, []);
            } else if (!isPlainObject(obj)) {
                if (options.allowUndefined && typeof obj === "undefined") {
                    return;
                }
                return null;
            } else {
                var keys = Object.keys(obj);
                changedObj = keys.reduce(function(prev, key) {
                    var value = obj[key];
                    var validation = _this.validate(value, options);
                    if (validation.isValid) {
                        prev[key] = value;
                    } else {
                        hasChanged_1 = true;
                        prev[key] = validation.sanitized;
                    }
                    return prev;
                }, {});
            }
            if (hasChanged_1) {
                return changedObj;
            }
            return obj;
        } catch (err) {
            return null;
        }
    };
    /**
     * Trim whitespace from the start and ends of a string.
     * @param {string} val The string to trim.
     * @returns {string} The trimmed string.
     */ Sanitizer.prototype._trim = function(val) {
        // @ts-ignore This is used by Jest,
        // but TypeScript errors since it assumes `trim` is always available.
        return String.prototype.trim ? val.trim() : val.replace(/(^\s*)|(\s*$)/g, "");
    };
    return Sanitizer;
}();
;
}}),
"[project]/node_modules/@arcgis/lumina/dist/chunk-PGHUBTOM.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// src/config.ts
__turbopack_esm__({
    "PropertyFlags": (()=>PropertyFlags),
    "lazyMetaGroupJoiner": (()=>lazyMetaGroupJoiner),
    "lazyMetaItemJoiner": (()=>lazyMetaItemJoiner),
    "lazyMetaSubItemJoiner": (()=>lazyMetaSubItemJoiner)
});
var lazyMetaGroupJoiner = ";";
var lazyMetaItemJoiner = ",";
var lazyMetaSubItemJoiner = ":";
var PropertyFlags = /* @__PURE__ */ ((PropertyFlags2)=>{
    PropertyFlags2[PropertyFlags2["ATTRIBUTE"] = 1] = "ATTRIBUTE";
    PropertyFlags2[PropertyFlags2["REFLECT"] = 2] = "REFLECT";
    PropertyFlags2[PropertyFlags2["BOOLEAN"] = 4] = "BOOLEAN";
    PropertyFlags2[PropertyFlags2["NUMBER"] = 8] = "NUMBER";
    PropertyFlags2[PropertyFlags2["STATE"] = 16] = "STATE";
    PropertyFlags2[PropertyFlags2["READ_ONLY"] = 32] = "READ_ONLY";
    PropertyFlags2[PropertyFlags2["NO_ACCESSOR"] = 64] = "NO_ACCESSOR";
    return PropertyFlags2;
})(PropertyFlags || {});
;
}}),
"[project]/node_modules/@arcgis/lumina/dist/chunk-NO7HOBNA.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ProxyComponent": (()=>ProxyComponent),
    "attachToAncestor": (()=>attachToAncestor),
    "makeDefineCustomElements": (()=>makeDefineCustomElements),
    "noShadowRoot": (()=>noShadowRoot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$PGHUBTOM$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/lumina/dist/chunk-PGHUBTOM.js [app-ssr] (ecmascript)");
// src/lazyLoad.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-utils/dist/index.js [app-ssr] (ecmascript)");
;
;
// src/devOnlyDetectIncorrectLazyUsages.ts
function devOnlyDetectIncorrectLazyUsages(LitClass) {
    const genericPrototype = LitClass.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(genericPrototype, "innerText");
    if (descriptor !== void 0 && descriptor.get === descriptor.set) {
        return;
    }
    const allowList = /* @__PURE__ */ new Set([
        // We shouldn't be overwriting this property
        "constructor",
        // Called by Lit - we proxy it to this.el in ProxyComponent
        "setAttribute",
        // Called by Lit SSR - we proxy it to this.el in ProxyComponent
        "removeAttribute",
        // Called by Lit - we proxy it to this.el in ProxyComponent
        "isConnected",
        // Called by Lit, but only in dev mode for warnings, so we don't have to proxy.
        "localName",
        // Called by Lit Context - we proxy it to this.el in ProxyComponent.
        // Interestingly, they never call removeEventListener.
        "addEventListener"
    ]);
    const customErrorMessages = {
        addEventListener: "use this.listen() or this.el.addEventListener()"
    };
    Object.entries({
        ...Object.getOwnPropertyDescriptors(HTMLElement.prototype),
        ...Object.getOwnPropertyDescriptors(Element.prototype),
        ...Object.getOwnPropertyDescriptors(Node.prototype),
        ...Object.getOwnPropertyDescriptors(EventTarget.prototype)
    }).forEach(([key, value])=>{
        if (allowList.has(key)) {
            return;
        }
        const callback = (...args)=>{
            if (key === "hasAttribute" && args[0] === "defer-hydration") {
                return false;
            }
            throw new Error(`You should not be trying to access this.${key} directly as it won't work correctly in lazy-builds. Instead, ${customErrorMessages[key] ?? `use this.el.${key}`}`);
        };
        if (typeof value.value === "function") {
            genericPrototype[key] = callback;
        } else {
            Object.defineProperty(genericPrototype, key, {
                get: callback,
                set: callback
            });
        }
    });
}
// src/lifecycleSupport.ts
function attachToAncestor(child) {
    let ancestor = child;
    while(ancestor = ancestor.parentNode ?? ancestor.host){
        if (ancestor?.constructor?.lumina) {
            const litParent = ancestor;
            if (!litParent.manager?.loadedCalled) {
                litParent._offspring.push(child);
            }
            return litParent._postLoad.promise;
        }
    }
    return false;
}
// src/lazyLoad.ts
var makeDefineCustomElements = (runtime, structure)=>function defineCustomElements(windowOrOptions, options) {
        if (!globalThis.customElements) {
            return;
        }
        const resolvedOptions = options ?? windowOrOptions ?? {};
        const resourcesUrl = resolvedOptions.resourcesUrl;
        if (resourcesUrl) {
            runtime.setAssetPath(resourcesUrl);
        }
        Object.entries(structure).forEach(createLazyElement);
    };
function createLazyElement([tagName, [load, compactMeta = ""]]) {
    if (customElements.get(tagName)) {
        return;
    }
    const [compactObservedProps, compactAsyncMethods, compactSyncMethods] = compactMeta.split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$PGHUBTOM$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lazyMetaGroupJoiner"]);
    const observedProps = compactObservedProps ? compactObservedProps?.split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$PGHUBTOM$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lazyMetaItemJoiner"]).map(parseCondensedProp) : void 0;
    const observedProperties = observedProps?.map(([property])=>property);
    const ProxyClass = class extends ProxyComponent {
        static{
            this.observedAttributes = observedProps?.map(([, attribute])=>attribute).filter((attribute)=>attribute !== "");
        }
        static{
            this._properties = observedProperties;
        }
        static{
            this._asyncMethods = compactAsyncMethods ? compactAsyncMethods?.split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$PGHUBTOM$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lazyMetaItemJoiner"]) : void 0;
        }
        static{
            this._syncMethods = compactSyncMethods?.split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$PGHUBTOM$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lazyMetaItemJoiner"]);
        }
        static{
            this._name = tagName;
        }
        constructor(){
            const isFirstInstanceOfType = !ProxyClass._loadPromise;
            if (isFirstInstanceOfType) {
                ProxyClass._loadPromise = load();
                ProxyClass._initializePrototype();
            }
            super();
        }
    };
    customElements.define(tagName, ProxyClass);
    if ("TURBOPACK compile-time truthy", 1) {
        globalThis.devOnly$ownTagNames?.add(tagName);
    }
}
var defineProperty = Object.defineProperty;
function parseCondensedProp(propAndAttribute) {
    const name = propAndAttribute.split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$PGHUBTOM$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["lazyMetaSubItemJoiner"]);
    return name.length === 1 ? [
        name[0],
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["camelToKebab"])(name[0])
    ] : name;
}
var HtmlElement = globalThis.HTMLElement ?? parseCondensedProp;
var ProxyComponent = class extends HtmlElement {
    constructor(){
        super();
        /** @internal */ this._store = {};
        /**
     * If attributeChangedCallback() is called before the LitElement is loaded,
     * store the attributes here, and replay later
     */ this._pendingAttributes = [];
        /**
     * Resolved once LitElement's load() is complete.
     * Not read inside of this class, but needed for LitElement to determine if
     * it's closest ancestor finished load()
     */ this._postLoad = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Deferred"]();
        /**
     * Resolved once LitElement's loaded() is complete
     */ this._postLoaded = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Deferred"]();
        /**
     * Direct offspring that should be awaited before loaded() is emitted
     */ this._offspring = [];
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            this._hmrSetProps = /* @__PURE__ */ new Set();
            this._hmrSetAttributes = /* @__PURE__ */ new Set();
            globalThis.devOnly$createdElements ??= [];
            globalThis.devOnly$createdElements.push(new WeakRef(this));
        }
        this._saveInstanceProperties();
        const ProxyClass = this.constructor;
        if (ProxyClass._LitConstructor) {
            this._initializeComponent({
                a: ProxyClass._LitConstructor
            });
        } else {
            void ProxyClass._loadPromise.then(this._initializeComponent.bind(this)).catch((error)=>{
                this._postLoaded.reject(error);
                setTimeout(()=>{
                    throw error;
                });
            });
        }
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            ProxyClass._hmrInstances ??= [];
            ProxyClass._hmrInstances.push(new WeakRef(this));
            Object.defineProperty(this, "_store", {
                value: this._store,
                enumerable: false,
                configurable: true
            });
        }
    }
    static{
        this.lumina = true;
    }
    /** @internal */ static _initializePrototype() {
        this._properties?.forEach(this._bindProp, this);
        this._asyncMethods?.forEach(this._bindAsync, this);
        this._syncMethods?.forEach(this._bindSync, this);
    }
    static _bindProp(propName) {
        defineProperty(this.prototype, propName, {
            configurable: true,
            enumerable: true,
            get () {
                return this._store[propName];
            },
            set (value) {
                this._store[propName] = value;
                if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
                    this._hmrSetProps.add(propName);
                }
            }
        });
    }
    static _bindAsync(methodName) {
        defineProperty(this.prototype, methodName, {
            async value (...args) {
                if (!this._litElement) {
                    await this._postLoaded.promise;
                }
                const genericLitElement = this._litElement;
                return await genericLitElement[methodName](...args);
            },
            configurable: true
        });
    }
    static _bindSync(methodName) {
        defineProperty(this.prototype, methodName, {
            value (...args) {
                if (("TURBOPACK compile-time value", "development") !== "production" && !this._litElement) {
                    const ProxyClass = this.constructor;
                    throw new Error(`Tried to call method ${methodName}() on <${ProxyClass._name}> component before it's fully loaded. Please do 'await component.componentOnReady();' before calling this method.`);
                }
                const genericLitElement = this._litElement;
                return genericLitElement[methodName](...args);
            },
            configurable: true
        });
    }
    get manager() {
        return this._litElement?.manager;
    }
    /**
   * Until the custom element is registered on the page, an instance of that
   * element can be constructed and some properties on that instance set.
   *
   * These properties are set before the element prototype is set to this proxy
   * class and thus none of our getters/setters are yet registered - such
   * properties will be set by JavaScript on the instance directly.
   *
   * Once element is registered, the properties set in the meanwhile will shadow
   * the getter/setters, and thus break reactivity. The fix is to delete these
   * properties from the instance, and re-apply them once accessors are set.
   *
   * @example
   * ```ts
   * import { defineCustomElements } from '@arcgis/map-components';
   * const map = document.createElement('arcgis-map');
   * // This will shadow the getter/setters
   * map.itemId = '...';
   * // This finally defines the custom elements and sets the property accessors
   * defineCustomElements();
   * ```
   *
   * @remarks
   * This is an equivalent of the __saveInstanceProperties method in Lit's
   * ReactiveElement. Lit takes care of this on LitElement, but we have to take
   * care of this on the lazy proxy
   */ _saveInstanceProperties() {
        const ProxyClass = this.constructor;
        const genericThis = this;
        ProxyClass._properties?.forEach((propName)=>{
            if (Object.hasOwn(this, propName)) {
                this._store[propName] = genericThis[propName];
                delete genericThis[propName];
            }
        });
    }
    /*
   * This method must be statically present rather than added later, or else,
   * browsers won't call it. Same for connected and disconnected callbacks.
   */ attributeChangedCallback(name, oldValue, newValue) {
        this._litElement?.attributeChangedCallback(name, oldValue, newValue);
        if (!this._litElement) {
            this._pendingAttributes.push(name);
        }
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            this._hmrSetAttributes.add(name);
        }
    }
    connectedCallback() {
        if (this._litElement) {
            this._litElement.connectedCallback?.();
        } else {
            queueMicrotask(()=>{
                this._ancestorLoad = attachToAncestor(this);
            });
        }
    }
    disconnectedCallback() {
        this._litElement?.disconnectedCallback?.();
    }
    /**
   * Create a promise that resolves once component is fully loaded
   */ async componentOnReady() {
        await this._postLoaded.promise;
        return this;
    }
    /** @internal */ _initializeComponent(module) {
        const ProxyClass = this.constructor;
        const tagName = ProxyClass._name;
        const store = this._store;
        const LitConstructor = Object.values(module).find((LitConstructor2)=>LitConstructor2.tagName === tagName);
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && !LitConstructor) {
            throw new Error(`Unable to find the LitElement class for the "${tagName}" custom element in the lazy-loaded module`);
        }
        const lazyTagName = ("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() ? (ProxyClass._hmrIndex ?? 0) === 0 ? `${tagName}--lazy` : `${tagName}--lazy-${ProxyClass._hmrIndex}` : `${tagName}--lazy`;
        let parentClass = LitConstructor;
        while(parentClass && !Object.hasOwn(parentClass, "lumina")){
            parentClass = Object.getPrototypeOf(parentClass);
        }
        patchLitElement(parentClass);
        const isFirstInitialization = !ProxyClass._LitConstructor;
        if (isFirstInitialization) {
            ProxyClass._LitConstructor = LitConstructor;
            customElements.define(lazyTagName, LitConstructor);
        }
        LitConstructor.lazy = this;
        const litElement = document.createElement(lazyTagName);
        LitConstructor.lazy = void 0;
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            Object.defineProperty(this, "_litElement", {
                value: litElement,
                configurable: true,
                enumerable: false
            });
        } else {
            this._litElement = litElement;
        }
        this._store = litElement;
        this._pendingAttributes.forEach((name)=>{
            const value = this.getAttribute(name);
            litElement.attributeChangedCallback(name, // Lit doesn't look at this value, thus even if attribute already exists, that's ok
            null, value);
        });
        Object.entries(store).forEach(syncLitElement, litElement);
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            const litObserved = LitConstructor.observedAttributes ?? [];
            const lazyObserved = ProxyClass.observedAttributes ?? [];
            const missingFromLazy = litObserved.filter((attribute)=>!lazyObserved.includes(attribute));
            const missingFromLit = lazyObserved.filter((attribute)=>!litObserved.includes(attribute));
            if (missingFromLazy.length > 0) {
                console.warn(`The following attributes on <${ProxyClass._name}> are present on the Lit element, but are missing from the lazy proxy component: ${missingFromLazy.join(", ")}. This either indicates a bug in Lumina, or you are creating the attribute dynamically in a way that compiler cannot infer statically. For these attributes, lazy-loading version of your component won't work correctly, thus this must be resolved`);
            }
            if (missingFromLit.length > 0) {
                console.warn(`The following attributes on <${ProxyClass._name}> are defined on the lazy proxy component, but not on the actual Lit element: ${missingFromLit.join(", ")}. This either indicates a bug in Lumina, or you are creating the attribute dynamically in a way that compiler cannot infer statically. This is a non-critical issue, but does indicate that something is going wrong and should be fixed`);
            }
        }
        const isStillConnected = this.isConnected;
        if (isStillConnected || this._ancestorLoad) {
            litElement.connectedCallback?.();
            if (!isStillConnected) {
                litElement.disconnectedCallback();
            }
        }
    }
    /**
   * Implemented on the proxy for compatibility with Lit Context.
   */ addController() {}
    /**
   * Implemented on the proxy for compatibility with Lit Context.
   */ requestUpdate() {
        this._litElement?.requestUpdate();
    }
};
function syncLitElement([key, value]) {
    this[key] = value;
}
function patchLitElement(parentClass) {
    const litElementPrototype = parentClass.prototype;
    const elementPrototype = Element.prototype;
    const alreadyPatched = Object.hasOwn(litElementPrototype, "isConnected");
    if (!alreadyPatched) {
        litElementPrototype.setAttribute = function(qualifiedName, value) {
            elementPrototype.setAttribute.call(this.el, qualifiedName, value);
        };
        litElementPrototype.removeAttribute = function(qualifiedName) {
            elementPrototype.removeAttribute.call(this.el, qualifiedName);
        };
        defineProperty(litElementPrototype, "isConnected", {
            get () {
                return Reflect.get(elementPrototype, "isConnected", this.el);
            }
        });
    }
    if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
        devOnlyDetectIncorrectLazyUsages(parentClass);
    }
}
// src/utils.ts
var noShadowRoot = {};
;
}}),
"[project]/node_modules/@arcgis/lumina/dist/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Fragment": (()=>Fragment),
    "LitElement": (()=>LitElement),
    "bindAttribute": (()=>bindAttribute),
    "bindBooleanAttribute": (()=>bindBooleanAttribute),
    "bindEvent": (()=>bindEvent),
    "bindProperty": (()=>bindProperty),
    "createEvent": (()=>createEvent),
    "directive": (()=>directive),
    "getReactWrapperOptions": (()=>getReactWrapperOptions),
    "live": (()=>live),
    "makeReactWrapperFactory": (()=>makeReactWrapperFactory),
    "makeRuntime": (()=>makeRuntime),
    "method": (()=>method),
    "noChange": (()=>noChange),
    "nothing": (()=>nothing),
    "property": (()=>property),
    "safeClassMap": (()=>safeClassMap),
    "safeStyleMap": (()=>safeStyleMap),
    "setAttribute": (()=>setAttribute),
    "stringOrBoolean": (()=>stringOrBoolean),
    "useContextConsumer": (()=>useContextConsumer),
    "useContextProvider": (()=>useContextProvider)
});
// src/context.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/chunk-PP2BAVRW.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/controllers/context-provider.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$consumer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/controllers/context-consumer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-utils/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$decorators$2f$property$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/decorators/property.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/index.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$element$2f$development$2f$lit$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/lit-element/development/lit-element.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$is$2d$server$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/is-server.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$NO7HOBNA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/lumina/dist/chunk-NO7HOBNA.js [app-ssr] (ecmascript)");
// src/jsx/directives.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$class$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directives/class-map.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$style$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directives/style-map.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directive.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$live$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directives/live.js [app-ssr] (ecmascript)");
// src/jsx/utils.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
;
;
;
;
function useContextProvider(options) {
    const component = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retrieveComponent"])();
    const controller = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextProvider"](component.el, options);
    component.addController(controller);
    return controller;
}
function useContextConsumer(options) {
    const component = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retrieveComponent"])();
    const controller = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$consumer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextConsumer"](component.el, options);
    component.addController(controller);
    return controller;
}
;
;
var createEventFactory = (eventName = "", options = {}, component = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retrieveComponent"])())=>{
    const emitter = {
        emit: (payload)=>{
            if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && !component.el.isConnected) {
                console.warn(`Trying to emit an ${eventName} event on a disconnected element ${component.el.tagName.toLowerCase()}`);
            }
            if (eventName === "") {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keyTrackResolve"])();
                if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && eventName === "") {
                    throw new Error("Unable to resolve event name from property name");
                }
            }
            const event = new CustomEvent(eventName, {
                detail: payload,
                cancelable: true,
                bubbles: true,
                composed: true,
                ...options
            });
            component.el.dispatchEvent(event);
            return event;
        }
    };
    if (eventName === "") {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["trackKey"])(void 0, (resolution)=>{
            if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && resolution === void 0) {
                throw new Error(`createEvent must be called in property default value only`);
            }
            eventName = resolution.key;
        }, emitter);
    }
    return emitter;
};
var createEvent = createEventFactory.bind(null, "");
;
;
var property = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$decorators$2f$property$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["property"];
var method = void 0;
;
;
;
var emptyFunction = ()=>void 0;
var LitElement = class _LitElement extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$element$2f$development$2f$lit$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["LitElement"] {
    constructor(){
        super();
        /**
     * In lazy build, the actual DOM element differs from the class instance:
     * - "this.el" is a proxy custom element - it's physically present in the DOM
     *   even before the Lit component is loaded.
     * - "this" is the actual Lit component - in case of Lazy builds, it's
     *   never directly attached to the DOM. Instead, all interactions with the
     *   proxy are forwarded to the actual Lit component. And, when Lit wants to
     *   render, it renders into the shadow root of the proxy.
     *
     * "this.el" should be used instead of "this" for all things involving the
     * DOM (addEventListener, querySelector, children, setAttribute,
     * MutationObserver, etc...)
     *
     * @example
     * ```ts
     * // Generally, you shouldn't have to write logic specific to lazy or non-lazy
     * // build, but if you have to, you can detect if you are in a lazy build like so:
     * const isLazy = this.el !== this;
     * ```
     */ this.el = this.constructor.lazy ?? this;
        /**
     * Controller Manager orchestrates all controllers used by this component,
     * connecting their lifecycle hooks and providing context information.
     */ this.manager = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useControllerManager"])(this);
        /** @internal */ this._postLoad = this.constructor.lazy?._postLoad ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Deferred"]();
        /**
     * Direct offspring that should be awaited before loaded() is emitted.
     *
     * `attachToAncestor()` will add elements to this array
     *
     * @internal
     */ this._offspring = this.constructor.lazy?._offspring ?? [];
        this._postLoaded = this.constructor.lazy?._postLoaded ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Deferred"]();
        this._enableUpdating = this.enableUpdating;
        this.enableUpdating = emptyFunction;
        const ourShouldUpdate = _LitElement.prototype.shouldUpdate;
        if (this.shouldUpdate !== ourShouldUpdate) {
            this._originalShouldUpdate = this.shouldUpdate;
            this.shouldUpdate = ourShouldUpdate;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const isOwnComponent = globalThis.devOnly$ownTagNames?.has(this.el.tagName.toLowerCase());
            const constructor = this.constructor;
            const warningsWereCustomized = constructor.enabledWarnings !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$element$2f$development$2f$lit$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["LitElement"].enabledWarnings;
            if (!isOwnComponent && !warningsWereCustomized) {
                constructor.disableWarning?.("change-in-update");
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
                globalThis.devOnly$luminaComponentRefCallback?.(this);
            }
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$is$2d$server$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isServer"]) {
            this.el.setAttribute(this.constructor.runtime.hydratedAttribute, "");
        }
    }
    /**
   * Customize Lit's default style handling to support non-shadow-root styles
   */ static finalizeStyles(styles) {
        if (("TURBOPACK compile-time value", "development") === "test" && Array.isArray(styles)) {
            "TURBOPACK unreachable";
        }
        const finalizedStyles = super.finalizeStyles(styles);
        const useLightDom = this.shadowRootOptions === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$NO7HOBNA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noShadowRoot"];
        return this.runtime?.commonStyles === void 0 || useLightDom ? finalizedStyles : [
            this.runtime.commonStyles,
            ...finalizedStyles
        ];
    }
    static createProperty(name, options) {
        const flags = typeof options === "number" ? options : Array.isArray(options) ? options[0] : 0;
        const rest = Array.isArray(options) ? options[1] : void 0;
        super.createProperty(name, {
            /**
       * By default to infer attribute name from property name, Lit just
       * converts property name to lowercase. That is consistent with
       * native DOM attributes.
       *
       * However, that is not consistent with Stencil and would be a
       * breaking change for us. Also, kebab-case is more common among the
       * web components. But the most important reason is that we have
       * some pretty long attribute names, which would be utterly
       * unreadable in lowercase.
       *
       * Also, if browsers add new attributes, that may cause a conflict
       * with our attributes.
       *
       * Thus, overwriting Lit's default behavior to use kebab-case:
       */ attribute: !!(flags & 1 /* ATTRIBUTE */ ) && typeof name === "string" ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["camelToKebab"])(name) : false,
            reflect: !!(flags & 2 /* REFLECT */ ),
            type: flags & 4 /* BOOLEAN */  ? Boolean : flags & 8 /* NUMBER */  ? Number : void 0,
            /**
       * At the moment in Lit, state:true just means attribute:false, so this
       * line is technically redundant, but let's keep it here just in case Lit
       * will add more meaning to state:true in the future.
       */ state: !!(flags & 16 /* STATE */ ),
            // Controllers add this option to Lit
            readOnly: !!(flags & 32 /* READ_ONLY */ ),
            noAccessor: !!(flags & 64 /* NO_ACCESSOR */ ),
            ...rest
        });
    }
    static{
        this.lumina = true;
    }
    connectedCallback() {
        if (this.el.hasAttribute("defer-hydration")) {
            return;
        }
        const isFirstCall = !this.manager.connectedCalled;
        super.connectedCallback();
        if (isFirstCall) {
            queueMicrotask(// eslint-disable-next-line @typescript-eslint/no-misused-promises, @typescript-eslint/promise-function-async
            ()=>this._load().catch((error)=>{
                    this._postLoaded.reject(error);
                    setTimeout(()=>{
                        throw error;
                    });
                }));
        }
    }
    /**
   * Overwrite Lit's default behavior of attaching shadow root to the lit
   * element, and instead use this.el to support lazy builds.
   *
   * Also, support the case when component asked to not use shadow root
   */ createRenderRoot() {
        const existingShadowRoot = this.el.shadowRoot;
        const Class = this.constructor;
        const options = Class.shadowRootOptions;
        const useLightDom = options === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$NO7HOBNA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noShadowRoot"];
        const renderRoot = existingShadowRoot ?? (useLightDom ? this.el : this.el.attachShadow(options));
        Object.defineProperty(this, "shadowRoot", {
            // Create shadow root on the proxy instance, to make Lit render content there
            value: renderRoot
        });
        if (existingShadowRoot) {
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            }
            return existingShadowRoot;
        }
        if (this.isConnected) {
            const domRoot = renderRoot.getRootNode();
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            }
            domRoot.adoptedStyleSheets = [
                ...domRoot.adoptedStyleSheets,
                ...Class.elementStyles.map((stylesheet)=>"styleSheet" in stylesheet ? stylesheet.styleSheet : stylesheet)
            ];
        }
        return renderRoot;
    }
    /** Do asynchronous component load */ async _load() {
        const parentLoadPromise = this.el._ancestorLoad ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$NO7HOBNA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["attachToAncestor"])(this.el);
        if (parentLoadPromise) {
            await parentLoadPromise;
        }
        await this.manager._load();
        this._enableUpdating(true);
        this.performUpdate();
        this._postLoad.resolve();
        await Promise.resolve();
        const pendingChildren = this._offspring.filter((loaded)=>!loaded.manager?.loadedCalled);
        if (pendingChildren.length) {
            await Promise.allSettled(pendingChildren.map(async (child)=>await child.componentOnReady()));
        }
        this._offspring.length = 0;
        this.el.setAttribute(this.constructor.runtime.hydratedAttribute, "");
        this.manager._loaded();
        this._postLoaded.resolve();
    }
    /**
   * Overwriting default shouldUpdate simply to get access to
   * "changedProperties" so that we can later provide it to ControllerManager
   */ shouldUpdate(_changedProperties) {
        this.$changes = _changedProperties;
        return this._originalShouldUpdate?.(_changedProperties) ?? true;
    }
    listen(name, listener, options) {
        const boundListener = listener?.bind(this) ?? listener;
        this.manager.onLifecycle(()=>{
            this.el.addEventListener(name, boundListener, options);
            return ()=>this.el.removeEventListener(name, boundListener, options);
        });
    }
    listenOn(target, name, listener, options) {
        const boundListener = listener?.bind(this) ?? listener;
        this.manager.onLifecycle(()=>{
            target.addEventListener(name, boundListener, options);
            return ()=>target.removeEventListener(name, boundListener, options);
        });
    }
    /**
   * Create a promise that resolves once component is fully loaded.
   *
   * @example
   * const map = document.createElement('arcgis-map');
   * document.body.append(map);
   * map.componentOnReady().then(() => {
   *   console.log('Map is ready to go!');
   * });
   */ async componentOnReady() {
        await this._postLoaded.promise;
        return this;
    }
};
LitElement.$createEvent = createEventFactory;
if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
    const globalWithLit = globalThis;
    globalWithLit.litIssuedWarnings ??= /* @__PURE__ */ new Set();
    globalWithLit.litIssuedWarnings.add("Overriding ReactiveElement.createProperty() is deprecated. The override will not be called with standard decorators See https://lit.dev/msg/no-override-create-property for more information.");
}
;
function makeRuntime(options) {
    let assetPath;
    const setAssetPath = (path)=>{
        assetPath = new URL(path, /**
       * setAssetPath() is called in global scope whenever Lumina runtime is
       * imported. Thus we need to carefully handle different environments.
       *
       * Need `|| undefined` because Stencil's unit tests mock-dock defines
       * `location.href` as empty string, which crashes `new URL()`. Stencil's
       * test environment does not define `NODE_ENV` by default, so we have to
       * add a few bytes to production.
       *
       * For happy-dom and jsdom, we are assuming that `NODE_ENV` is set.
       * Depending on configuration, `location?.href` is either undefined (not
       * an exception) or `about:blank` (an exception - thus handling that case
       * explicitly).
       *
       * For Node.js without a DOM environment, `location?.href` is undefined so
       * all is good.
       */ ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : globalThis.location?.href || void 0).href;
    };
    const runtime = {
        ...options,
        // FEATURE: research https://vitejs.dev/guide/build.html#advanced-base-options
        getAssetPath (suffix) {
            const assetUrl = new URL(suffix, assetPath);
            return assetUrl.origin !== globalThis.location?.origin ? assetUrl.href : assetUrl.pathname;
        },
        setAssetPath,
        customElement (tagName, component) {
            component.runtime = runtime;
            component.tagName = tagName;
            if (!customElements.get(tagName)) {
                customElements.define(tagName, component);
            }
        }
    };
    setAssetPath(options.defaultAssetPath);
    if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
        globalThis.devOnly$luminaRuntime = runtime;
    }
    return runtime;
}
// src/jsx/types.ts
var Fragment = void 0;
var bindAttribute = void 0;
var bindBooleanAttribute = void 0;
var bindProperty = void 0;
var bindEvent = void 0;
;
;
;
;
var safeClassMap = (parameters)=>typeof parameters === "object" && parameters != null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$class$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["classMap"])(parameters) : parameters;
var safeStyleMap = (parameters)=>typeof parameters === "object" && parameters != null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$style$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["styleMap"])(parameters) : parameters;
var directive = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["directive"];
var live = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$live$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["live"];
;
var nothing = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nothing"];
var noChange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"];
function setAttribute(element, attributeName, value) {
    if (value == null) {
        element.removeAttribute(attributeName);
    } else {
        element.setAttribute(attributeName, value);
    }
}
var stringOrBoolean = {
    toAttribute: (value)=>value === true ? "" : value === false ? null : value
};
// src/wrappersUtils.ts
var emptyObject = {};
var makeReactWrapperFactory = (react, createComponent)=>(options)=>{
        const tagName = options.tagName;
        let customElementPrototype = emptyObject;
        const elementClass = {
            name: tagName,
            /**
     * Lit's createComponent tries to access the elementClass.prototype in
     * global scope (in development mode). The elementClass may not be defined
     * yet (because we are in a lazy loading build, or because current app
     * doesn't import a given custom element as it doesn't use it).
     *
     * Thus, we return an empty object as a fake prototype.
     *
     * Right after the call to `createComponent`, we set to
     * customElementPrototype undefined so that the next access of
     * `.prototype` tries to get the real prototype.
     * `createPrototypeProxy()` is called, this small proxy delays retrieving the custom
     * element prototype until it is actually needed, and caches the result for future calls.
     */ get prototype () {
                if (customElementPrototype === void 0) {
                    customElementPrototype = customElements.get(tagName)?.prototype;
                    if (!customElementPrototype) {
                        throw new Error(`Custom element "${tagName}" not found`);
                    }
                    Object.defineProperty(elementClass, "prototype", {
                        value: customElementPrototype
                    });
                }
                return customElementPrototype;
            }
        };
        const result = createComponent({
            ...options,
            react,
            elementClass
        });
        customElementPrototype = void 0;
        return result;
    };
var getReactWrapperOptions = (tagNameAndElement, events)=>({
        tagName: tagNameAndElement,
        events
    });
;
}}),
"[project]/node_modules/@arcgis/lumina/dist/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$NO7HOBNA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/lumina/dist/chunk-NO7HOBNA.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$chunk$2d$PGHUBTOM$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/lumina/dist/chunk-PGHUBTOM.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$decorators$2f$state$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/decorators/state.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$decorators$2f$property$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/decorators/property.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/lit/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$class$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directives/class-map.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2f$directives$2f$style$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/lit/directives/style-map.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directive.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$live$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directives/live.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@arcgis/lumina/dist/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/@arcgis/components-utils/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// src/array-utils.ts
__turbopack_esm__({
    "Deferred": (()=>Deferred),
    "addLTRMark": (()=>addLTRMark),
    "camelToHuman": (()=>camelToHuman),
    "camelToKebab": (()=>camelToKebab),
    "capitalize": (()=>capitalize),
    "classes": (()=>classes),
    "closestElement": (()=>closestElement),
    "createFilterExpression": (()=>createFilterExpression),
    "debounce": (()=>debounce),
    "defaultLocale": (()=>defaultLocale),
    "devToolsAwareTimeout": (()=>devToolsAwareTimeout),
    "extractMinorVersion": (()=>extractMinorVersion),
    "fetchT9nStringsBundle": (()=>fetchT9nStringsBundle),
    "focusElement": (()=>focusElement),
    "generateGuid": (()=>generateGuid),
    "getElementAttribute": (()=>getElementAttribute),
    "getElementDir": (()=>getElementDir),
    "getElementLocales": (()=>getElementLocales),
    "getElementTheme": (()=>getElementTheme),
    "getPreamble": (()=>getPreamble),
    "hasSameOrigin": (()=>hasSameOrigin),
    "identity": (()=>identity),
    "isEsriInternalEnv": (()=>isEsriInternalEnv),
    "isNotNull": (()=>isNotNull),
    "isNotUndefined": (()=>isNotUndefined),
    "isURL": (()=>isURL),
    "kebabToPascal": (()=>kebabToPascal),
    "mappedFind": (()=>mappedFind),
    "normalizeLocale": (()=>normalizeLocale),
    "observeAncestorsMutation": (()=>observeAncestorsMutation),
    "quoteString": (()=>quoteString),
    "safeAsyncCall": (()=>safeAsyncCall),
    "safeCall": (()=>safeCall),
    "setFocusOnElement": (()=>setFocusOnElement),
    "setValuesInString": (()=>setValuesInString),
    "startLocaleObserver": (()=>startLocaleObserver),
    "supportedLocales": (()=>supportedLocales),
    "uncapitalize": (()=>uncapitalize)
});
function mappedFind(array, callback) {
    for(let i = 0; i < array.length; i++){
        const value = callback(array[i], i);
        if (value != null) {
            return value ?? void 0;
        }
    }
    return;
}
// src/css-utils.ts
function classes(...classes2) {
    const effectiveClasses = [];
    for(let i = 0; i < classes2.length; i++){
        const arg = classes2[i];
        if (typeof arg === "string") {
            effectiveClasses.push(arg);
        } else if (Array.isArray(arg)) {
            effectiveClasses.push.apply(effectiveClasses, arg);
        } else if (typeof arg === "object") {
            for(const prop in arg){
                if (arg[prop]) {
                    effectiveClasses.push(prop);
                }
            }
        }
    }
    const className = effectiveClasses.join(" ");
    effectiveClasses.length = 0;
    return className;
}
// src/deferred.ts
var Deferred = class {
    /**
   * Resolves the promise.
   * @param value The value to resolve the promise with.
   */ resolve(_value) {}
    /**
   * Rejects the promise.
   */ reject(_error) {}
    /**
   * Creates a new deferred promise.
   */ constructor(){
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = resolve;
            this.reject = reject;
        });
    }
};
// src/dom.ts
function inTargetElement(element, targetElement) {
    let currentElement = element;
    while(currentElement){
        if (currentElement === targetElement) {
            return true;
        }
        if (!currentElement.parentNode) {
            return false;
        }
        if (currentElement.parentNode instanceof ShadowRoot) {
            currentElement = currentElement.parentNode.host;
        } else {
            currentElement = currentElement.parentNode;
        }
    }
    return false;
}
function observeAncestorsMutation(element, attributeFilter, callback) {
    const { subscribe } = observe(attributeFilter);
    return subscribe((mutations)=>{
        const matched = mutations.some((mutation)=>inTargetElement(element, mutation.target));
        if (matched) {
            callback();
        }
    });
}
var observers = {};
function observe(attributeFilter) {
    const attributes = attributeFilter.join(",");
    const previousObserver = observers[attributes];
    if (previousObserver !== void 0) {
        return previousObserver;
    }
    const subscribers = /* @__PURE__ */ new Set();
    const mutationObserver = new MutationObserver((mutations)=>subscribers.forEach((callback)=>callback(mutations)));
    if (globalThis.document) {
        mutationObserver.observe(document.documentElement, {
            attributes: true,
            attributeFilter,
            subtree: true
        });
    }
    const observer = {
        subscribe (callback) {
            subscribers.add(callback);
            return ()=>{
                subscribers.delete(callback);
                if (subscribers.size === 0) {
                    mutationObserver.disconnect();
                    observers[attributes] = void 0;
                }
            };
        }
    };
    observers[attributes] = observer;
    return observer;
}
function closestElement(base, selector) {
    let currentElement = base;
    while(currentElement){
        const element = currentElement.closest?.(selector);
        if (element) {
            return element;
        }
        const rootElement = currentElement.getRootNode?.();
        if (rootElement === globalThis.document) {
            return null;
        }
        currentElement = rootElement.host;
    }
    return null;
}
function getElementTheme(base) {
    const themeElement = closestElement(base, ":is(.calcite-mode-light, .calcite-mode-dark)");
    return themeElement?.classList.contains("calcite-mode-dark") ? "dark" : "light";
}
function getElementDir(el) {
    return getElementAttribute(el, "dir", "ltr");
}
function getElementAttribute(el, prop, fallbackValue) {
    const closest = closestElement(el, `[${prop}]`);
    return closest?.getAttribute(prop) ?? fallbackValue;
}
function isElement(ref) {
    return ref.nodeType === Node.ELEMENT_NODE;
}
function hasSetFocus(ref) {
    return typeof ref.setFocus === "function";
}
function setFocus(ref, selector = "") {
    if (!isElement(ref)) {
        return false;
    }
    if (ref.matches(selector)) {
        if (hasSetFocus(ref)) {
            setTimeout(()=>void ref.setFocus(), 0);
        }
        return true;
    }
    for (const child of ref.children){
        if (setFocus(child, selector)) {
            return true;
        }
    }
    const shadowRoot = ref.shadowRoot;
    if (shadowRoot) {
        for (const child of shadowRoot.children){
            if (setFocus(child, selector)) {
                return true;
            }
        }
    }
    return false;
}
async function focusElement(el) {
    if (el == null) {
        return;
    }
    if (hasSetFocus(el)) {
        await el.setFocus();
    } else {
        el.focus();
    }
}
function setFocusOnElement(ref, selector) {
    if (!ref?.shadowRoot) {
        return;
    }
    if (ref.hasAttribute("hydrated") || ref.hasAttribute("calcite-hydrated")) {
        setFocus(ref, selector);
        return;
    }
    void Promise.resolve(ref.componentOnReady?.()).then(()=>setFocus(ref, selector));
}
// src/errors.ts
function isEsriInternalEnv() {
    return typeof globalThis.process === "object" && !!process.env.ESRI_INTERNAL;
}
function safeCall(callback, thisContext, ...rest) {
    try {
        return callback?.call(thisContext, ...rest);
    } catch (error) {
        console.error(error, callback);
    }
    return void 0;
}
async function safeAsyncCall(callback, thisContext, ...rest) {
    try {
        const result = callback?.call(thisContext, ...rest);
        return result instanceof Promise ? await result : result;
    } catch (error) {
        console.error(error, callback);
    }
    return void 0;
}
// src/guid.ts
function gen(count) {
    let out = "";
    for(let i = 0; i < count; i++){
        out += ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
    }
    return out;
}
function generateGuid() {
    return [
        gen(2),
        gen(1),
        gen(1),
        gen(1),
        gen(3)
    ].join("-");
}
// src/intl.ts
var supportedLocalesArray = [
    "ar",
    "bg",
    "bs",
    "ca",
    "cs",
    "da",
    "de",
    "el",
    "en",
    "es",
    "et",
    "fi",
    "fr",
    "he",
    "hr",
    "hu",
    "id",
    "it",
    "ja",
    "ko",
    "lt",
    "lv",
    "nl",
    "nb",
    "no",
    "pl",
    "pt-BR",
    "pt-PT",
    "ro",
    "ru",
    "sk",
    "sl",
    "sr",
    "sv",
    "th",
    "tr",
    "uk",
    "vi",
    "zh-CN",
    "zh-HK",
    "zh-TW"
];
var supportedLocales = /* @__PURE__ */ new Set(supportedLocalesArray);
var defaultLocale = "en";
var localeEquivalencies = {
    // We use `pt-PT` as it will have the same translations as `pt`, which has no corresponding bundle
    pt: "pt-PT",
    // We support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle
    nb: "no",
    // We use `zh-CN` as base translation for chinese locales which has no corresponding bundle.
    zh: "zh-CN"
};
async function fetchT9nStringsBundle(locale, assetsPath, prefix = "") {
    const path = `${assetsPath}/${prefix}`;
    const filePath = `${path}${locale}.json`;
    t9nStringsCache[filePath] ?? (t9nStringsCache[filePath] = fetchBundle(locale, path));
    return await t9nStringsCache[filePath];
}
var t9nStringsCache = {};
async function fetchBundle(locale, path) {
    const filePath = `${path}${locale}.json`;
    try {
        const response = await fetch(filePath);
        if (response.ok) {
            return await response.json();
        }
    } catch (error) {
        if ("TURBOPACK compile-time truthy", 1) {
            const is404ViteFallback = String(error).includes(`Unexpected token '<', "<!doctype "... is not valid JSON`);
            if (is404ViteFallback) {
                console.error(`[404] Localization strings not found at ${filePath}`);
            } else {
                console.error(`Error fetching localization strings at ${filePath}`, error);
            }
        } else {
            "TURBOPACK unreachable";
        }
        return {};
    }
    if (locale === defaultLocale) {
        return {};
    }
    return await fetchBundle(defaultLocale, path);
}
function getElementLocales(element) {
    const lang = getElementAttribute(element, "lang", globalThis.navigator?.language || defaultLocale);
    return {
        lang,
        t9nLocale: normalizeLocale(lang)
    };
}
function normalizeLocale(locale) {
    const [rawLanguageCode, regionCode] = locale.split("-");
    const languageCode = rawLanguageCode.toLowerCase();
    let normalizedLocale = languageCode;
    if (regionCode) {
        normalizedLocale = `${languageCode}-${regionCode.toUpperCase()}`;
    }
    normalizedLocale = localeEquivalencies[normalizedLocale] ?? normalizedLocale;
    if (supportedLocales.has(normalizedLocale)) {
        return normalizedLocale;
    }
    if (regionCode) {
        return normalizeLocale(languageCode);
    }
    return defaultLocale;
}
function startLocaleObserver(element, getAssetsPath, onUpdated, assetName) {
    let result = void 0;
    const callback = ()=>void updateComponentLocaleState(element, getAssetsPath(), assetName).then((newResult)=>{
            if (result?.lang !== newResult.lang || result.t9nLocale !== newResult.t9nLocale || result.t9nStrings !== newResult.t9nStrings) {
                onUpdated(newResult);
            }
            result = newResult;
        }).catch(console.error);
    queueMicrotask(callback);
    return observeAncestorsMutation(element, [
        "lang"
    ], callback);
}
async function updateComponentLocaleState(element, assetsPath, assetName = element.tagName.toLowerCase().split("-").slice(1).join("-")) {
    const { lang, t9nLocale } = getElementLocales(element);
    const t9nAssetsPath = `${assetsPath}/${assetName}/t9n`;
    const prefix = `messages.`;
    const t9nStrings = // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    assetName === null ? {} : await fetchT9nStringsBundle(t9nLocale, t9nAssetsPath, prefix);
    return {
        lang,
        t9nLocale,
        t9nStrings
    };
}
// src/preamble.ts
var blurb = "All material copyright Esri, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/{minorVersion}/esri/copyright.txt for details.\nv{version}";
var extractMinorVersion = (version)=>{
    const [major, minor] = version.split(".");
    return `${major}.${minor}`;
};
var getPreamble = (version)=>blurb.replace("{minorVersion}", extractMinorVersion(version)).replace("{version}", version);
// src/strings.ts
var doubleQuote = '"';
var singleQuote = "'";
function repeatString(value, n) {
    return new Array(n + 1).join(value);
}
function quoteString(value) {
    let quote = doubleQuote;
    let alternateQuote = singleQuote;
    const avoidEscape = value.includes(quote) && !value.includes(alternateQuote);
    if (avoidEscape) {
        alternateQuote = doubleQuote;
        quote = singleQuote;
    }
    const alternateEscape = new RegExp(`(^|[^\\\\])((?:\\\\{2})*)((?:\\\\${alternateQuote})+)`, "gu");
    value = value.replace(alternateEscape, (_, boundaryChar, leadingEscapedSlashes, escapedQuoteChars)=>// We divide the escapedQuoteChars by 2 since there are 2 characters in each escaped part ('\\"'.length === 2)
        boundaryChar + leadingEscapedSlashes + repeatString(alternateQuote, escapedQuoteChars.length / 2));
    const quoteEscape = new RegExp(`(^|[^\\\\])((?:\\\\{2})*)(${quote}+)`, "gu");
    value = value.replace(quoteEscape, (_, boundaryChar, leadingEscapedSlashes, quoteChars)=>boundaryChar + leadingEscapedSlashes + repeatString(`\\${quote}`, quoteChars.length));
    return quote + value + quote;
}
function createFilterExpression(filterWord) {
    const sanitizedWord = filterWord ? filterWord.replaceAll(/[-[\]/{}()*+?.\\^$|]/gu, "\\$&") : "^.*$";
    return new RegExp(sanitizedWord, "i");
}
function setValuesInString(message, values = {}) {
    return (message ?? "").replace(/\{(?<valueName>.*?)\}/gu, (match, valueName)=>values[valueName] ?? match);
}
function addLTRMark(value) {
    return `\u200E${value ?? ""}\u200E`;
}
// src/text.ts
var kebabToPascal = (string)=>string.split("-").map(capitalize).join("");
var camelToKebab = (string)=>string.replace(upperBeforeLower, (upper, remainder)=>`${remainder === 0 ? "" : "-"}${upper.toLowerCase()}`);
var upperBeforeLower = /[A-Z]+(?![a-z])|[A-Z]/gu;
var capitalize = (string)=>string.charAt(0).toUpperCase() + string.slice(1);
var uncapitalize = (string)=>string.charAt(0).toLowerCase() + string.slice(1);
var camelToHuman = (string)=>capitalize(string.replace(upperBeforeLower, (upper, remainder)=>`${remainder === 0 ? "" : " "}${upper}`));
// src/timeouts.ts
function devToolsAwareTimeout(callback, timeout) {
    const interval = timeout > longTimeoutThreshold ? longTimeoutInterval : timeout / shortTimeoutIntervals;
    let elapsed = 0;
    const reference = setInterval(()=>{
        elapsed += interval;
        if (elapsed >= timeout) {
            clearInterval(reference);
            callback();
        }
    }, interval);
    return reference;
}
var longTimeoutThreshold = 4e3;
var longTimeoutInterval = 2e3;
var shortTimeoutIntervals = 4;
// src/type-guards.ts
function isNotNull(item) {
    return item !== null;
}
function isNotUndefined(item) {
    return item !== void 0;
}
// src/types.ts
var identity = (value)=>value;
// src/ui.ts
function debounce(func, waitFor = 100) {
    let timeout;
    return (...args)=>{
        const later = ()=>{
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, waitFor);
    };
}
// src/url.ts
function hasSameOrigin(url1, url2, ignoreProtocol = false) {
    if (!url1 || !url2) {
        return false;
    }
    const url1Obj = new URL(url1);
    const url2Obj = new URL(url2);
    if (!ignoreProtocol && url1Obj.protocol !== url2Obj.protocol) {
        return false;
    }
    if (url1Obj.host == null || url2Obj.host == null) {
        return false;
    }
    return url1Obj.host.toLowerCase() === url2Obj.host.toLowerCase() && url1Obj.port === url2Obj.port;
}
function isURL(url) {
    try {
        new URL(url);
        return true;
    } catch (e) {
        return false;
    }
}
;
}}),
"[project]/node_modules/@arcgis/components-controllers/dist/chunk-XKVBN44N.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// src/framework.ts
__turbopack_esm__({
    "getMemberType": (()=>getMemberType),
    "parsePropertyValue": (()=>parsePropertyValue),
    "retrieveComponentMembers": (()=>retrieveComponentMembers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-utils/dist/index.js [app-ssr] (ecmascript)");
;
function retrieveComponentMembers(component, isLit) {
    if (isLit) {
        const elementProperties = component.constructor.elementProperties;
        component.manager.internals.members = Object.fromEntries(Array.from(elementProperties, ([name, descriptor])=>descriptor.noAccessor ? void 0 : [
                name,
                [
                    (descriptor.readOnly ? 2048 /* ReadOnly */  : 0) | (descriptor.state ? 32 /* State */  : 16 /* Unknown */ )
                ]
            ]).filter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNotUndefined"]));
    } else {
        const constructor = component.constructor;
        const members = constructor.__registerControllers?.(component) ?? void 0;
        constructor.__registerControllers = void 0;
        if (typeof members !== "object") {
            throw new Error(("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() ? "Failed to retrieve internal component meta. Make sure you have the useComponentsControllers() Rollup Plugin for Stencil Controllers configured in your Stencil config." : "Failed to retrieve component meta");
        }
        component.manager.internals.members = Object.fromEntries(Object.entries(members).filter(([_name, [propType]])=>(propType & 63 /* PropLike */ ) !== 0));
    }
}
function parsePropertyValue(value, type = 8 /* Any */ ) {
    const isComplex = value == null || typeof value === "object" || typeof value === "function";
    if (isComplex) {
        return value;
    }
    if ((type & 4 /* Boolean */ ) !== 0) {
        return value === "false" ? false : value === "" || !!value;
    } else if ((type & 2 /* Number */ ) !== 0) {
        return Number.parseFloat(value);
    } else if ((type & 1 /* String */ ) !== 0) {
        return String(value);
    } else {
        return value;
    }
}
var getMemberType = (component, name)=>component.manager.internals.members?.[name]?.[0];
;
}}),
"[project]/node_modules/@arcgis/components-controllers/dist/chunk-PP2BAVRW.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ComponentInternals": (()=>ComponentInternals),
    "Controller": (()=>Controller),
    "GenericController": (()=>GenericController),
    "bypassGetter": (()=>bypassGetter),
    "bypassReadOnly": (()=>bypassReadOnly),
    "bypassSetter": (()=>bypassSetter),
    "controllerSymbol": (()=>controllerSymbol),
    "devOnlyGetPersistentControllerData": (()=>devOnlyGetPersistentControllerData),
    "devOnlySetPersistentControllerData": (()=>devOnlySetPersistentControllerData),
    "dynamicGetSet": (()=>dynamicGetSet),
    "elementToInstance": (()=>elementToInstance),
    "getSet": (()=>getSet),
    "isController": (()=>isController),
    "keyTrackResolve": (()=>keyTrackResolve),
    "proxyExports": (()=>proxyExports),
    "readonly": (()=>readonly),
    "retrieveComponent": (()=>retrieveComponent),
    "retrieveParentControllers": (()=>retrieveParentControllers),
    "setAmbientComponent": (()=>setAmbientComponent),
    "setParentController": (()=>setParentController),
    "trackKey": (()=>trackKey),
    "trackPropKey": (()=>trackPropKey),
    "trackPropertyKey": (()=>trackPropertyKey),
    "watch": (()=>watch)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$XKVBN44N$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/chunk-XKVBN44N.js [app-ssr] (ecmascript)");
// src/utils.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-utils/dist/index.js [app-ssr] (ecmascript)");
;
// src/types.ts
var controllerSymbol = Symbol.for("controller");
// package.json
var name = "@arcgis/components-controllers";
;
var isController = (value)=>typeof value === "object" && value !== null && (controllerSymbol in value || "hostConnected" in value || "hostDisconnected" in value || "hostUpdate" in value || "hostUpdated" in value);
var devOnlySetPersistentControllerData = ("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() ? (controller, data)=>{
    const manager = controller.component.manager;
    const controllers = "_controllers" in manager ? manager._controllers : void 0;
    if (controllers === void 0) {
        return void 0;
    }
    const index = Array.from(controllers).indexOf(controller);
    if (index === -1) {
        return;
    }
    const devOnlyControllerData = Symbol.for(`${name}: devOnlyControllerData`);
    const el = controller.component.el;
    el[devOnlyControllerData] ?? (el[devOnlyControllerData] = {});
    el[devOnlyControllerData][index] = data;
} : void 0;
var devOnlyGetPersistentControllerData = ("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() ? (controller)=>{
    const manager = controller.component.manager;
    const controllers = "_controllers" in manager ? manager._controllers : void 0;
    if (controllers === void 0) {
        return void 0;
    }
    const index = Array.from(controllers).indexOf(controller);
    const devOnlyControllerData = Symbol.for(`${name}: devOnlyControllerData`);
    const el = controller.component.el;
    return el[devOnlyControllerData]?.[index];
} : void 0;
;
var ambientComponent;
function setAmbientComponent(component) {
    if (ambientComponent === component) {
        return;
    }
    ambientComponent = component;
    queueMicrotask(()=>{
        if (ambientComponent === component) {
            ambientComponent = void 0;
        }
    });
}
function retrieveComponent(name2) {
    if (("TURBOPACK compile-time value", "development") !== "production" && ambientComponent === void 0) {
        throw new Error([
            `Unable to find out which component ${name2 || "this"} controller `,
            "belongs to. Possible causes:\n",
            "- You might also have multiple versions of ",
            "@arcgis/components-controllers package installed\n",
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() ? [
                "- You tried to create controller outside the component. If so, ",
                "please wrap your controller definition in an arrow function (like",
                "`const myController = ()=>makeController(...);`) and call that",
                "function inside the component (`my = myController();`), or ",
                "define your controller using makeGenericController/GenericController ",
                "instead.\n",
                "- You tried to create a controller inside an async function. ",
                "This is allowed without calling controller.use(). Make sure you ",
                "use it like `await controller.use(useController())`."
            ] : []
        ].join(""));
    }
    return ambientComponent;
}
var ambientControllers = [];
function setParentController(controller) {
    if (controller === void 0) {
        ambientControllers = [];
        return;
    }
    const index = ambientControllers.indexOf(controller);
    ambientControllers = index === -1 ? [
        ...ambientControllers,
        controller
    ] : ambientControllers.slice(0, index + 1);
    queueMicrotask(()=>{
        ambientControllers = [];
    });
}
function retrieveParentControllers() {
    return ambientControllers;
}
var ambientChildController;
function setAmbientChildController(controller) {
    if (ambientChildController === controller) {
        return;
    }
    ambientChildController = controller;
    queueMicrotask(()=>{
        if (ambientChildController === controller) {
            ambientChildController = void 0;
        }
    });
}
function retrieveAmbientChildController() {
    const controller = ambientChildController;
    ambientChildController = void 0;
    return controller;
}
var use = async (value, watchExports)=>{
    const controller = useRefSync(value);
    if (controller === void 0) {
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && typeof watchExports === "function") {
            throw new Error(`Unable to resolve a controller from the provided value, so can't watch it's exports. The value you passed is not a controller and not a controller exports. If your controller exports a literal value, try making your controller export an object instead`);
        }
        return value;
    }
    await controller.ready;
    if (typeof watchExports === "function") {
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && controller.watchExports === void 0) {
            throw new Error(`The controller must implement watchExports method to support watching exports`);
        }
        const unsubscribe = controller.watchExports((exports)=>watchExports(exports, unsubscribe));
    }
    return controller.exports;
};
var useRef = async (value)=>{
    const controller = useRefSync(value);
    if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && controller === void 0) {
        throw new Error(`Unable to resolve a controller from the provided value. The value you passed is not a controller and not a controller exports. If your controller exports a literal value, try making your controller export an object instead`);
    }
    await controller.ready;
    return controller;
};
var useRefSync = (value)=>{
    const component = retrieveComponent();
    const controller = component.manager.internals.resolveExports(value);
    if (controller !== void 0) {
        return controller;
    }
    if (isController(value)) {
        return value;
    }
    const ambientChildController2 = retrieveAmbientChildController();
    if (ambientChildController2 !== void 0) {
        return ambientChildController2;
    }
    return void 0;
};
var shouldBypass = {
    setter: false,
    getter: false,
    readOnly: false
};
var elementToInstance = /* @__PURE__ */ new WeakMap();
;
var _a;
_a = controllerSymbol;
var Controller = class {
    constructor(component){
        this._callbacks = {
            hostConnected: [],
            hostDisconnected: [],
            hostLoad: [],
            hostLoaded: [],
            hostUpdate: [],
            hostUpdated: [],
            hostDestroy: [],
            hostLifecycle: []
        };
        this._ready = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Deferred"]();
        this._lifecycleCleanups = [];
        this.connectedCalled = false;
        this._loadCalled = false;
        this.loadedCalled = false;
        this[_a] = true;
        this.ready = this._ready.promise;
        /*
     * Setting default exports to "this" so that controllers that don't use
     * exports/proxyExports(), could still be used as if they did
     * (i.e with controller.use)
     */ this._exports = makeProvisionalValue(this);
        this._exportWatchers = /* @__PURE__ */ new Set();
        const resolvedComponent = toControllerHost(component ?? retrieveComponent(new.target.name));
        if ("TURBOPACK compile-time truthy", 1) {
            Object.defineProperty(this, "component", {
                writable: false,
                enumerable: false,
                configurable: true,
                value: resolvedComponent
            });
            if ("hostDestroy" in this) {
                this.component.manager.ensureHasDestroy?.();
            }
        } else {
            "TURBOPACK unreachable";
        }
        this.component.addController(this);
        const manager = this.component.manager;
        const isInControllerManager = manager === void 0;
        if (!isInControllerManager) {
            setParentController(this);
            queueMicrotask(()=>this.catchUpLifecycle());
        }
    }
    /**
   * If controller is being added dynamically, after the component
   * construction, then trigger connected and load right away
   */ catchUpLifecycle() {
        const { manager } = this.component;
        const connectedWillStillHappen = !manager.connectedCalled;
        if (!connectedWillStillHappen && !this.connectedCalled) {
            this.triggerConnected();
        }
        const loadWillStillHappen = !manager._loadCalled;
        if (loadWillStillHappen) {
            return;
        }
        this.triggerLoad().then(()=>{
            const loadedWillStillHappen = !manager.loadedCalled;
            if (loadedWillStillHappen) {
                return;
            }
            this.triggerLoaded();
        }).catch(console.error);
    }
    get exports() {
        return this._exports;
    }
    /**
   * Set controller's exports property (for usage with proxyExports()) and mark
   * controller as ready (for usage in other controllers). Also, triggers
   * re-render of the component
   */ set exports(exports) {
        const oldExports = this._exports;
        if (oldExports !== exports) {
            this._exports = exports;
            this._exportWatchers.forEach(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"]);
            if (this.connectedCalled && this.assignedProperty !== false) {
                this.component.requestUpdate(this.assignedProperty, oldExports);
            }
        }
        this._ready.resolve(exports);
    }
    setProvisionalExports(exports, proxy = true) {
        this._exports = proxy ? makeProvisionalValue(exports) : exports;
        this._exportWatchers.forEach(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"]);
    }
    watchExports(callback) {
        const safeCallback = ()=>callback(this._exports);
        this._exportWatchers.add(safeCallback);
        return ()=>void this._exportWatchers.delete(safeCallback);
    }
    /**
   * A flexible utility for making sure a controller is loaded before it's used,
   * regardless of how or where a controller was defined:
   *
   * @example
   * makeGenericController(async (component, controller) => {
   *   // Await some controller from the component:
   *   await controller.use(component.someController);
   *   // Initialize new controllers
   *   await controller.use(load(importCoreReactiveUtils));
   *   await controller.use(new ViewModelController(component,newWidgetsHomeHomeViewModel));
   *   await controller.use(someController(component));
   * });
   *
   * @remarks
   * If your controller is not async, and you are not creating it async, then
   * you are not required to use controller.use - you can use it directly.
   * Similarly, accessing controllers after componentWillLoad callback does not
   * require awaiting them as they are guaranteed to be loaded by then.
   */ get use() {
        setAmbientComponent(this.component);
        return use;
    }
    /**
   * Just like controller.use, but returns the controller itself, rather than it's
   * exports
   *
   * Use cases:
   * - You have a controller and you want to make sure it's loaded before you
   *   try to use it
   * - Your controller is not using exports, so you wish to access some props on
   *   it directly
   * - You have a controller exports only, and you want to retrieve the
   *   controller itself. This is useful if you wish to call .watchExports() or
   *   some other method on the controller
   */ get useRef() {
        setAmbientComponent(this.component);
        return useRef;
    }
    /**
   * Like useRef, but doesn't wait for the controller to get ready
   *
   * @internal
   */ get useRefSync() {
        setAmbientComponent(this.component);
        return useRefSync;
    }
    controllerRemoved() {
        if (this.component.el.isConnected) {
            this.triggerDisconnected();
        }
        this.triggerDestroy();
    }
    // Register a lifecycle callback
    onConnected(callback) {
        this._callbacks.hostConnected.push(callback);
    }
    onDisconnected(callback) {
        this._callbacks.hostDisconnected.push(callback);
    }
    onLoad(callback) {
        this._callbacks.hostLoad.push(callback);
    }
    onLoaded(callback) {
        this._callbacks.hostLoaded.push(callback);
    }
    onUpdate(callback) {
        this._callbacks.hostUpdate.push(callback);
    }
    onUpdated(callback) {
        this._callbacks.hostUpdated.push(callback);
    }
    onDestroy(callback) {
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            this.component.manager.ensureHasDestroy?.();
        }
        this._callbacks.hostDestroy.push(callback);
    }
    onLifecycle(callback) {
        this._callbacks.hostLifecycle.push(callback);
        if (this.connectedCalled && this.component.el.isConnected) {
            this._callLifecycle(callback);
        }
    }
    // Call each lifecycle hook
    /** @internal */ triggerConnected() {
        const genericController = this;
        if (genericController.hostConnected) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(genericController.hostConnected, genericController);
        }
        this._callbacks.hostConnected.forEach(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"]);
        this.triggerLifecycle();
        this.connectedCalled = true;
    }
    /** @internal */ triggerDisconnected() {
        const genericController = this;
        if (genericController.hostDisconnected) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(genericController.hostDisconnected, genericController);
        }
        this._callbacks.hostDisconnected.forEach(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"]);
        this._lifecycleCleanups.forEach(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"]);
        this._lifecycleCleanups = [];
    }
    /** @internal */ async triggerLoad() {
        if (this._loadCalled) {
            return;
        }
        this._loadCalled = true;
        const genericController = this;
        if (genericController.hostLoad) {
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeAsyncCall"])(genericController.hostLoad, genericController);
        }
        if (this._callbacks.hostLoad.length > 0) {
            await Promise.allSettled(this._callbacks.hostLoad.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeAsyncCall"]));
        }
        this._ready.resolve(this._exports);
    }
    /** @internal */ triggerLoaded() {
        if (this.loadedCalled) {
            return;
        }
        const genericController = this;
        if (genericController.hostLoaded) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(genericController.hostLoaded, genericController);
        }
        this._callbacks.hostLoaded.forEach(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"]);
        this.loadedCalled = true;
    }
    /** @internal */ triggerUpdate(changes) {
        const genericController = this;
        if (genericController.hostUpdate) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(genericController.hostUpdate, genericController, changes);
        }
        this._callbacks.hostUpdate.forEach(callUpdate, changes);
    }
    /** @internal */ triggerUpdated(changes) {
        const genericController = this;
        if (genericController.hostUpdated) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(genericController.hostUpdated, genericController, changes);
        }
        this._callbacks.hostUpdated.forEach(callUpdate, changes);
    }
    /** @internal */ triggerDestroy() {
        const genericController = this;
        if (genericController.hostDestroy) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(genericController.hostDestroy, genericController);
        }
        this._callbacks.hostDestroy.forEach(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"]);
    }
    /** @internal */ triggerLifecycle() {
        const genericController = this;
        if (genericController.hostLifecycle) {
            this._callLifecycle(()=>genericController.hostLifecycle());
        }
        this._callbacks.hostLifecycle.forEach(this._callLifecycle, this);
    }
    _callLifecycle(callback) {
        setAmbientComponent(this.component);
        const cleanupRaw = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(callback);
        const cleanup = Array.isArray(cleanupRaw) ? cleanupRaw : [
            cleanupRaw
        ];
        cleanup.forEach((cleanup2)=>{
            if (typeof cleanup2 === "function") {
                this._lifecycleCleanups.push(cleanup2);
            } else if (typeof cleanup2 === "object" && typeof cleanup2.remove === "function") {
                this._lifecycleCleanups.push(cleanup2.remove);
            }
        });
    }
};
function callUpdate(callback) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(callback, void 0, this);
}
var GenericController = Controller;
function makeProvisionalValue(base) {
    if (typeof base !== "object" && typeof base !== "function" || base === null) {
        return base;
    }
    const proxy = new Proxy(base, {
        get (target, prop, receiver) {
            if (cyclical.has(prop) && prop in target && target[prop] === proxy) {
                return void 0;
            }
            if (prop in target || prop in Promise.prototype || typeof prop === "symbol") {
                return typeof target === "function" ? target[prop] : Reflect.get(target, prop, receiver);
            }
            if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
                if (("TURBOPACK compile-time value", "development") === "test" && (prop.startsWith("$$") || prop.startsWith("@@") || prop === "nodeType" || prop === "tagName" || prop === "toJSON" || prop === "hasAttribute")) {
                    "TURBOPACK unreachable";
                }
                console.error(`Trying to access "${prop.toString()}" on the controller before it's loaded. ${accessBeforeLoad}`);
            }
            return void 0;
        },
        set: (target, prop, newValue, receiver)=>{
            if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
                console.error(`Trying to set "${prop.toString()}" on the controller before it's loaded. ${accessBeforeLoad}`);
            }
            return Reflect.set(target, prop, newValue, receiver);
        }
    });
    return proxy;
}
var cyclical = /* @__PURE__ */ new Set([
    "exports",
    "_exports"
]);
var accessBeforeLoad = ("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() ? [
    "This might be the case if you are trying to access an async controller in ",
    "connectedCallback(). Or, if you are using it inside of ",
    "componentWillLoad()/another controller without controller.use. Example correct ",
    "usage:\n",
    "makeController(async (component, controller)=>{ await controller.use(someOtherController); });"
].join("") : void 0;
function toControllerHost(component) {
    if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
        if ("addController" in component) {
            return component;
        } else {
            throw new Error("Component does not implement ControllerHost. This might be because you forgot to add 'manager: Controller<this> = useControllerManager(this);' in your component, or you tried to use some controller before that line");
        }
    } else {
        return component;
    }
}
;
function trackPropertyKey(object, onResolved, defaultValue) {
    const keys = Object.keys(object);
    const keyCount = keys.length;
    if (keyTrackMap === void 0) {
        queueMicrotask(keyTrackResolve);
    }
    keyTrackMap ?? (keyTrackMap = /* @__PURE__ */ new Map());
    let pendingTrackers = keyTrackMap.get(object);
    if (pendingTrackers === void 0) {
        pendingTrackers = {
            callbacks: [],
            keyCount
        };
        keyTrackMap.set(object, pendingTrackers);
    }
    if (pendingTrackers.keyCount !== keyCount) {
        pendingTrackers.callbacks.forEach((resolve)=>resolve(keys));
        pendingTrackers.callbacks = [];
        pendingTrackers.keyCount = keyCount;
    }
    pendingTrackers.callbacks.push((keys2)=>{
        const callback = (key2)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(onResolved, null, key2);
        const key = keys2[keyCount];
        if (key === void 0) {
            callback(void 0);
        } else if (object[key] === defaultValue) {
            callback(key);
        } else {
            callback(void 0);
        }
    });
    return defaultValue;
}
var keyTrackMap = void 0;
function keyTrackResolve() {
    Array.from(keyTrackMap?.entries() ?? []).forEach(([object, { callbacks }])=>{
        const keys = Object.keys(object);
        callbacks.forEach((commit)=>commit(keys));
    });
    keyTrackMap = void 0;
}
;
function watch(component, property, callback) {
    var _a2;
    const genericProperty = property;
    if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
        const type = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$XKVBN44N$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getMemberType"])(component, genericProperty);
        if (type === void 0) {
            throw new Error(component.manager.isLit ? `Trying to watch a non-@property, non-@state property "${genericProperty}". Either convert it into a @state() to be able to use watch() on it, or use the get/set syntax` : `Trying to watch a non-@Prop, non-@State property "${genericProperty}". Convert it into a @State() or @Prop property if you need to use watch() on it`);
        }
    }
    const internals = component.manager.internals;
    (_a2 = internals.allWatchers)[genericProperty] ?? (_a2[genericProperty] = []);
    const watchers = internals.allWatchers[genericProperty];
    const genericCallback = callback;
    const safeCallback = (newValue, oldValue, propertyName)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(genericCallback, null, newValue, oldValue, propertyName);
    watchers.push(safeCallback);
    return ()=>{
        const index = watchers.indexOf(safeCallback);
        if (index !== -1) {
            watchers.splice(index, 1);
        }
    };
}
;
;
var ComponentInternals = class {
    constructor(component){
        /**
     * When watchers are set, they are set into `allWatchers`. When watchers are
     * read in the setter, they are read from `enabledWatchers`.
     *
     * In Stencil, on connectedCallback(), controller manager does
     * `enabledWatchers=allWatchers`. Reasoning:
     * - This disables watchers until connected callback (matches behavior of
     *   Stencil's watchers)
     * - This removes the need for a check in the setter for whether the watchers
     *   were enabled already or not (as getters/setters are hot path, and should
     *   be streamlined)
     *
     * In Lit, we set enabledWatchers to allWatchers in the constructor.
     * Reasoning:
     * - While in Stencil all user provided properties are either set before the
     *   component constructor (this is possible since Stencil's props store is
     *   externalized) or after connectedCallback, in Lit the properties may be
     *   set by attributeChangedCallback before connectedCallback. Thus, we need
     *   to enable watchers even before connectedCallback.
     * - This means, that a watcher set for some prop before your component got
     *   a chance to set the default value will trigger the watcher when the
     *   default value is set - but, that is inline with Lit's willUpdate behavior
     *   of triggering for default values AND, the only way to set a watcher
     *   before default value is if you called watcher inside a controller. For
     *   now, there are no controllers written outside of arcgis-map-components
     *   package, so I was able to verify that this change would have no
     *   negative impact.
     *
     * In either way, I plan to remove watchers from controllers once Stencil
     * support is removed.
     */ this.enabledWatchers = {};
        this.allWatchers = {};
        /**
     * "readOnly" is not enabled initially since we need to allow to set property
     * default values in the constructor.
     * For Stencil, readonly is enabled by the `readonly()` controller.
     * For Lit, we have the following logic:
     */ this.enableReadonly = ()=>{
            this.enableReadonly = void 0;
            if (!this.component.manager.isLit) {
                return;
            }
            const internals = this.component.manager.internals;
            Object.entries(internals.members).forEach(([name2, [type]])=>{
                var _a2;
                const isReadOnly = type & 2048 /* ReadOnly */ ;
                if (isReadOnly) {
                    (_a2 = internals.setters)[name2] ?? (_a2[name2] = []);
                    internals.setters[name2].push(internals.readonlySetter);
                }
            });
        };
        this.trackedValue = nothing;
        this.keyTrackers = [];
        this.getters = {};
        this.setters = {};
        this.accessorGetter = {};
        this.accessorSetter = {};
        this._exports = /* @__PURE__ */ new WeakMap();
        this.readonlySetter = (newValue, _oldValue, property)=>{
            if (shouldBypass.readOnly) {
                return newValue;
            }
            throw new Error(`Cannot assign to read-only property "${property}" of ${this.component.el.tagName.toLowerCase()}. Trying to assign "${String(newValue)}"`);
        };
        if ("TURBOPACK compile-time truthy", 1) {
            Object.defineProperty(this, "component", {
                writable: false,
                enumerable: false,
                configurable: true,
                value: component
            });
        } else {
            "TURBOPACK unreachable";
        }
    }
    firePropTrackers(key, value) {
        const trackers = this.keyTrackers;
        this.trackedValue = nothing;
        this.keyTrackers = [];
        trackers.forEach((tracker)=>tracker(key, value));
    }
    // REFACTOR: once Stencil is no longer supported, simplify this with Lit's getPropertyDescriptor(), or https://github.com/shoelace-style/shoelace/issues/1990
    /**
   * Configure a getter or setter for a given \@Prop/\@State
   *
   * Since props are defined on the prototype, they are shared between all
   * instances of a component. Thus, instead of passing a reference to the
   * getter/setter function, you should update the
   * ComponentInternals.getters/setters properties, and then call getSetProxy
   * to apply the changes to the prototype
   */ getSetProxy(property) {
        const component = this.component;
        const classPrototype = component.constructor.prototype;
        this._getSetProxy(classPrototype, property, "class");
        if (component.manager.isLit) {
            return;
        }
        const htmlPrototype = component.el.constructor.prototype;
        if (classPrototype !== htmlPrototype) {
            this._getSetProxy(htmlPrototype, property, "html");
        }
    }
    _getSetProxy(prototype, name2, type) {
        const component = this.component;
        const propType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$XKVBN44N$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getMemberType"])(component, name2);
        let descriptor;
        do {
            descriptor = Object.getOwnPropertyDescriptor(prototype, name2);
        }while (!descriptor && (prototype = Object.getPrototypeOf(prototype)))
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            const tolerateNotFound = type === "html";
            if (descriptor?.set === void 0 || descriptor.get === void 0) {
                if (descriptor !== void 0 && "value" in descriptor) {
                    throw new Error(`getSet() should only be used on @Prop/@property/@State/@state properties. For internal component properties, use regular get/set syntax. Tried to use it on "${name2}" in ${component.el.tagName}`);
                } else if (tolerateNotFound) {
                    return;
                } else {
                    throw new Error(`Unable to find "${name2}" property on the ${component.el.tagName} component`);
                }
            }
            if (propType === void 0) {
                throw new Error("Unable to retrieve prop type");
            }
        } else if (!descriptor) {
            return void 0;
        }
        const originalGet = descriptor.get;
        const originalSet = descriptor.set;
        const isGetterAlreadyOverwritten = customAccessor in originalGet;
        const isSetterAlreadyOverwritten = customAccessor in originalSet;
        if (isGetterAlreadyOverwritten && isSetterAlreadyOverwritten) {
            return;
        }
        const shouldOverwriteGet = !isGetterAlreadyOverwritten;
        const shouldOverwriteSet = !isSetterAlreadyOverwritten;
        const finalGetter = shouldOverwriteGet ? function getter() {
            let value = originalGet.call(this);
            const component2 = elementToInstance.get(this);
            if (shouldBypass.getter || component2 === void 0) {
                return value;
            }
            const internals = component2.manager.internals;
            value = internals.accessorGetter[name2](value, name2);
            const getters = internals.getters[name2] ?? emptyArray;
            for(let i = 0; i < getters.length; i++){
                value = getters[i](value, name2);
            }
            return value;
        } : originalGet;
        const finalSetter = shouldOverwriteSet ? function setter(rawNewValue) {
            const oldValue = originalGet.call(this);
            const component2 = elementToInstance.get(this);
            if (component2 === void 0) {
                originalSet.call(this, rawNewValue);
                return;
            }
            let newValue = component2.manager.isLit ? /*
         * Cast `null` to `undefined`.
         * See https://devtopia.esri.com/WebGIS/arcgis-web-components/discussions/1299
         */ rawNewValue ?? void 0 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$XKVBN44N$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePropertyValue"])(rawNewValue, propType);
            const internals = component2.manager.internals;
            if (newValue === oldValue) {
                originalSet.call(this, newValue);
            } else {
                const setters = shouldBypass.setter ? emptyArray : internals.setters[name2] ?? emptyArray;
                for(let i = 0; i < setters.length; i++){
                    newValue = setters[i](newValue, oldValue, name2);
                    if (newValue === oldValue) {
                        break;
                    }
                }
                newValue = internals.accessorSetter[name2](newValue, oldValue, name2);
                originalSet.call(this, newValue);
                if (newValue !== oldValue) {
                    internals.enabledWatchers[name2]?.forEach((watcher)=>watcher(newValue, oldValue, name2));
                }
            }
            if (internals.keyTrackers.length > 0) {
                internals?.firePropTrackers(name2, rawNewValue);
            }
        } : originalSet;
        if (shouldOverwriteGet) {
            finalGetter[customAccessor] = true;
        }
        if (shouldOverwriteSet) {
            finalSetter[customAccessor] = true;
        }
        Object.defineProperty(prototype, name2, {
            ...descriptor,
            get: finalGetter,
            set: finalSetter
        });
    }
    /**
   * Associate an exports object with a controller for reverse lookup in
   * controller.use
   */ markExports(controller, exports) {
        if (typeof exports === "object" && exports !== null || typeof exports === "function") {
            this._exports.set(exports, controller);
        }
    }
    resolveExports(exports) {
        if (typeof exports === "object" && exports !== null || typeof exports === "function") {
            return this._exports.get(exports);
        } else {
            return void 0;
        }
    }
};
var emptyArray = [];
var customAccessor = Symbol();
var nothing = ("TURBOPACK compile-time truthy", 1) ? Symbol.for(// Use Symbol.for in dev mode to make it easier to maintain state when doing HMR.
`${name}: nothing`) : ("TURBOPACK unreachable", undefined);
// src/trackPropKey.ts
function trackPropKey(component, onResolved, defaultValue) {
    const internals = component.manager.internals;
    if (internals.trackedValue !== nothing && internals.trackedValue !== defaultValue) {
        internals.firePropTrackers(void 0, void 0);
    }
    if (internals.keyTrackers.length === 0) {
        queueMicrotask(()=>internals.firePropTrackers(void 0, void 0));
    }
    internals.trackedValue = defaultValue;
    internals.keyTrackers.push((key, value)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(onResolved, void 0, defaultValue === value ? key : void 0));
    return defaultValue;
}
// src/trackKey.ts
function trackKey(hostsCandidates = [
    retrieveComponent(),
    ...retrieveParentControllers()
], onResolved, defaultValue) {
    const candidateHosts = Array.isArray(hostsCandidates) ? hostsCandidates : [
        hostsCandidates
    ];
    let leftToResolve = candidateHosts.length + 1;
    const resolved = (resolution)=>{
        leftToResolve -= 1;
        if (resolution !== void 0) {
            leftToResolve = Math.min(leftToResolve, 0);
        }
        if (leftToResolve === 0) {
            onResolved(resolution);
        }
    };
    candidateHosts.forEach((host)=>trackPropertyKey(host, (key)=>resolved(key === void 0 ? void 0 : {
                key,
                host,
                isReactive: false
            }), defaultValue));
    const component = candidateHosts.find((host)=>"manager" in host && typeof host.manager === "object" && host.manager.component === host);
    if (component) {
        trackPropKey(component, (key)=>resolved(key === void 0 ? void 0 : {
                key,
                host: component,
                isReactive: true
            }), defaultValue);
    }
    return defaultValue;
}
;
function getSet(defaultValue, getSet2) {
    const component = retrieveComponent();
    return trackPropKey(component, (rawName)=>{
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && rawName === void 0) {
            throw new Error("Unable to resolve get/set's prop name. Make sure you are using it like @Prop() someProp = getSet(defaultValue,{get,set})");
        }
        const name2 = rawName;
        const manager = component.manager;
        const genericComponent = component;
        const value = genericComponent[name2];
        const isStencilHotReload = ("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && !manager.isLit && devOnlyGetPersistentControllerData?.(manager) === true;
        if (value != null && value !== defaultValue && typeof getSet2.set === "function" && !isStencilHotReload) {
            const newValue = getSet2.set(value, defaultValue, name2);
            if (newValue !== value) {
                if (manager.isLit) {
                    genericComponent[name2] = newValue;
                } else {
                    let firstConnected = true;
                    manager.onConnected(()=>{
                        if ("TURBOPACK compile-time falsy", 0) {
                            "TURBOPACK unreachable";
                        }
                        firstConnected = true;
                        bypassSetter(()=>{
                            genericComponent[name2] = newValue;
                        });
                    });
                }
            }
        }
        genericGetSet(component, name2, getSet2);
    }, defaultValue);
}
var dynamicGetSet = (component, property, getSet2)=>genericGetSet(component, property, getSet2);
function bypassSetter(callback) {
    shouldBypass.setter = true;
    try {
        return callback();
    } finally{
        shouldBypass.setter = false;
    }
}
function bypassGetter(callback) {
    shouldBypass.getter = true;
    try {
        return callback();
    } finally{
        shouldBypass.getter = false;
    }
}
function genericGetSet(component, property, getSet2) {
    var _a2, _b;
    const genericGetSet2 = getSet2;
    const internals = component.manager.internals;
    const get = typeof genericGetSet2.get === "function" ? genericGetSet2.get : void 0;
    if (get) {
        (_a2 = internals.getters)[property] ?? (_a2[property] = []);
        internals.getters[property].unshift(get);
    }
    const set = genericGetSet2.set === "ignore" ? ignoreSet : genericGetSet2.set;
    if (set) {
        (_b = internals.setters)[property] ?? (_b[property] = []);
        internals.setters[property].unshift(set);
    }
}
var ignoreSet = (_, value)=>value;
// src/readonly.ts
function readonly(value) {
    const component = retrieveComponent();
    return getSet(value, {
        set: component.manager.internals.readonlySetter
    });
}
function bypassReadOnly(callback) {
    shouldBypass.readOnly = true;
    try {
        return callback();
    } finally{
        shouldBypass.readOnly = false;
    }
}
// src/proxyExports.ts
var proxyExports = (Class)=>(...args)=>{
        const ambientControllers2 = retrieveParentControllers();
        const instance = new Class(...args);
        const initialExports = instance.exports;
        setParentController(ambientControllers2.at(-1));
        const internals = instance.component.manager.internals;
        internals.markExports(instance, initialExports);
        instance.watchExports((exports)=>internals.markExports(instance, exports));
        setAmbientChildController(instance);
        const hostCandidates = [
            instance.component,
            ...ambientControllers2
        ].reverse();
        return trackKey(hostCandidates, (resolution)=>resolution === void 0 ? void 0 : setProxy(instance, resolution, initialExports), initialExports);
    };
function setProxy(controller, { host, key, isReactive: assignedToProp }, initialExports) {
    const genericHost = host;
    const controllerValueChanged = genericHost[key] !== controller.exports;
    const hostValueChanged = genericHost[key] !== initialExports;
    const controllerUpdatedExports = initialExports !== controller.exports;
    if (controllerValueChanged && !hostValueChanged && controllerUpdatedExports) {
        genericHost[key] = controller.exports;
    }
    const isProxyExportsOnComponent = host === controller.component;
    if (isProxyExportsOnComponent) {
        if (assignedToProp) {
            const internals = controller.component.manager.internals;
            if (hostValueChanged) {
                internals.markExports(controller, genericHost[key]);
            }
            watch(controller.component, key, (value)=>{
                if (value !== controller.exports) {
                    internals.markExports(controller, value);
                }
            });
        }
        controller.assignedProperty = assignedToProp ? void 0 : key;
    }
    controller.watchExports(()=>{
        if (genericHost[key] === controller.exports) {
            return;
        }
        const manager = controller.component.manager;
        const isReadOnly = manager.internals.setters[key]?.includes(manager.internals.readonlySetter);
        if (isReadOnly) {
            bypassReadOnly(()=>{
                genericHost[key] = controller.exports;
            });
        } else {
            genericHost[key] = controller.exports;
        }
    });
}
;
}}),
"[project]/node_modules/@arcgis/components-controllers/dist/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "load": (()=>load),
    "makeController": (()=>makeController),
    "makeGenericController": (()=>makeGenericController),
    "makeT9nController": (()=>makeT9nController),
    "toFunction": (()=>toFunction),
    "useControllerManager": (()=>useControllerManager),
    "useDirection": (()=>useDirection),
    "useMedia": (()=>useMedia),
    "usePropertyChange": (()=>usePropertyChange),
    "useWatchAttributes": (()=>useWatchAttributes)
});
// src/ControllerManager.ts
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-utils/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/chunk-PP2BAVRW.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$XKVBN44N$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/chunk-XKVBN44N.js [app-ssr] (ecmascript)");
;
;
;
;
var useControllerManager = (component, forceUpdate)=>new ControllerManager(component, forceUpdate);
var ControllerManager = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["GenericController"] {
    constructor(component, forceUpdate){
        const isLit = "addController" in component;
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && !isLit) {
            Object.defineProperty(component.el, "__component", {
                value: component
            });
            ({});
        }
        const controllers = /* @__PURE__ */ new Set();
        function addController(controller) {
            controllers.add(controller);
            if (!(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["controllerSymbol"] in controller) && component.renderRoot && component.el.isConnected) {
                controller.hostConnected?.();
            }
        }
        function removeController(controller) {
            void controllers.delete(controller);
            controller.controllerRemoved?.();
        }
        const controllerHost = component;
        controllerHost.addController = addController;
        controllerHost.removeController = removeController;
        if (!isLit) {
            const update = forceUpdate ?? component.constructor.__forceUpdate;
            controllerHost.requestUpdate = ()=>update(component);
        }
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            const stencilToLitMapping = {
                componentDidLoad: "loaded",
                componentDidRender: "updated",
                componentDidUpdate: "updated",
                componentShouldUpdate: "shouldUpdate",
                componentWillLoad: "load",
                componentWillRender: "willUpdate",
                componentWillUpdate: "willUpdate"
            };
            Object.entries(stencilToLitMapping).forEach(([stencilMethod, litMethod])=>{
                if (isLit && stencilMethod in component) {
                    throw new Error(`Unexpected ${stencilMethod}() in a Lit component ${component.el.tagName.toLowerCase()}. In Lit, you should use ${litMethod}() instead`);
                }
                if (!isLit && litMethod in component) {
                    throw new Error(`Unexpected ${litMethod}() in a Stencil component ${component.el.tagName.toLowerCase()}. In Stencil, you should use ${litMethod}() instead`);
                }
            });
            if (isLit) {
                let i = 0;
                let isLitElementClass = false;
                for(let prototype = component; !isLitElementClass; i++){
                    if (prototype === null) {
                        throw new Error("Expected controllers to be used in a LitElement class");
                    }
                    if (Object.hasOwn(prototype, "_load")) {
                        isLitElementClass = true;
                        break;
                    }
                    prototype = Object.getPrototypeOf(prototype);
                }
                if (i < 1) {
                    throw new Error("It looks like you are trying to call useControllerManager in a component that uses LitElement imported from 'lit'. useControllerManager should only be used in the LitElement coming from `@arcgis/lumina`");
                }
            }
        }
        super(component);
        /** @internal */ this.internals = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ComponentInternals"](this.component);
        this.destroyed = false;
        this._updatePromise = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Deferred"]();
        this._originalLifecycles = {};
        this.isLit = isLit;
        this.component.manager = this;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$XKVBN44N$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retrieveComponentMembers"])(component, isLit);
        this._controllers = controllers;
        this.exports = void 0;
        this.hasDestroy = autoDestroyDisabledPropName in this.component && typeof this.component.destroy === "function";
        this._bindLifecycleMethods();
        const internals = this.internals;
        Object.keys(internals.members).forEach((name)=>{
            internals.accessorGetter[name] = defaultGetterSetter;
            internals.accessorSetter[name] = defaultGetterSetter;
            internals.getSetProxy(name);
        });
        if (isLit) {
            this.internals.enabledWatchers = this.internals.allWatchers;
        } else {
            Object.defineProperty(component, "updateComplete", {
                get: async ()=>await this._updatePromise.promise
            });
        }
        queueMicrotask(internals.enableReadonly);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setAmbientComponent"])(component);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["elementToInstance"].set(component.el, component);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["elementToInstance"].set(component, component);
    }
    _bindLifecycleMethods() {
        const component = this.component;
        const isLit = this.isLit;
        const isStencilDistBuild = component.el === component;
        this._originalLifecycles = {
            // These component's callbacks will be called by Lit, so we don't have to
            _connectedCallback: isLit || isStencilDistBuild ? void 0 : component.connectedCallback,
            _disconnectedCallback: isLit || isStencilDistBuild ? void 0 : component.disconnectedCallback,
            _load: isLit ? component.load : component.componentWillLoad,
            _loaded: isLit ? component.loaded : component.componentDidLoad,
            _willUpdate: isLit ? void 0 : component.componentWillUpdate,
            _updated: isLit ? void 0 : component.componentDidUpdate,
            _destroy: component.destroy
        };
        const hostConnected = this._connectedCallback.bind(this);
        const hostDisconnected = this._disconnectedCallback.bind(this);
        const hostUpdate = this._update.bind(this);
        const hostUpdated = this._updated.bind(this);
        if (isLit) {
            component.constructor.prototype.addController.call(component, {
                // Lit will call these callbacks
                hostConnected,
                hostDisconnected,
                hostUpdate,
                hostUpdated
            });
        } else {
            component.connectedCallback = hostConnected;
            component.disconnectedCallback = hostDisconnected;
            component.componentWillLoad = this._load.bind(this);
            component.componentDidLoad = this._loaded.bind(this);
            component.componentWillUpdate = hostUpdate;
            component.componentDidUpdate = hostUpdated;
        }
        if (this.hasDestroy) {
            component.destroy = this.destroy.bind(this);
        }
    }
    /**
   * Private because this is not supposed to be called by Component directly.
   * Instead, _bindLifecycleMethods will take care of that. Otherwise, you risk
   * calling lifecycle methods twice.
   *
   * @internal
   */ _connectedCallback() {
        if (this.destroyed) {
            const tagName = this.component.el.tagName.toLowerCase();
            this.component.el.remove();
            throw new Error(`The ${tagName} component has already been destroyed. It cannot be used again. If you meant to disconnect and reconnect a component without automatic destroy, set the ${autoDestroyDisabledPropName} prop.`);
        }
        if (this._autoDestroyTimeout !== void 0) {
            clearTimeout(this._autoDestroyTimeout);
        }
        const internals = this.internals;
        internals.enabledWatchers = internals.allWatchers;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keyTrackResolve"])();
        internals.enableReadonly?.();
        this._controllers.forEach(callConnected);
        this._originalLifecycles._connectedCallback?.call(this.component);
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["devOnlySetPersistentControllerData"]?.(this, true);
        }
    }
    /** @internal */ _disconnectedCallback() {
        if (this.destroyed) {
            return;
        }
        this._controllers.forEach(callDisconnected);
        this._originalLifecycles._disconnectedCallback?.call(this.component);
        if (this.hasDestroy) {
            this._setAutoDestroyTimeout();
        }
    }
    /** @internal */ async _load() {
        await Promise.allSettled(Array.from(this._controllers, callLoad));
        await this._originalLifecycles._load?.call(this.component);
        if (this.hasDestroy) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["watch"])(this.component, autoDestroyDisabledPropName, ()=>this._setAutoDestroyTimeout());
        }
    }
    /** @internal */ _loaded() {
        this._controllers.forEach(callLoaded);
        this._originalLifecycles._loaded?.call(this.component);
    }
    _update() {
        const maybeLitComponent = this.component;
        this._controllers.forEach(callUpdate, maybeLitComponent.$changes);
        return this._originalLifecycles._willUpdate?.call(this.component);
    }
    _updated() {
        const maybeLitComponent = this.component;
        this._controllers.forEach(callUpdated, maybeLitComponent.$changes);
        this._originalLifecycles._updated?.call(this.component);
        if (this.isLit) {
            maybeLitComponent.$changes = /* @__PURE__ */ new Map();
        } else {
            const updatePromise = this._updatePromise;
            this._updatePromise = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Deferred"]();
            updatePromise.resolve(true);
        }
    }
    async destroy() {
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            this.ensureHasDestroy?.();
        }
        if (this.destroyed) {
            return;
        }
        if (this.component.el.isConnected) {
            this.hasDestroy = false;
            try {
                this.component.el.remove();
            } finally{
                this.hasDestroy = true;
            }
        }
        this._autoDestroyTimeout = void 0;
        this.destroyed = true;
        this._controllers.forEach(callDestroy);
        this._controllers.clear();
        await this._originalLifecycles._destroy?.call(this.component);
    }
    _setAutoDestroyTimeout() {
        if (this._autoDestroyTimeout !== void 0) {
            clearTimeout(this._autoDestroyTimeout);
        }
        if (!this.component.el.isConnected && !this.component.autoDestroyDisabled) {
            const destroy = ()=>void this.destroy().catch(console.error);
            if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && autoDestroyOnDisconnectTimeout === 0) {
                queueMicrotask(destroy);
            } else {
                this._autoDestroyTimeout = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["devToolsAwareTimeout"])(destroy, autoDestroyOnDisconnectTimeout);
            }
        }
    }
};
if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
    ControllerManager.prototype.ensureHasDestroy = function ensureHasDestroy() {
        if (!this.hasDestroy) {
            throw new Error(`
          If the component uses a controller that uses destroy() method, then the
          component must have the following properties:
          /**
           * If true, the component will not be destroyed automatically when it is
           * disconnected from the document. This is useful when you want to move the
           * component to a different place on the page, or temporarily hide it. If this
           * is set, make sure to call the \`destroy\` method when you are done to prevent
           * memory leaks.
           */
          @${this.isLit ? "property" : "Prop"}() ${autoDestroyDisabledPropName} = false;
          
          /** Permanently destroy the component */
          @${this.isLit ? "method" : "Method"}()
          async destroy(): Promise<void> {
            await this.manager.destroy();
          }
          `.trim().split("\n").map((line)=>line.trim()).join("\n"));
        }
    };
}
var autoDestroyDisabledPropName = "autoDestroyDisabled";
var autoDestroyOnDisconnectTimeout = 1e3;
var exportsForTests = ("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() ? {
    setAutoDestroyOnDisconnectTimeout: (timeout)=>{
        autoDestroyOnDisconnectTimeout = timeout;
    }
} : void 0;
var defaultGetterSetter = (value)=>value;
function callConnected(controller) {
    if ("triggerConnected" in controller) {
        controller.triggerConnected();
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(controller.hostConnected, controller);
    }
}
function callDisconnected(controller) {
    if ("triggerDisconnected" in controller) {
        controller.triggerDisconnected();
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(controller.hostDisconnected, controller);
    }
}
async function callLoad(controller) {
    if ("triggerLoad" in controller) {
        await controller.triggerLoad();
    } else {
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeAsyncCall"])(controller.hostLoad, controller);
    }
}
function callLoaded(controller) {
    if ("triggerLoaded" in controller) {
        controller.triggerLoaded();
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(controller.hostLoaded, controller);
    }
}
function callUpdate(controller) {
    if ("triggerUpdate" in controller) {
        controller.triggerUpdate(this);
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(controller.hostUpdate, controller, this);
    }
}
function callUpdated(controller) {
    if ("triggerUpdated" in controller) {
        controller.triggerUpdated(this);
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(controller.hostUpdated, controller, this);
    }
}
function callDestroy(controller) {
    if ("triggerDestroy" in controller) {
        controller.triggerDestroy();
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["safeCall"])(controller.hostDestroy, controller);
    }
}
// src/functional.ts
var makeController = (constructor)=>proxy(void 0, constructor);
var makeGenericController = (constructor)=>(component)=>proxy(component, /**
   * GenericController is identical to Controller, in all except for typing.
   * So dying a type-cast here so as not to needlessly add one more object
   * to the prototype chain
   */ constructor);
var FunctionalController = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Controller"] {
    constructor(component, constructor){
        super(component);
        const originalExports = this.exports;
        try {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setAmbientComponent"])(this.component);
            const value = constructor(this.component, this);
            const constructorChangedExports = this.exports !== originalExports;
            if (value instanceof Promise) {
                if (!constructorChangedExports) {
                    this.setProvisionalExports(value);
                }
                const resolved = value.then((result)=>{
                    this.exports = result;
                    super.catchUpLifecycle();
                }).catch((error)=>{
                    this._ready.reject(error);
                    console.error(error);
                });
                this.onLoad(async ()=>await resolved);
            } else {
                if (!constructorChangedExports || value !== void 0) {
                    this.exports = value;
                }
                queueMicrotask(()=>super.catchUpLifecycle());
            }
        } catch (error) {
            this._ready.reject(error);
            console.error(error);
        }
    }
    /** Noop - will be called in the constructor instead */ catchUpLifecycle() {
        return;
    }
};
var proxy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["proxyExports"])(FunctionalController);
// src/useWatchAttributes.ts
var useWatchAttributes = (attributes, callback)=>new AttributeWatchController(attributes, callback);
var AttributeWatchController = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Controller"] {
    constructor(_attributes, _callback){
        super();
        this._attributes = _attributes;
        this._callback = _callback;
        this._observer = new MutationObserver((mutations)=>{
            mutations.forEach((mutation)=>{
                if (_attributes.includes(mutation.attributeName)) {
                    _callback.call(this.component, this.component.el.getAttribute(mutation.attributeName), mutation.oldValue, mutation.attributeName);
                }
            });
        });
    }
    hostConnected() {
        this._attributes.forEach((attribute)=>{
            if (this.component.el.hasAttribute(attribute)) {
                this._callback.call(this.component, null, this.component.el.getAttribute(attribute), attribute);
            }
        });
        this._observer.observe(this.component.el, {
            attributes: true,
            attributeOldValue: true,
            attributeFilter: this._attributes
        });
    }
    hostDisconnected() {
        this._observer.disconnect();
    }
};
// src/load.ts
var load = makeController;
// src/toFunction.ts
var toFunction = (Class)=>(...args)=>{
        const ambientControllers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retrieveParentControllers"])();
        const instance = new Class(...args);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setParentController"])(ambientControllers.at(-1));
        return instance;
    };
// src/useMedia.ts
var useMedia = (query)=>makeController((_component, controller)=>{
        const media = globalThis.matchMedia(query);
        function changed() {
            controller.exports = media.matches;
        }
        changed();
        controller.onLifecycle(()=>{
            media.addEventListener("change", changed);
            return ()=>media.removeEventListener("change", changed);
        });
        return void 0;
    });
;
var defaultDirection = "ltr";
var useDirection = ()=>makeController((component, controller)=>{
        controller.exports = defaultDirection;
        controller.onLifecycle(()=>{
            function callback() {
                const dir = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getElementAttribute"])(component.el, "dir", defaultDirection);
                controller.exports = dir === "rtl" ? "rtl" : "ltr";
            }
            callback();
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["observeAncestorsMutation"])(component.el, [
                "dir"
            ], callback);
        });
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["trackKey"])(component, (resolved)=>{
                if (resolved?.key === "dir") {
                    throw new Error(`Do not assign this controller to a prop called \`dir\` as that will overwrite the \`dir\` attribute on the host element - component should not be setting the \`dir\` attribute on itself. Instead, assign this controller to a property called \`direction\`.`);
                }
            }, controller.exports);
        }
        return void 0;
    });
;
var makeT9nController = (getAssetPath)=>(options = {})=>// eslint-disable-next-line @typescript-eslint/promise-function-async
        makeController((component, controller)=>{
            const locale = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getElementLocales"])(component.el);
            const pending = {
                _lang: locale.lang,
                _t9nLocale: locale.t9nLocale,
                _loading: true
            };
            const componentWithOverrides = component;
            controller.onLifecycle(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["startLocaleObserver"])(component.el, ()=>getAssetPath("./assets"), ({ t9nLocale, t9nStrings, lang })=>{
                    const withoutOverrides = {
                        ...t9nStrings,
                        _lang: lang,
                        _t9nLocale: t9nLocale,
                        _loading: false
                    };
                    controller.exports = withoutOverrides;
                    const label = t9nStrings.componentLabel;
                    if (typeof label === "string" && "label" in component && component.label == null) {
                        component.label ?? (component.label = label);
                    }
                    applyOverrides(componentWithOverrides.messageOverrides);
                }, options.name));
            function applyOverrides(messageOverrides) {
                const currentValue = controller.exports;
                const rawMessages = currentValue._original ?? currentValue;
                const updated = deepMerge(rawMessages, messageOverrides);
                if (messageOverrides) {
                    updated._original = rawMessages;
                }
                controller.exports = updated;
            }
            if ("messageOverrides" in componentWithOverrides) {
                controller.onLifecycle(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["watch"])(componentWithOverrides, "messageOverrides", applyOverrides));
            }
            if (options.blocking) {
                controller.setProvisionalExports(pending, false);
                return controller.ready;
            } else {
                return pending;
            }
        });
function deepMerge(original, overwrites) {
    if (!overwrites) {
        return original;
    }
    const merged = {
        ...original
    };
    Object.entries(overwrites).forEach(([key, value])=>{
        if (typeof value === "object") {
            merged[key] = deepMerge(original[key], value);
        } else {
            merged[key] = value ?? original[key];
        }
    });
    return merged;
}
;
var usePropertyChange = (_component)=>propertyChangeController;
var eventName = "arcgisPropertyChange";
function propertyChangeController(...toWatch) {
    const component = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retrieveComponent"])();
    const eventedComponent = component;
    let eventEmitter = eventedComponent[eventName];
    if (component.manager.isLit) {
        eventEmitter = component.constructor.$createEvent(eventName, void 0, component);
        if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
            if (typeof eventEmitter !== "object" || eventEmitter === null || !("emit" in eventEmitter) || typeof eventEmitter.emit !== "function") {
                throw new Error(`Expected to find $createEvent static property on Lumina's LitElement"`);
            }
        }
    }
    if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])()) {
        if (typeof eventEmitter !== "object" || eventEmitter === null || !("emit" in eventEmitter) || typeof eventEmitter.emit !== "function") {
            throw new Error(`For consistency, usePropertyChange must be assigned to an arcgisPropertyChange property that has an @Event() decorator`);
        }
        const allProps = new Set(Object.entries(component.manager.internals.members).filter(([_name, [propType]])=>(propType & 31 /* Prop */ ) !== 0).map(([name])=>name));
        toWatch.forEach((prop)=>{
            if (!allProps.has(prop)) {
                throw new Error(prop in component ? `For usePropertyChange to emit event on "${prop}" property change, you should add @${component.manager.isLit ? "property" : "Prop"}() to ${prop} in ${component.el.tagName.toLowerCase()}` : `usePropertyChange can't emit event on "${prop}" property change as such property does not exist in ${component.el.tagName.toLowerCase()}`);
            }
        });
    }
    component.manager.onLoad(()=>component.manager.onLifecycle(()=>toWatch.map((name)=>// Casting to 'el' to simplify dynamic prop name typing
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["watch"])(component, name, ()=>eventEmitter.emit({
                        name
                    })))));
    if (("TURBOPACK compile-time value", "development") !== "production" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$utils$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEsriInternalEnv"])() && component.manager.isLit) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["trackKey"])(component, (resolution)=>{
            if (resolution === void 0 || resolution.isReactive || resolution.key !== eventName) {
                throw new Error(`For consistency, usePropertyChange must be assigned to an arcgisPropertyChange property and that property should not have @property() or @state() decorators: arcgisPropertyChange = usePropertyChange<this>()("prop1", "prop2");`);
            }
        }, eventEmitter);
    }
    return eventEmitter;
}
;
}}),
"[project]/node_modules/@arcgis/components-controllers/dist/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$PP2BAVRW$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/chunk-PP2BAVRW.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$chunk$2d$XKVBN44N$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/chunk-XKVBN44N.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$components$2d$controllers$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@arcgis/components-controllers/dist/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/@lit/context/development/lib/context-request-event.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ /**
 * An event fired by a context requester to signal it desires a specified context with the given key.
 *
 * A provider should inspect the `context` property of the event to determine if it has a value that can
 * satisfy the request, calling the `callback` with the requested value if so.
 *
 * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback
 * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`
 * method to the callback which consumers can invoke to indicate they no longer wish to receive these updates.
 *
 * If no `subscribe` value is present in the event, then the provider can assume that this is a 'one time'
 * request for the context and can therefore not track the consumer.
 */ __turbopack_esm__({
    "ContextRequestEvent": (()=>ContextRequestEvent)
});
class ContextRequestEvent extends Event {
    /**
     *
     * @param context the context key to request
     * @param contextTarget the original context target of the requester
     * @param callback the callback that should be invoked when the context with the specified key is available
     * @param subscribe when, true indicates we want to subscribe to future updates
     */ constructor(context, contextTarget, callback, subscribe){
        super('context-request', {
            bubbles: true,
            composed: true
        });
        this.context = context;
        this.contextTarget = contextTarget;
        this.callback = callback;
        this.subscribe = subscribe ?? false;
    }
} //# sourceMappingURL=context-request-event.js.map
}}),
"[project]/node_modules/@lit/context/development/lib/create-context.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ /**
 * Creates a typed Context.
 *
 * Contexts are compared with strict equality.
 *
 * If you want two separate `createContext()` calls to referer to the same
 * context, then use a key that will by equal under strict equality like a
 * string for `Symbol.for()`:
 *
 * ```ts
 * // true
 * createContext('my-context') === createContext('my-context')
 * // true
 * createContext(Symbol.for('my-context')) === createContext(Symbol.for('my-context'))
 * ```
 *
 * If you want a context to be unique so that it's guaranteed to not collide
 * with other contexts, use a key that's unique under strict equality, like
 * a `Symbol()` or object.:
 *
 * ```
 * // false
 * createContext({}) === createContext({})
 * // false
 * createContext(Symbol('my-context')) === createContext(Symbol('my-context'))
 * ```
 *
 * @param key a context key value
 * @template ValueType the type of value that can be provided by this context.
 * @returns the context key value cast to `Context<K, ValueType>`
 */ __turbopack_esm__({
    "createContext": (()=>createContext)
});
function createContext(key) {
    return key;
} //# sourceMappingURL=create-context.js.map
}}),
"[project]/node_modules/@lit/context/development/lib/controllers/context-consumer.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "ContextConsumer": (()=>ContextConsumer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$request$2d$event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/context-request-event.js [app-ssr] (ecmascript)");
;
class ContextConsumer {
    constructor(host, contextOrOptions, callback, subscribe){
        this.subscribe = false;
        this.provided = false;
        this.value = undefined;
        // This function must have stable identity to properly dedupe in ContextRoot
        // if this element connects multiple times.
        this._callback = (value, unsubscribe)=>{
            // some providers will pass an unsubscribe function indicating they may provide future values
            if (this.unsubscribe) {
                // if the unsubscribe function changes this implies we have changed provider
                if (this.unsubscribe !== unsubscribe) {
                    // cleanup the old provider
                    this.provided = false;
                    this.unsubscribe();
                }
                // if we don't support subscription, immediately unsubscribe
                if (!this.subscribe) {
                    this.unsubscribe();
                }
            }
            // store the value so that it can be retrieved from the controller
            this.value = value;
            // schedule an update in case this value is used in a template
            this.host.requestUpdate();
            // only invoke callback if we are either expecting updates or have not yet
            // been provided a value
            if (!this.provided || this.subscribe) {
                this.provided = true;
                if (this.callback) {
                    this.callback(value, unsubscribe);
                }
            }
            this.unsubscribe = unsubscribe;
        };
        this.host = host;
        // This is a potentially fragile duck-type. It means a context object can't
        // have a property name context and be used in positional argument form.
        if (contextOrOptions.context !== undefined) {
            const options = contextOrOptions;
            this.context = options.context;
            this.callback = options.callback;
            this.subscribe = options.subscribe ?? false;
        } else {
            this.context = contextOrOptions;
            this.callback = callback;
            this.subscribe = subscribe ?? false;
        }
        this.host.addController(this);
    }
    hostConnected() {
        this.dispatchRequest();
    }
    hostDisconnected() {
        if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = undefined;
        }
    }
    dispatchRequest() {
        this.host.dispatchEvent(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$request$2d$event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextRequestEvent"](this.context, this.host, this._callback, this.subscribe));
    }
} //# sourceMappingURL=context-consumer.js.map
}}),
"[project]/node_modules/@lit/context/development/lib/value-notifier.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ /**
 * A simple class which stores a value, and triggers registered callbacks when
 * the value is changed via its setter.
 *
 * An implementor might use other observable patterns such as MobX or Redux to
 * get behavior like this. But this is a pretty minimal approach that will
 * likely work for a number of use cases.
 */ __turbopack_esm__({
    "ValueNotifier": (()=>ValueNotifier)
});
class ValueNotifier {
    get value() {
        return this._value;
    }
    set value(v) {
        this.setValue(v);
    }
    setValue(v, force = false) {
        const update = force || !Object.is(v, this._value);
        this._value = v;
        if (update) {
            this.updateObservers();
        }
    }
    constructor(defaultValue){
        this.subscriptions = new Map();
        this.updateObservers = ()=>{
            for (const [callback, { disposer }] of this.subscriptions){
                callback(this._value, disposer);
            }
        };
        if (defaultValue !== undefined) {
            this.value = defaultValue;
        }
    }
    addCallback(callback, consumerHost, subscribe) {
        if (!subscribe) {
            // just call the callback once and we're done
            callback(this.value);
            return;
        }
        if (!this.subscriptions.has(callback)) {
            this.subscriptions.set(callback, {
                disposer: ()=>{
                    this.subscriptions.delete(callback);
                },
                consumerHost
            });
        }
        const { disposer } = this.subscriptions.get(callback);
        callback(this.value, disposer);
    }
    clearCallbacks() {
        this.subscriptions.clear();
    }
} //# sourceMappingURL=value-notifier.js.map
}}),
"[project]/node_modules/@lit/context/development/lib/controllers/context-provider.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "ContextProvider": (()=>ContextProvider),
    "ContextProviderEvent": (()=>ContextProviderEvent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$request$2d$event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/context-request-event.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$value$2d$notifier$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/value-notifier.js [app-ssr] (ecmascript)");
;
;
class ContextProviderEvent extends Event {
    /**
     *
     * @param context the context which this provider can provide
     * @param contextTarget the original context target of the provider
     */ constructor(context, contextTarget){
        super('context-provider', {
            bubbles: true,
            composed: true
        });
        this.context = context;
        this.contextTarget = contextTarget;
    }
}
class ContextProvider extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$value$2d$notifier$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValueNotifier"] {
    constructor(host, contextOrOptions, initialValue){
        super(contextOrOptions.context !== undefined ? contextOrOptions.initialValue : initialValue);
        this.onContextRequest = (ev)=>{
            // Only call the callback if the context matches.
            if (ev.context !== this.context) {
                return;
            }
            // Also, in case an element is a consumer AND a provider
            // of the same context, we want to avoid the element to self-register.
            const consumerHost = ev.contextTarget ?? ev.composedPath()[0];
            if (consumerHost === this.host) {
                return;
            }
            ev.stopPropagation();
            this.addCallback(ev.callback, consumerHost, ev.subscribe);
        };
        /**
         * When we get a provider request event, that means a child of this element
         * has just woken up. If it's a provider of our context, then we may need to
         * re-parent our subscriptions, because is a more specific provider than us
         * for its subtree.
         */ this.onProviderRequest = (ev)=>{
            // Ignore events when the context doesn't match.
            if (ev.context !== this.context) {
                return;
            }
            // Also, in case an element is a consumer AND a provider
            // of the same context it shouldn't provide to itself.
            const childProviderHost = ev.contextTarget ?? ev.composedPath()[0];
            if (childProviderHost === this.host) {
                return;
            }
            // Re-parent all of our subscriptions in case this new child provider
            // should take them over.
            const seen = new Set();
            for (const [callback, { consumerHost }] of this.subscriptions){
                // Prevent infinite loops in the case where a one host element
                // is providing the same context multiple times.
                //
                // While normally it's a no-op to attempt to re-parent a subscription
                // that already has its proper parent, in the case where there's more
                // than one ValueProvider for the same context on the same hostElement,
                // they will each call the consumer, and since they will each have their
                // own dispose function, a well behaved consumer will notice the change
                // in dispose function and call their old one.
                //
                // This will cause the subscriptions to thrash, but worse, without this
                // set check here, we can end up in an infinite loop, as we add and remove
                // the same subscriptions onto the end of the map over and over.
                if (seen.has(callback)) {
                    continue;
                }
                seen.add(callback);
                consumerHost.dispatchEvent(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$request$2d$event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextRequestEvent"](this.context, consumerHost, callback, true));
            }
            ev.stopPropagation();
        };
        this.host = host;
        if (contextOrOptions.context !== undefined) {
            this.context = contextOrOptions.context;
        } else {
            this.context = contextOrOptions;
        }
        this.attachListeners();
        this.host.addController?.(this);
    }
    attachListeners() {
        this.host.addEventListener('context-request', this.onContextRequest);
        this.host.addEventListener('context-provider', this.onProviderRequest);
    }
    hostConnected() {
        // emit an event to signal a provider is available for this context
        this.host.dispatchEvent(new ContextProviderEvent(this.context, this.host));
    }
} //# sourceMappingURL=context-provider.js.map
}}),
"[project]/node_modules/@lit/context/development/lib/context-root.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "ContextRoot": (()=>ContextRoot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$request$2d$event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/context-request-event.js [app-ssr] (ecmascript)");
;
class ContextRoot {
    constructor(){
        this.pendingContextRequests = new Map();
        this.onContextProvider = (event)=>{
            const pendingRequestData = this.pendingContextRequests.get(event.context);
            if (pendingRequestData === undefined) {
                // No pending requests for this context at this time
                return;
            }
            // Clear our list. Any still unsatisfied requests will re-add themselves
            // when we dispatch the events below.
            this.pendingContextRequests.delete(event.context);
            // Loop over all pending requests and re-dispatch them from their source
            const { requests } = pendingRequestData;
            for (const { elementRef, callbackRef } of requests){
                const element = elementRef.deref();
                const callback = callbackRef.deref();
                if (element === undefined || callback === undefined) {
                // The element was GC'ed. Do nothing.
                } else {
                    // Re-dispatch if we still have the element and callback
                    element.dispatchEvent(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$request$2d$event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextRequestEvent"](event.context, element, callback, true));
                }
            }
        };
        this.onContextRequest = (event)=>{
            // Events that are not subscribing should not be buffered
            if (event.subscribe !== true) {
                return;
            }
            // Note, it's important to use the initial target
            // since that's the requesting element and the event may be re-targeted
            // to an outer host element.
            const element = event.contextTarget ?? event.composedPath()[0];
            const callback = event.callback;
            let pendingContextRequests = this.pendingContextRequests.get(event.context);
            if (pendingContextRequests === undefined) {
                this.pendingContextRequests.set(event.context, pendingContextRequests = {
                    callbacks: new WeakMap(),
                    requests: []
                });
            }
            let callbacks = pendingContextRequests.callbacks.get(element);
            if (callbacks === undefined) {
                pendingContextRequests.callbacks.set(element, callbacks = new WeakSet());
            }
            if (callbacks.has(callback)) {
                // We're already tracking this element/callback pair
                return;
            }
            callbacks.add(callback);
            pendingContextRequests.requests.push({
                elementRef: new WeakRef(element),
                callbackRef: new WeakRef(callback)
            });
        };
    }
    /**
     * Attach the ContextRoot to a given element to intercept `context-request` and
     * `context-provider` events.
     *
     * @param element an element to add event listeners to
     */ attach(element) {
        element.addEventListener('context-request', this.onContextRequest);
        element.addEventListener('context-provider', this.onContextProvider);
    }
    /**
     * Removes the ContextRoot event listeners from a given element.
     *
     * @param element an element from which to remove event listeners
     */ detach(element) {
        element.removeEventListener('context-request', this.onContextRequest);
        element.removeEventListener('context-provider', this.onContextProvider);
    }
} //# sourceMappingURL=context-root.js.map
}}),
"[project]/node_modules/@lit/context/development/lib/decorators/provide.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "provide": (()=>provide)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/controllers/context-provider.js [app-ssr] (ecmascript)");
;
function provide({ context: context }) {
    return (protoOrTarget, nameOrContext)=>{
        // Map of instances to controllers
        const controllerMap = new WeakMap();
        if (typeof nameOrContext === 'object') {
            // Standard decorators branch
            nameOrContext.addInitializer(function() {
                controllerMap.set(this, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextProvider"](this, {
                    context
                }));
            });
            return {
                get () {
                    return protoOrTarget.get.call(this);
                },
                set (value) {
                    controllerMap.get(this)?.setValue(value);
                    return protoOrTarget.set.call(this, value);
                },
                init (value) {
                    controllerMap.get(this)?.setValue(value);
                    return value;
                }
            };
        } else {
            // Experimental decorators branch
            protoOrTarget.constructor.addInitializer((element)=>{
                controllerMap.set(element, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextProvider"](element, {
                    context
                }));
            });
            // proxy any existing setter for this property and use it to
            // notify the controller of an updated value
            const descriptor = Object.getOwnPropertyDescriptor(protoOrTarget, nameOrContext);
            let newDescriptor;
            if (descriptor === undefined) {
                const valueMap = new WeakMap();
                newDescriptor = {
                    get () {
                        return valueMap.get(this);
                    },
                    set (value) {
                        controllerMap.get(this).setValue(value);
                        valueMap.set(this, value);
                    },
                    configurable: true,
                    enumerable: true
                };
            } else {
                const oldSetter = descriptor.set;
                newDescriptor = {
                    ...descriptor,
                    set (value) {
                        controllerMap.get(this).setValue(value);
                        oldSetter?.call(this, value);
                    }
                };
            }
            Object.defineProperty(protoOrTarget, nameOrContext, newDescriptor);
            return;
        }
    };
} //# sourceMappingURL=provide.js.map
}}),
"[project]/node_modules/@lit/context/development/lib/decorators/consume.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "consume": (()=>consume)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$consumer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/controllers/context-consumer.js [app-ssr] (ecmascript)");
;
function consume({ context, subscribe }) {
    return (protoOrTarget, nameOrContext)=>{
        if (typeof nameOrContext === 'object') {
            // Standard decorators branch
            nameOrContext.addInitializer(function() {
                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$consumer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextConsumer"](this, {
                    context,
                    callback: (value)=>{
                        protoOrTarget.set.call(this, value);
                    },
                    subscribe
                });
            });
        } else {
            // Experimental decorators branch
            protoOrTarget.constructor.addInitializer((element)=>{
                new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$consumer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ContextConsumer"](element, {
                    context,
                    callback: (value)=>{
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        element[nameOrContext] = value;
                    },
                    subscribe
                });
            });
        }
    };
} //# sourceMappingURL=consume.js.map
}}),
"[project]/node_modules/@lit/context/development/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({});
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@lit/context/development/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$request$2d$event$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/context-request-event.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$create$2d$context$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/create-context.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$consumer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/controllers/context-consumer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$controllers$2f$context$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/controllers/context-provider.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$context$2d$root$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/context-root.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$decorators$2f$provide$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/decorators/provide.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$lib$2f$decorators$2f$consume$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/lib/decorators/consume.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$context$2f$development$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lit/context/development/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ /**
 * Map of ARIAMixin properties to attributes
 */ __turbopack_esm__({
    "ElementInternals": (()=>ElementInternalsShimWithRealType),
    "ElementInternalsShim": (()=>ElementInternalsShim),
    "HYDRATE_INTERNALS_ATTR_PREFIX": (()=>HYDRATE_INTERNALS_ATTR_PREFIX),
    "ariaMixinAttributes": (()=>ariaMixinAttributes)
});
const ariaMixinAttributes = {
    ariaAtomic: 'aria-atomic',
    ariaAutoComplete: 'aria-autocomplete',
    ariaBrailleLabel: 'aria-braillelabel',
    ariaBrailleRoleDescription: 'aria-brailleroledescription',
    ariaBusy: 'aria-busy',
    ariaChecked: 'aria-checked',
    ariaColCount: 'aria-colcount',
    ariaColIndex: 'aria-colindex',
    ariaColSpan: 'aria-colspan',
    ariaCurrent: 'aria-current',
    ariaDescription: 'aria-description',
    ariaDisabled: 'aria-disabled',
    ariaExpanded: 'aria-expanded',
    ariaHasPopup: 'aria-haspopup',
    ariaHidden: 'aria-hidden',
    ariaInvalid: 'aria-invalid',
    ariaKeyShortcuts: 'aria-keyshortcuts',
    ariaLabel: 'aria-label',
    ariaLevel: 'aria-level',
    ariaLive: 'aria-live',
    ariaModal: 'aria-modal',
    ariaMultiLine: 'aria-multiline',
    ariaMultiSelectable: 'aria-multiselectable',
    ariaOrientation: 'aria-orientation',
    ariaPlaceholder: 'aria-placeholder',
    ariaPosInSet: 'aria-posinset',
    ariaPressed: 'aria-pressed',
    ariaReadOnly: 'aria-readonly',
    ariaRequired: 'aria-required',
    ariaRoleDescription: 'aria-roledescription',
    ariaRowCount: 'aria-rowcount',
    ariaRowIndex: 'aria-rowindex',
    ariaRowSpan: 'aria-rowspan',
    ariaSelected: 'aria-selected',
    ariaSetSize: 'aria-setsize',
    ariaSort: 'aria-sort',
    ariaValueMax: 'aria-valuemax',
    ariaValueMin: 'aria-valuemin',
    ariaValueNow: 'aria-valuenow',
    ariaValueText: 'aria-valuetext',
    role: 'role'
};
const ElementInternalsShim = class ElementInternals {
    get shadowRoot() {
        // Grab the shadow root instance from the Element shim
        // to ensure that the shadow root is always available
        // to the internals instance even if the mode is 'closed'
        return this.__host.__shadowRoot;
    }
    constructor(_host){
        this.ariaAtomic = '';
        this.ariaAutoComplete = '';
        this.ariaBrailleLabel = '';
        this.ariaBrailleRoleDescription = '';
        this.ariaBusy = '';
        this.ariaChecked = '';
        this.ariaColCount = '';
        this.ariaColIndex = '';
        this.ariaColSpan = '';
        this.ariaCurrent = '';
        this.ariaDescription = '';
        this.ariaDisabled = '';
        this.ariaExpanded = '';
        this.ariaHasPopup = '';
        this.ariaHidden = '';
        this.ariaInvalid = '';
        this.ariaKeyShortcuts = '';
        this.ariaLabel = '';
        this.ariaLevel = '';
        this.ariaLive = '';
        this.ariaModal = '';
        this.ariaMultiLine = '';
        this.ariaMultiSelectable = '';
        this.ariaOrientation = '';
        this.ariaPlaceholder = '';
        this.ariaPosInSet = '';
        this.ariaPressed = '';
        this.ariaReadOnly = '';
        this.ariaRequired = '';
        this.ariaRoleDescription = '';
        this.ariaRowCount = '';
        this.ariaRowIndex = '';
        this.ariaRowSpan = '';
        this.ariaSelected = '';
        this.ariaSetSize = '';
        this.ariaSort = '';
        this.ariaValueMax = '';
        this.ariaValueMin = '';
        this.ariaValueNow = '';
        this.ariaValueText = '';
        this.role = '';
        this.form = null;
        this.labels = [];
        this.states = new Set();
        this.validationMessage = '';
        this.validity = {};
        this.willValidate = true;
        this.__host = _host;
    }
    checkValidity() {
        // TODO(augustjk) Consider actually implementing logic.
        // See https://github.com/lit/lit/issues/3740
        console.warn('`ElementInternals.checkValidity()` was called on the server.' + 'This method always returns true.');
        return true;
    }
    reportValidity() {
        return true;
    }
    setFormValue() {}
    setValidity() {}
};
const ElementInternalsShimWithRealType = ElementInternalsShim;
;
const HYDRATE_INTERNALS_ATTR_PREFIX = 'hydrate-internals-'; //# sourceMappingURL=element-internals.js.map
}}),
"[project]/node_modules/@lit-labs/ssr-dom-shim/lib/events.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "CustomEvent": (()=>CustomEventShimWithRealType),
    "CustomEventShim": (()=>CustomEventShimWithRealType),
    "Event": (()=>EventShimWithRealType),
    "EventShim": (()=>EventShimWithRealType),
    "EventTarget": (()=>EventTargetShimWithRealType),
    "EventTargetShim": (()=>EventTargetShimWithRealType)
});
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Event_cancelable, _Event_bubbles, _Event_composed, _Event_defaultPrevented, _Event_timestamp, _Event_propagationStopped, _Event_type, _Event_target, _Event_isBeingDispatched, _a, _CustomEvent_detail, _b;
const isCaptureEventListener = (options)=>typeof options === 'boolean' ? options : options?.capture ?? false;
// Event phases
const NONE = 0;
const CAPTURING_PHASE = 1;
const AT_TARGET = 2;
const BUBBLING_PHASE = 3;
// Shim the global EventTarget object
const EventTargetShim = class EventTarget {
    constructor(){
        this.__eventListeners = new Map();
        this.__captureEventListeners = new Map();
    }
    addEventListener(type, callback, options) {
        if (callback === undefined || callback === null) {
            return;
        }
        const eventListenersMap = isCaptureEventListener(options) ? this.__captureEventListeners : this.__eventListeners;
        let eventListeners = eventListenersMap.get(type);
        if (eventListeners === undefined) {
            eventListeners = new Map();
            eventListenersMap.set(type, eventListeners);
        } else if (eventListeners.has(callback)) {
            return;
        }
        const normalizedOptions = typeof options === 'object' && options ? options : {};
        normalizedOptions.signal?.addEventListener('abort', ()=>this.removeEventListener(type, callback, options));
        eventListeners.set(callback, normalizedOptions ?? {});
    }
    removeEventListener(type, callback, options) {
        if (callback === undefined || callback === null) {
            return;
        }
        const eventListenersMap = isCaptureEventListener(options) ? this.__captureEventListeners : this.__eventListeners;
        const eventListeners = eventListenersMap.get(type);
        if (eventListeners !== undefined) {
            eventListeners.delete(callback);
            if (!eventListeners.size) {
                eventListenersMap.delete(type);
            }
        }
    }
    dispatchEvent(event) {
        const composedPath = [
            this
        ];
        let parent = this.__eventTargetParent;
        if (event.composed) {
            while(parent){
                composedPath.push(parent);
                parent = parent.__eventTargetParent;
            }
        } else {
            // If the event is not composed and the event was dispatched inside
            // shadow DOM, we need to stop before the host of the shadow DOM.
            while(parent && parent !== this.__host){
                composedPath.push(parent);
                parent = parent.__eventTargetParent;
            }
        }
        // We need to patch various properties that would either be empty or wrong
        // in this scenario.
        let stopPropagation = false;
        let stopImmediatePropagation = false;
        let eventPhase = NONE;
        let target = null;
        let tmpTarget = null;
        let currentTarget = null;
        const originalStopPropagation = event.stopPropagation;
        const originalStopImmediatePropagation = event.stopImmediatePropagation;
        Object.defineProperties(event, {
            target: {
                get () {
                    return target ?? tmpTarget;
                },
                ...enumerableProperty
            },
            srcElement: {
                get () {
                    return event.target;
                },
                ...enumerableProperty
            },
            currentTarget: {
                get () {
                    return currentTarget;
                },
                ...enumerableProperty
            },
            eventPhase: {
                get () {
                    return eventPhase;
                },
                ...enumerableProperty
            },
            composedPath: {
                value: ()=>composedPath,
                ...enumerableProperty
            },
            stopPropagation: {
                value: ()=>{
                    stopPropagation = true;
                    originalStopPropagation.call(event);
                },
                ...enumerableProperty
            },
            stopImmediatePropagation: {
                value: ()=>{
                    stopImmediatePropagation = true;
                    originalStopImmediatePropagation.call(event);
                },
                ...enumerableProperty
            }
        });
        // An event handler can either be a function, an object with a handleEvent
        // method or null. This function takes care to call the event handler
        // correctly.
        const invokeEventListener = (listener, options, eventListenerMap)=>{
            if (typeof listener === 'function') {
                listener(event);
            } else if (typeof listener?.handleEvent === 'function') {
                listener.handleEvent(event);
            }
            if (options.once) {
                eventListenerMap.delete(listener);
            }
        };
        // When an event is finished being dispatched, which can be after the event
        // tree has been traversed or stopPropagation/stopImmediatePropagation has
        // been called. Once that is the case, the currentTarget and eventPhase
        // need to be reset and a value, representing whether the event has not
        // been prevented, needs to be returned.
        const finishDispatch = ()=>{
            currentTarget = null;
            eventPhase = NONE;
            return !event.defaultPrevented;
        };
        // An event starts with the capture order, where it starts from the top.
        // This is done even if bubbles is set to false, which is the default.
        const captureEventPath = composedPath.slice().reverse();
        // If the event target, which dispatches the event, is either in the light DOM
        // or the event is not composed, the target is always itself. If that is not
        // the case, the target needs to be retargeted: https://dom.spec.whatwg.org/#retarget
        target = !this.__host || !event.composed ? this : null;
        const retarget = (eventTargets)=>{
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            tmpTarget = this;
            while(tmpTarget.__host && eventTargets.includes(tmpTarget.__host)){
                tmpTarget = tmpTarget.__host;
            }
        };
        for (const eventTarget of captureEventPath){
            if (!target && (!tmpTarget || tmpTarget === eventTarget.__host)) {
                retarget(captureEventPath.slice(captureEventPath.indexOf(eventTarget)));
            }
            currentTarget = eventTarget;
            eventPhase = eventTarget === event.target ? AT_TARGET : CAPTURING_PHASE;
            const captureEventListeners = eventTarget.__captureEventListeners.get(event.type);
            if (captureEventListeners) {
                for (const [listener, options] of captureEventListeners){
                    invokeEventListener(listener, options, captureEventListeners);
                    if (stopImmediatePropagation) {
                        // Event.stopImmediatePropagation() stops any following invocation
                        // of an event handler even on the same event target.
                        return finishDispatch();
                    }
                }
            }
            if (stopPropagation) {
                // Event.stopPropagation() stops any following invocation
                // of an event handler for any following event targets.
                return finishDispatch();
            }
        }
        const bubbleEventPath = event.bubbles ? composedPath : [
            this
        ];
        tmpTarget = null;
        for (const eventTarget of bubbleEventPath){
            if (!target && (!tmpTarget || eventTarget === tmpTarget.__host)) {
                retarget(bubbleEventPath.slice(0, bubbleEventPath.indexOf(eventTarget) + 1));
            }
            currentTarget = eventTarget;
            eventPhase = eventTarget === event.target ? AT_TARGET : BUBBLING_PHASE;
            const captureEventListeners = eventTarget.__eventListeners.get(event.type);
            if (captureEventListeners) {
                for (const [listener, options] of captureEventListeners){
                    invokeEventListener(listener, options, captureEventListeners);
                    if (stopImmediatePropagation) {
                        // Event.stopImmediatePropagation() stops any following invocation
                        // of an event handler even on the same event target.
                        return finishDispatch();
                    }
                }
            }
            if (stopPropagation) {
                // Event.stopPropagation() stops any following invocation
                // of an event handler for any following event targets.
                return finishDispatch();
            }
        }
        return finishDispatch();
    }
};
const EventTargetShimWithRealType = EventTargetShim;
;
const enumerableProperty = {
    __proto__: null
};
enumerableProperty.enumerable = true;
Object.freeze(enumerableProperty);
// TODO: Remove this when we remove support for vm modules (--experimental-vm-modules).
const EventShim = (_a = class Event {
    constructor(type, options = {}){
        _Event_cancelable.set(this, false);
        _Event_bubbles.set(this, false);
        _Event_composed.set(this, false);
        _Event_defaultPrevented.set(this, false);
        _Event_timestamp.set(this, Date.now());
        _Event_propagationStopped.set(this, false);
        _Event_type.set(this, void 0);
        _Event_target.set(this, void 0);
        _Event_isBeingDispatched.set(this, void 0);
        this.NONE = NONE;
        this.CAPTURING_PHASE = CAPTURING_PHASE;
        this.AT_TARGET = AT_TARGET;
        this.BUBBLING_PHASE = BUBBLING_PHASE;
        if (arguments.length === 0) throw new Error(`The type argument must be specified`);
        if (typeof options !== 'object' || !options) {
            throw new Error(`The "options" argument must be an object`);
        }
        const { bubbles, cancelable, composed } = options;
        __classPrivateFieldSet(this, _Event_cancelable, !!cancelable, "f");
        __classPrivateFieldSet(this, _Event_bubbles, !!bubbles, "f");
        __classPrivateFieldSet(this, _Event_composed, !!composed, "f");
        __classPrivateFieldSet(this, _Event_type, `${type}`, "f");
        __classPrivateFieldSet(this, _Event_target, null, "f");
        __classPrivateFieldSet(this, _Event_isBeingDispatched, false, "f");
    }
    initEvent(_type, _bubbles, _cancelable) {
        throw new Error('Method not implemented.');
    }
    stopImmediatePropagation() {
        this.stopPropagation();
    }
    preventDefault() {
        __classPrivateFieldSet(this, _Event_defaultPrevented, true, "f");
    }
    get target() {
        return __classPrivateFieldGet(this, _Event_target, "f");
    }
    get currentTarget() {
        return __classPrivateFieldGet(this, _Event_target, "f");
    }
    get srcElement() {
        return __classPrivateFieldGet(this, _Event_target, "f");
    }
    get type() {
        return __classPrivateFieldGet(this, _Event_type, "f");
    }
    get cancelable() {
        return __classPrivateFieldGet(this, _Event_cancelable, "f");
    }
    get defaultPrevented() {
        return __classPrivateFieldGet(this, _Event_cancelable, "f") && __classPrivateFieldGet(this, _Event_defaultPrevented, "f");
    }
    get timeStamp() {
        return __classPrivateFieldGet(this, _Event_timestamp, "f");
    }
    composedPath() {
        return __classPrivateFieldGet(this, _Event_isBeingDispatched, "f") ? [
            __classPrivateFieldGet(this, _Event_target, "f")
        ] : [];
    }
    get returnValue() {
        return !__classPrivateFieldGet(this, _Event_cancelable, "f") || !__classPrivateFieldGet(this, _Event_defaultPrevented, "f");
    }
    get bubbles() {
        return __classPrivateFieldGet(this, _Event_bubbles, "f");
    }
    get composed() {
        return __classPrivateFieldGet(this, _Event_composed, "f");
    }
    get eventPhase() {
        return __classPrivateFieldGet(this, _Event_isBeingDispatched, "f") ? _a.AT_TARGET : _a.NONE;
    }
    get cancelBubble() {
        return __classPrivateFieldGet(this, _Event_propagationStopped, "f");
    }
    set cancelBubble(value) {
        if (value) {
            __classPrivateFieldSet(this, _Event_propagationStopped, true, "f");
        }
    }
    stopPropagation() {
        __classPrivateFieldSet(this, _Event_propagationStopped, true, "f");
    }
    get isTrusted() {
        return false;
    }
}, _Event_cancelable = new WeakMap(), _Event_bubbles = new WeakMap(), _Event_composed = new WeakMap(), _Event_defaultPrevented = new WeakMap(), _Event_timestamp = new WeakMap(), _Event_propagationStopped = new WeakMap(), _Event_type = new WeakMap(), _Event_target = new WeakMap(), _Event_isBeingDispatched = new WeakMap(), _a.NONE = NONE, _a.CAPTURING_PHASE = CAPTURING_PHASE, _a.AT_TARGET = AT_TARGET, _a.BUBBLING_PHASE = BUBBLING_PHASE, _a);
Object.defineProperties(EventShim.prototype, {
    initEvent: enumerableProperty,
    stopImmediatePropagation: enumerableProperty,
    preventDefault: enumerableProperty,
    target: enumerableProperty,
    currentTarget: enumerableProperty,
    srcElement: enumerableProperty,
    type: enumerableProperty,
    cancelable: enumerableProperty,
    defaultPrevented: enumerableProperty,
    timeStamp: enumerableProperty,
    composedPath: enumerableProperty,
    returnValue: enumerableProperty,
    bubbles: enumerableProperty,
    composed: enumerableProperty,
    eventPhase: enumerableProperty,
    cancelBubble: enumerableProperty,
    stopPropagation: enumerableProperty,
    isTrusted: enumerableProperty
});
// TODO: Remove this when we remove support for vm modules (--experimental-vm-modules).
const CustomEventShim = (_b = class CustomEvent extends EventShim {
    constructor(type, options = {}){
        super(type, options);
        _CustomEvent_detail.set(this, void 0);
        __classPrivateFieldSet(this, _CustomEvent_detail, options?.detail ?? null, "f");
    }
    initCustomEvent(_type, _bubbles, _cancelable, _detail) {
        throw new Error('Method not implemented.');
    }
    get detail() {
        return __classPrivateFieldGet(this, _CustomEvent_detail, "f");
    }
}, _CustomEvent_detail = new WeakMap(), _b);
Object.defineProperties(CustomEventShim.prototype, {
    detail: enumerableProperty
});
const EventShimWithRealType = EventShim;
const CustomEventShimWithRealType = CustomEventShim;
;
 //# sourceMappingURL=events.js.map
}}),
"[project]/node_modules/@lit-labs/ssr-dom-shim/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "CustomElementRegistry": (()=>CustomElementRegistryShimWithRealType),
    "Element": (()=>ElementShimWithRealType),
    "HTMLElement": (()=>HTMLElementShimWithRealType),
    "customElements": (()=>customElements)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit-labs/ssr-dom-shim/lib/events.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$element$2d$internals$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js [app-ssr] (ecmascript)");
;
;
;
;
// In an empty Node.js vm, we need to patch the global context.
// TODO: Remove these globalThis assignments when we remove support
// for vm modules (--experimental-vm-modules).
globalThis.Event ??= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventShim"];
globalThis.CustomEvent ??= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CustomEventShim"];
const attributes = new WeakMap();
const attributesForElement = (element)=>{
    let attrs = attributes.get(element);
    if (attrs === undefined) {
        attributes.set(element, attrs = new Map());
    }
    return attrs;
};
// The typings around the exports below are a little funky:
//
// 1. We want the `name` of the shim classes to match the real ones at runtime,
//    hence e.g. `class Element`.
// 2. We can't shadow the global types with a simple class declaration, because
//    then we can't reference the global types for casting, hence e.g.
//    `const ElementShim = class Element`.
// 3. We want to export the classes typed as the real ones, hence e.g.
//    `const ElementShimWithRealType = ElementShim as object as typeof Element;`.
// 4. We want the exported names to match the real ones, hence e.g.
//    `export {ElementShimWithRealType as Element}`.
const ElementShim = class Element extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EventTargetShim"] {
    constructor(){
        super(...arguments);
        this.__shadowRootMode = null;
        this.__shadowRoot = null;
        this.__internals = null;
    }
    get attributes() {
        return Array.from(attributesForElement(this)).map(([name, value])=>({
                name,
                value
            }));
    }
    get shadowRoot() {
        if (this.__shadowRootMode === 'closed') {
            return null;
        }
        return this.__shadowRoot;
    }
    get localName() {
        return this.constructor.__localName;
    }
    get tagName() {
        return this.localName?.toUpperCase();
    }
    setAttribute(name, value) {
        // Emulate browser behavior that silently casts all values to string. E.g.
        // `42` becomes `"42"` and `{}` becomes `"[object Object]""`.
        attributesForElement(this).set(name, String(value));
    }
    removeAttribute(name) {
        attributesForElement(this).delete(name);
    }
    toggleAttribute(name, force) {
        // Steps reference https://dom.spec.whatwg.org/#dom-element-toggleattribute
        if (this.hasAttribute(name)) {
            // Step 5
            if (force === undefined || !force) {
                this.removeAttribute(name);
                return false;
            }
        } else {
            // Step 4
            if (force === undefined || force) {
                // Step 4.1
                this.setAttribute(name, '');
                return true;
            } else {
                // Step 4.2
                return false;
            }
        }
        // Step 6
        return true;
    }
    hasAttribute(name) {
        return attributesForElement(this).has(name);
    }
    attachShadow(init) {
        const shadowRoot = {
            host: this
        };
        this.__shadowRootMode = init.mode;
        if (init && init.mode === 'open') {
            this.__shadowRoot = shadowRoot;
        }
        return shadowRoot;
    }
    attachInternals() {
        if (this.__internals !== null) {
            throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': ` + `ElementInternals for the specified element was already attached.`);
        }
        const internals = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$element$2d$internals$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ElementInternalsShim"](this);
        this.__internals = internals;
        return internals;
    }
    getAttribute(name) {
        const value = attributesForElement(this).get(name);
        return value ?? null;
    }
};
const ElementShimWithRealType = ElementShim;
;
const HTMLElementShim = class HTMLElement extends ElementShim {
};
const HTMLElementShimWithRealType = HTMLElementShim;
;
// For convenience, we provide a global instance of a HTMLElement as an event
// target. This facilitates registering global event handlers
// (e.g. for @lit/context ContextProvider).
// We use this in in the SSR render function.
// Note, this is a bespoke element and not simply `document` or `window` since
// user code relies on these being undefined in the server environment.
globalThis.litServerRoot ??= Object.defineProperty(new HTMLElementShimWithRealType(), 'localName', {
    // Patch localName (and tagName) to return a unique name.
    get () {
        return 'lit-server-root';
    }
});
const CustomElementRegistryShim = class CustomElementRegistry {
    constructor(){
        this.__definitions = new Map();
    }
    define(name, ctor) {
        if (this.__definitions.has(name)) {
            if ("TURBOPACK compile-time truthy", 1) {
                console.warn(`'CustomElementRegistry' already has "${name}" defined. ` + `This may have been caused by live reload or hot module ` + `replacement in which case it can be safely ignored.\n` + `Make sure to test your application with a production build as ` + `repeat registrations will throw in production.`);
            } else {
                "TURBOPACK unreachable";
            }
        }
        // Provide tagName and localName for the component.
        ctor.__localName = name;
        this.__definitions.set(name, {
            ctor,
            // Note it's important we read `observedAttributes` in case it is a getter
            // with side-effects, as is the case in Lit, where it triggers class
            // finalization.
            //
            // TODO(aomarks) To be spec compliant, we should also capture the
            // registration-time lifecycle methods like `connectedCallback`. For them
            // to be actually accessible to e.g. the Lit SSR element renderer, though,
            // we'd need to introduce a new API for accessing them (since `get` only
            // returns the constructor).
            observedAttributes: ctor.observedAttributes ?? []
        });
    }
    get(name) {
        const definition = this.__definitions.get(name);
        return definition?.ctor;
    }
};
const CustomElementRegistryShimWithRealType = CustomElementRegistryShim;
;
const customElements = new CustomElementRegistryShimWithRealType(); //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@lit-labs/ssr-dom-shim/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$element$2d$internals$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$lib$2f$events$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit-labs/ssr-dom-shim/lib/events.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lit-labs/ssr-dom-shim/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/@lit/reactive-element/node/development/css-tag.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ // Allows minifiers to rename references to globalThis
__turbopack_esm__({
    "CSSResult": (()=>CSSResult),
    "adoptStyles": (()=>adoptStyles),
    "css": (()=>css),
    "getCompatibleStyle": (()=>getCompatibleStyle),
    "supportsAdoptingStyleSheets": (()=>supportsAdoptingStyleSheets),
    "unsafeCSS": (()=>unsafeCSS)
});
const global = globalThis;
/**
 * Whether the current browser supports `adoptedStyleSheets`.
 */ const supportsAdoptingStyleSheets = global.ShadowRoot && (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;
const constructionToken = Symbol();
const cssTagCache = new WeakMap();
/**
 * A container for a string of CSS text, that may be used to create a CSSStyleSheet.
 *
 * CSSResult is the return value of `css`-tagged template literals and
 * `unsafeCSS()`. In order to ensure that CSSResults are only created via the
 * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.
 */ class CSSResult {
    constructor(cssText, strings, safeToken){
        // This property needs to remain unminified.
        this['_$cssResult$'] = true;
        if (safeToken !== constructionToken) {
            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
        }
        this.cssText = cssText;
        this._strings = strings;
    }
    // This is a getter so that it's lazy. In practice, this means stylesheets
    // are not created until the first element instance is made.
    get styleSheet() {
        // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is
        // constructable.
        let styleSheet = this._styleSheet;
        const strings = this._strings;
        if (supportsAdoptingStyleSheets && styleSheet === undefined) {
            const cacheable = strings !== undefined && strings.length === 1;
            if (cacheable) {
                styleSheet = cssTagCache.get(strings);
            }
            if (styleSheet === undefined) {
                (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);
                if (cacheable) {
                    cssTagCache.set(strings, styleSheet);
                }
            }
        }
        return styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
const textFromCSSResult = (value)=>{
    // This property needs to remain unminified.
    if (value['_$cssResult$'] === true) {
        return value.cssText;
    } else if (typeof value === 'number') {
        return value;
    } else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ` + `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` + `to ensure page security.`);
    }
};
/**
 * Wrap a value for interpolation in a {@linkcode css} tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */ const unsafeCSS = (value)=>new CSSResult(typeof value === 'string' ? value : String(value), undefined, constructionToken);
/**
 * A template literal tag which can be used with LitElement's
 * {@linkcode LitElement.styles} property to set element styles.
 *
 * For security reasons, only literal string values and number may be used in
 * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}
 * may be used inside an expression.
 */ const css = (strings, ...values)=>{
    const cssText = strings.length === 1 ? strings[0] : values.reduce((acc, v, idx)=>acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, strings, constructionToken);
};
/**
 * Applies the given styles to a `shadowRoot`. When Shadow DOM is
 * available but `adoptedStyleSheets` is not, styles are appended to the
 * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
 * Note, when shimming is used, any styles that are subsequently placed into
 * the shadowRoot should be placed *before* any shimmed adopted styles. This
 * will match spec behavior that gives adopted sheets precedence over styles in
 * shadowRoot.
 */ const adoptStyles = (renderRoot, styles)=>{
    if (supportsAdoptingStyleSheets) {
        renderRoot.adoptedStyleSheets = styles.map((s)=>s instanceof CSSStyleSheet ? s : s.styleSheet);
    } else {
        for (const s of styles){
            const style = document.createElement('style');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const nonce = global['litNonce'];
            if (nonce !== undefined) {
                style.setAttribute('nonce', nonce);
            }
            style.textContent = s.cssText;
            renderRoot.appendChild(style);
        }
    }
};
const cssResultFromStyleSheet = (sheet)=>{
    let cssText = '';
    for (const rule of sheet.cssRules){
        cssText += rule.cssText;
    }
    return unsafeCSS(cssText);
};
const getCompatibleStyle = supportsAdoptingStyleSheets || global.CSSStyleSheet === undefined ? (s)=>s : (s)=>s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;
;
 //# sourceMappingURL=css-tag.js.map
}}),
"[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ReactiveElement": (()=>ReactiveElement),
    "defaultConverter": (()=>defaultConverter),
    "notEqual": (()=>notEqual)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lit-labs/ssr-dom-shim/index.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$css$2d$tag$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/css-tag.js [app-ssr] (ecmascript)");
;
;
;
// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022
const { is, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, getPrototypeOf } = Object;
// Lets a minifier replace globalThis references with a minified name
const global = globalThis;
{
    global.customElements ??= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["customElements"];
}let issueWarning;
const trustedTypes = global.trustedTypes;
// Temporary workaround for https://crbug.com/993268
// Currently, any attribute starting with "on" is considered to be a
// TrustedScript source. Such boolean attributes must be set to the equivalent
// trusted emptyScript value.
const emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : '';
const polyfillSupport = global.reactiveElementPolyfillSupportDevMode;
{
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = global.litIssuedWarnings ??= new Set();
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning)=>{
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
    // Issue polyfill support warning.
    if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {
        issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \`ShadyDOM\` but ` + `the \`polyfill-support\` module has not been loaded.`);
    }
}/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */ const debugLogEvent = (event)=>{
    const shouldEmit = global.emitLitDebugLogEvents;
    if (!shouldEmit) {
        return;
    }
    global.dispatchEvent(new CustomEvent('lit-debug', {
        detail: event
    }));
};
/*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */ /*@__INLINE__*/ const JSCompiler_renameProperty = (prop, _obj)=>prop;
const defaultConverter = {
    toAttribute (value, type) {
        switch(type){
            case Boolean:
                value = value ? emptyStringForBooleanAttribute : null;
                break;
            case Object:
            case Array:
                // if the value is `null` or `undefined` pass this through
                // to allow removing/no change behavior.
                value = value == null ? value : JSON.stringify(value);
                break;
        }
        return value;
    },
    fromAttribute (value, type) {
        let fromValue = value;
        switch(type){
            case Boolean:
                fromValue = value !== null;
                break;
            case Number:
                fromValue = value === null ? null : Number(value);
                break;
            case Object:
            case Array:
                // Do *not* generate exception when invalid JSON is set as elements
                // don't normally complain on being mis-configured.
                // TODO(sorvell): Do generate exception in *dev mode*.
                try {
                    // Assert to adhere to Bazel's "must type assert JSON parse" rule.
                    fromValue = JSON.parse(value);
                } catch (e) {
                    fromValue = null;
                }
                break;
        }
        return fromValue;
    }
};
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */ const notEqual = (value, old)=>!is(value, old);
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual
};
// Ensure metadata is enabled. TypeScript does not polyfill
// Symbol.metadata, so we must ensure that it exists.
Symbol.metadata ??= Symbol('metadata');
// Map from a class's metadata object to property options
// Note that we must use nullish-coalescing assignment so that we only use one
// map even if we load multiple version of this module.
global.litPropertyMetadata ??= new WeakMap();
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclasses to render updates as desired.
 * @noInheritDoc
 */ class ReactiveElement extends (globalThis.HTMLElement ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["HTMLElement"]) {
    /**
     * Adds an initializer function to the class that is called during instance
     * construction.
     *
     * This is useful for code that runs against a `ReactiveElement`
     * subclass, such as a decorator, that needs to do work for each
     * instance, such as setting up a `ReactiveController`.
     *
     * ```ts
     * const myDecorator = (target: typeof ReactiveElement, key: string) => {
     *   target.addInitializer((instance: ReactiveElement) => {
     *     // This is run during construction of the element
     *     new MyController(instance);
     *   });
     * }
     * ```
     *
     * Decorating a field will then cause each instance to run an initializer
     * that adds a controller:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   @myDecorator foo;
     * }
     * ```
     *
     * Initializers are stored per-constructor. Adding an initializer to a
     * subclass does not add it to a superclass. Since initializers are run in
     * constructors, initializers will run in order of the class hierarchy,
     * starting with superclasses and progressing to the instance's class.
     *
     * @nocollapse
     */ static addInitializer(initializer) {
        this.__prepare();
        (this._initializers ??= []).push(initializer);
    }
    /**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     * @category attributes
     */ static get observedAttributes() {
        // Ensure we've created all properties
        this.finalize();
        // this.__attributeToPropertyMap is only undefined after finalize() in
        // ReactiveElement itself. ReactiveElement.observedAttributes is only
        // accessed with ReactiveElement as the receiver when a subclass or mixin
        // calls super.observedAttributes
        return this.__attributeToPropertyMap && [
            ...this.__attributeToPropertyMap.keys()
        ];
    }
    /**
     * Creates a property accessor on the element prototype if one does not exist
     * and stores a {@linkcode PropertyDeclaration} for the property with the
     * given options. The property setter calls the property's `hasChanged`
     * property option or uses a strict identity check to determine whether or not
     * to request an update.
     *
     * This method may be overridden to customize properties; however,
     * when doing so, it's important to call `super.createProperty` to ensure
     * the property is setup correctly. This method calls
     * `getPropertyDescriptor` internally to get a descriptor to install.
     * To customize what properties do when they are get or set, override
     * `getPropertyDescriptor`. To customize the options for a property,
     * implement `createProperty` like this:
     *
     * ```ts
     * static createProperty(name, options) {
     *   options = Object.assign(options, {myOption: true});
     *   super.createProperty(name, options);
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */ static createProperty(name, options = defaultPropertyDeclaration) {
        // If this is a state property, force the attribute to false.
        if (options.state) {
            options.attribute = false;
        }
        this.__prepare();
        this.elementProperties.set(name, options);
        if (!options.noAccessor) {
            const key = // when doing HMR.
            Symbol.for(`${String(name)} (@property() cache)`);
            const descriptor = this.getPropertyDescriptor(name, key, options);
            if (descriptor !== undefined) {
                defineProperty(this.prototype, name, descriptor);
            }
        }
    }
    /**
     * Returns a property descriptor to be defined on the given named property.
     * If no descriptor is returned, the property will not become an accessor.
     * For example,
     *
     * ```ts
     * class MyElement extends LitElement {
     *   static getPropertyDescriptor(name, key, options) {
     *     const defaultDescriptor =
     *         super.getPropertyDescriptor(name, key, options);
     *     const setter = defaultDescriptor.set;
     *     return {
     *       get: defaultDescriptor.get,
     *       set(value) {
     *         setter.call(this, value);
     *         // custom action.
     *       },
     *       configurable: true,
     *       enumerable: true
     *     }
     *   }
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */ static getPropertyDescriptor(name, key, options) {
        const { get, set } = getOwnPropertyDescriptor(this.prototype, name) ?? {
            get () {
                return this[key];
            },
            set (v) {
                this[key] = v;
            }
        };
        if (get == null) {
            if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {
                throw new Error(`Field ${JSON.stringify(String(name))} on ` + `${this.name} was declared as a reactive property ` + `but it's actually declared as a value on the prototype. ` + `Usually this is due to using @property or @state on a method.`);
            }
            issueWarning('reactive-property-without-getter', `Field ${JSON.stringify(String(name))} on ` + `${this.name} was declared as a reactive property ` + `but it does not have a getter. This will be an error in a ` + `future version of Lit.`);
        }
        return {
            get () {
                return get?.call(this);
            },
            set (value) {
                const oldValue = get?.call(this);
                set.call(this, value);
                this.requestUpdate(name, oldValue, options);
            },
            configurable: true,
            enumerable: true
        };
    }
    /**
     * Returns the property options associated with the given property.
     * These options are defined with a `PropertyDeclaration` via the `properties`
     * object or the `@property` decorator and are registered in
     * `createProperty(...)`.
     *
     * Note, this method should be considered "final" and not overridden. To
     * customize the options for a given property, override
     * {@linkcode createProperty}.
     *
     * @nocollapse
     * @final
     * @category properties
     */ static getPropertyOptions(name) {
        return this.elementProperties.get(name) ?? defaultPropertyDeclaration;
    }
    /**
     * Initializes static own properties of the class used in bookkeeping
     * for element properties, initializers, etc.
     *
     * Can be called multiple times by code that needs to ensure these
     * properties exist before using them.
     *
     * This method ensures the superclass is finalized so that inherited
     * property metadata can be copied down.
     * @nocollapse
     */ static __prepare() {
        if (this.hasOwnProperty(JSCompiler_renameProperty('elementProperties'))) {
            // Already prepared
            return;
        }
        // Finalize any superclasses
        const superCtor = getPrototypeOf(this);
        superCtor.finalize();
        // Create own set of initializers for this class if any exist on the
        // superclass and copy them down. Note, for a small perf boost, avoid
        // creating initializers unless needed.
        if (superCtor._initializers !== undefined) {
            this._initializers = [
                ...superCtor._initializers
            ];
        }
        // Initialize elementProperties from the superclass
        this.elementProperties = new Map(superCtor.elementProperties);
    }
    /**
     * Finishes setting up the class so that it's ready to be registered
     * as a custom element and instantiated.
     *
     * This method is called by the ReactiveElement.observedAttributes getter.
     * If you override the observedAttributes getter, you must either call
     * super.observedAttributes to trigger finalization, or call finalize()
     * yourself.
     *
     * @nocollapse
     */ static finalize() {
        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized'))) {
            return;
        }
        this.finalized = true;
        this.__prepare();
        // Create properties from the static properties block:
        if (this.hasOwnProperty(JSCompiler_renameProperty('properties'))) {
            const props = this.properties;
            const propKeys = [
                ...getOwnPropertyNames(props),
                ...getOwnPropertySymbols(props)
            ];
            for (const p of propKeys){
                this.createProperty(p, props[p]);
            }
        }
        // Create properties from standard decorator metadata:
        const metadata = this[Symbol.metadata];
        if (metadata !== null) {
            const properties = litPropertyMetadata.get(metadata);
            if (properties !== undefined) {
                for (const [p, options] of properties){
                    this.elementProperties.set(p, options);
                }
            }
        }
        // Create the attribute-to-property map
        this.__attributeToPropertyMap = new Map();
        for (const [p, options] of this.elementProperties){
            const attr = this.__attributeNameForProperty(p, options);
            if (attr !== undefined) {
                this.__attributeToPropertyMap.set(attr, p);
            }
        }
        this.elementStyles = this.finalizeStyles(this.styles);
        {
            if (this.hasOwnProperty('createProperty')) {
                issueWarning('no-override-create-property', 'Overriding ReactiveElement.createProperty() is deprecated. ' + 'The override will not be called with standard decorators');
            }
            if (this.hasOwnProperty('getPropertyDescriptor')) {
                issueWarning('no-override-get-property-descriptor', 'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' + 'The override will not be called with standard decorators');
            }
        }
    }
    /**
     * Takes the styles the user supplied via the `static styles` property and
     * returns the array of styles to apply to the element.
     * Override this method to integrate into a style management system.
     *
     * Styles are deduplicated preserving the _last_ instance in the list. This
     * is a performance optimization to avoid duplicated styles that can occur
     * especially when composing via subclassing. The last item is kept to try
     * to preserve the cascade order with the assumption that it's most important
     * that last added styles override previous styles.
     *
     * @nocollapse
     * @category styles
     */ static finalizeStyles(styles) {
        const elementStyles = [];
        if (Array.isArray(styles)) {
            // Dedupe the flattened array in reverse order to preserve the last items.
            // Casting to Array<unknown> works around TS error that
            // appears to come from trying to flatten a type CSSResultArray.
            const set = new Set(styles.flat(Infinity).reverse());
            // Then preserve original order by adding the set items in reverse order.
            for (const s of set){
                elementStyles.unshift((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$css$2d$tag$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getCompatibleStyle"])(s));
            }
        } else if (styles !== undefined) {
            elementStyles.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$css$2d$tag$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getCompatibleStyle"])(styles));
        }
        return elementStyles;
    }
    /**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */ static __attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;
    }
    constructor(){
        super();
        this.__instanceProperties = undefined;
        /**
         * True if there is a pending update as a result of calling `requestUpdate()`.
         * Should only be read.
         * @category updates
         */ this.isUpdatePending = false;
        /**
         * Is set to `true` after the first update. The element code cannot assume
         * that `renderRoot` exists before the element `hasUpdated`.
         * @category updates
         */ this.hasUpdated = false;
        /**
         * Name of currently reflecting property
         */ this.__reflectingProperty = null;
        this.__initialize();
    }
    /**
     * Internal only override point for customizing work done when elements
     * are constructed.
     */ __initialize() {
        this.__updatePromise = new Promise((res)=>this.enableUpdating = res);
        this._$changedProperties = new Map();
        // This enqueues a microtask that ust run before the first update, so it
        // must be called before requestUpdate()
        this.__saveInstanceProperties();
        // ensures first update will be caught by an early access of
        // `updateComplete`
        this.requestUpdate();
        this.constructor._initializers?.forEach((i)=>i(this));
    }
    /**
     * Registers a `ReactiveController` to participate in the element's reactive
     * update cycle. The element automatically calls into any registered
     * controllers during its lifecycle callbacks.
     *
     * If the element is connected when `addController()` is called, the
     * controller's `hostConnected()` callback will be immediately called.
     * @category controllers
     */ addController(controller) {
        (this.__controllers ??= new Set()).add(controller);
        // If a controller is added after the element has been connected,
        // call hostConnected. Note, re-using existence of `renderRoot` here
        // (which is set in connectedCallback) to avoid the need to track a
        // first connected state.
        if (this.renderRoot !== undefined && this.isConnected) {
            controller.hostConnected?.();
        }
    }
    /**
     * Removes a `ReactiveController` from the element.
     * @category controllers
     */ removeController(controller) {
        this.__controllers?.delete(controller);
    }
    /**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */ __saveInstanceProperties() {
        const instanceProperties = new Map();
        const elementProperties = this.constructor.elementProperties;
        for (const p of elementProperties.keys()){
            if (this.hasOwnProperty(p)) {
                instanceProperties.set(p, this[p]);
                delete this[p];
            }
        }
        if (instanceProperties.size > 0) {
            this.__instanceProperties = instanceProperties;
        }
    }
    /**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     *
     * @return Returns a node into which to render.
     * @category rendering
     */ createRenderRoot() {
        const renderRoot = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$css$2d$tag$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["adoptStyles"])(renderRoot, this.constructor.elementStyles);
        return renderRoot;
    }
    /**
     * On first connection, creates the element's renderRoot, sets up
     * element styling, and enables updating.
     * @category lifecycle
     */ connectedCallback() {
        // Create renderRoot before controllers `hostConnected`
        this.renderRoot ??= this.createRenderRoot();
        this.enableUpdating(true);
        this.__controllers?.forEach((c)=>c.hostConnected?.());
    }
    /**
     * Note, this method should be considered final and not overridden. It is
     * overridden on the element instance with a function that triggers the first
     * update.
     * @category updates
     */ enableUpdating(_requestedUpdate) {}
    /**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     * @category lifecycle
     */ disconnectedCallback() {
        this.__controllers?.forEach((c)=>c.hostDisconnected?.());
    }
    /**
     * Synchronizes property values when attributes change.
     *
     * Specifically, when an attribute is set, the corresponding property is set.
     * You should rarely need to implement this callback. If this method is
     * overridden, `super.attributeChangedCallback(name, _old, value)` must be
     * called.
     *
     * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)
     * on MDN for more information about the `attributeChangedCallback`.
     * @category attributes
     */ attributeChangedCallback(name, _old, value) {
        this._$attributeToProperty(name, value);
    }
    __propertyToAttribute(name, value) {
        const elemProperties = this.constructor.elementProperties;
        const options = elemProperties.get(name);
        const attr = this.constructor.__attributeNameForProperty(name, options);
        if (attr !== undefined && options.reflect === true) {
            const converter = options.converter?.toAttribute !== undefined ? options.converter : defaultConverter;
            const attrValue = converter.toAttribute(value, options.type);
            if (this.constructor.enabledWarnings.includes('migration') && attrValue === undefined) {
                issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` + `undefined on element ${this.localName}. The attribute will be ` + `removed, but in the previous version of \`ReactiveElement\`, ` + `the attribute would not have changed.`);
            }
            // Track if the property is being reflected to avoid
            // setting the property again via `attributeChangedCallback`. Note:
            // 1. this takes advantage of the fact that the callback is synchronous.
            // 2. will behave incorrectly if multiple attributes are in the reaction
            // stack at time of calling. However, since we process attributes
            // in `update` this should not be possible (or an extreme corner case
            // that we'd like to discover).
            // mark state reflecting
            this.__reflectingProperty = name;
            if (attrValue == null) {
                this.removeAttribute(attr);
            } else {
                this.setAttribute(attr, attrValue);
            }
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /** @internal */ _$attributeToProperty(name, value) {
        const ctor = this.constructor;
        // Note, hint this as an `AttributeMap` so closure clearly understands
        // the type; it has issues with tracking types through statics
        const propName = ctor.__attributeToPropertyMap.get(name);
        // Use tracking info to avoid reflecting a property value to an attribute
        // if it was just set because the attribute changed.
        if (propName !== undefined && this.__reflectingProperty !== propName) {
            const options = ctor.getPropertyOptions(propName);
            const converter = typeof options.converter === 'function' ? {
                fromAttribute: options.converter
            } : options.converter?.fromAttribute !== undefined ? options.converter : defaultConverter;
            // mark state reflecting
            this.__reflectingProperty = propName;
            this[propName] = converter.fromAttribute(value, options.type);
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /**
     * Requests an update which is processed asynchronously. This should be called
     * when an element should update based on some state not triggered by setting
     * a reactive property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored.
     *
     * @param name name of requesting property
     * @param oldValue old value of requesting property
     * @param options property options to use instead of the previously
     *     configured options
     * @category updates
     */ requestUpdate(name, oldValue, options) {
        // If we have a property key, perform property update steps.
        if (name !== undefined) {
            if (name instanceof Event) {
                issueWarning(``, `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`);
            }
            options ??= this.constructor.getPropertyOptions(name);
            const hasChanged = options.hasChanged ?? notEqual;
            const newValue = this[name];
            if (hasChanged(newValue, oldValue)) {
                this._$changeProperty(name, oldValue, options);
            } else {
                // Abort the request if the property should not be considered changed.
                return;
            }
        }
        if (this.isUpdatePending === false) {
            this.__updatePromise = this.__enqueueUpdate();
        }
    }
    /**
     * @internal
     */ _$changeProperty(name, oldValue, options) {
        // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(
        // vs just Map.set()
        if (!this._$changedProperties.has(name)) {
            this._$changedProperties.set(name, oldValue);
        }
        // Add to reflecting properties set.
        // Note, it's important that every change has a chance to add the
        // property to `__reflectingProperties`. This ensures setting
        // attribute + property reflects correctly.
        if (options.reflect === true && this.__reflectingProperty !== name) {
            (this.__reflectingProperties ??= new Set()).add(name);
        }
    }
    /**
     * Sets up the element to asynchronously update.
     */ async __enqueueUpdate() {
        this.isUpdatePending = true;
        try {
            // Ensure any previous update has resolved before updating.
            // This `await` also ensures that property changes are batched.
            await this.__updatePromise;
        } catch (e) {
            // Refire any previous errors async so they do not disrupt the update
            // cycle. Errors are refired so developers have a chance to observe
            // them, and this can be done by implementing
            // `window.onunhandledrejection`.
            Promise.reject(e);
        }
        const result = this.scheduleUpdate();
        // If `scheduleUpdate` returns a Promise, we await it. This is done to
        // enable coordinating updates with a scheduler. Note, the result is
        // checked to avoid delaying an additional microtask unless we need to.
        if (result != null) {
            await result;
        }
        return !this.isUpdatePending;
    }
    /**
     * Schedules an element update. You can override this method to change the
     * timing of updates by returning a Promise. The update will await the
     * returned Promise, and you should resolve the Promise to allow the update
     * to proceed. If this method is overridden, `super.scheduleUpdate()`
     * must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```ts
     * override protected async scheduleUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.scheduleUpdate();
     * }
     * ```
     * @category updates
     */ scheduleUpdate() {
        const result = this.performUpdate();
        if (this.constructor.enabledWarnings.includes('async-perform-update') && typeof result?.then === 'function') {
            issueWarning('async-perform-update', `Element ${this.localName} returned a Promise from performUpdate(). ` + `This behavior is deprecated and will be removed in a future ` + `version of ReactiveElement.`);
        }
        return result;
    }
    /**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * Call `performUpdate()` to immediately process a pending update. This should
     * generally not be needed, but it can be done in rare cases when you need to
     * update synchronously.
     *
     * @category updates
     */ performUpdate() {
        // Abort any update if one is not pending when this is called.
        // This can happen if `performUpdate` is called early to "flush"
        // the update.
        if (!this.isUpdatePending) {
            return;
        }
        debugLogEvent?.({
            kind: 'update'
        });
        if (!this.hasUpdated) {
            // Create renderRoot before first update. This occurs in `connectedCallback`
            // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.
            this.renderRoot ??= this.createRenderRoot();
            {
                // Produce warning if any reactive properties on the prototype are
                // shadowed by class fields. Instance fields set before upgrade are
                // deleted by this point, so any own property is caused by class field
                // initialization in the constructor.
                const ctor = this.constructor;
                const shadowedProperties = [
                    ...ctor.elementProperties.keys()
                ].filter((p)=>this.hasOwnProperty(p) && p in getPrototypeOf(this));
                if (shadowedProperties.length) {
                    throw new Error(`The following properties on element ${this.localName} will not ` + `trigger updates as expected because they are set using class ` + `fields: ${shadowedProperties.join(', ')}. ` + `Native class fields and some compiled output will overwrite ` + `accessors used for detecting changes. See ` + `https://lit.dev/msg/class-field-shadowing ` + `for more information.`);
                }
            }
            // Mixin instance properties once, if they exist.
            if (this.__instanceProperties) {
                // TODO (justinfagnani): should we use the stored value? Could a new value
                // have been set since we stored the own property value?
                for (const [p, value] of this.__instanceProperties){
                    this[p] = value;
                }
                this.__instanceProperties = undefined;
            }
            // Trigger initial value reflection and populate the initial
            // changedProperties map, but only for the case of experimental
            // decorators on accessors, which will not have already populated the
            // changedProperties map. We can't know if these accessors had
            // initializers, so we just set them anyway - a difference from
            // experimental decorators on fields and standard decorators on
            // auto-accessors.
            // For context why experimentalDecorators with auto accessors are handled
            // specifically also see:
            // https://github.com/lit/lit/pull/4183#issuecomment-1711959635
            const elementProperties = this.constructor.elementProperties;
            if (elementProperties.size > 0) {
                for (const [p, options] of elementProperties){
                    if (options.wrapped === true && !this._$changedProperties.has(p) && this[p] !== undefined) {
                        this._$changeProperty(p, this[p], options);
                    }
                }
            }
        }
        let shouldUpdate = false;
        const changedProperties = this._$changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.willUpdate(changedProperties);
                this.__controllers?.forEach((c)=>c.hostUpdate?.());
                this.update(changedProperties);
            } else {
                this.__markUpdated();
            }
        } catch (e) {
            // Prevent `firstUpdated` and `updated` from running when there's an
            // update exception.
            shouldUpdate = false;
            // Ensure element can accept additional updates after an exception.
            this.__markUpdated();
            throw e;
        }
        // The update is no longer considered pending and further updates are now allowed.
        if (shouldUpdate) {
            this._$didUpdate(changedProperties);
        }
    }
    /**
     * Invoked before `update()` to compute values needed during the update.
     *
     * Implement `willUpdate` to compute property values that depend on other
     * properties and are used in the rest of the update process.
     *
     * ```ts
     * willUpdate(changedProperties) {
     *   // only need to check changed properties for an expensive computation.
     *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
     *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
     *   }
     * }
     *
     * render() {
     *   return html`SHA: ${this.sha}`;
     * }
     * ```
     *
     * @category updates
     */ willUpdate(_changedProperties) {}
    // Note, this is an override point for polyfill-support.
    // @internal
    _$didUpdate(changedProperties) {
        this.__controllers?.forEach((c)=>c.hostUpdated?.());
        if (!this.hasUpdated) {
            this.hasUpdated = true;
            this.firstUpdated(changedProperties);
        }
        this.updated(changedProperties);
        if (this.isUpdatePending && this.constructor.enabledWarnings.includes('change-in-update')) {
            issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` + `(generally because a property was set) ` + `after an update completed, causing a new update to be scheduled. ` + `This is inefficient and should be avoided unless the next update ` + `can only be scheduled as a side effect of the previous update.`);
        }
    }
    __markUpdated() {
        this._$changedProperties = new Map();
        this.isUpdatePending = false;
    }
    /**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update.
     *
     * To await additional asynchronous work, override the `getUpdateComplete`
     * method. For example, it is sometimes useful to await a rendered element
     * before fulfilling this Promise. To do this, first await
     * `super.getUpdateComplete()`, then any subsequent state.
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */ get updateComplete() {
        return this.getUpdateComplete();
    }
    /**
     * Override point for the `updateComplete` promise.
     *
     * It is not safe to override the `updateComplete` getter directly due to a
     * limitation in TypeScript which means it is not possible to call a
     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
     * This method should be overridden instead. For example:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   override async getUpdateComplete() {
     *     const result = await super.getUpdateComplete();
     *     await this._myChild.updateComplete;
     *     return result;
     *   }
     * }
     * ```
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */ getUpdateComplete() {
        return this.__updatePromise;
    }
    /**
     * Controls whether or not `update()` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */ shouldUpdate(_changedProperties) {
        return true;
    }
    /**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */ update(_changedProperties) {
        // The forEach() expression will only run when when __reflectingProperties is
        // defined, and it returns undefined, setting __reflectingProperties to
        // undefined
        this.__reflectingProperties &&= this.__reflectingProperties.forEach((p)=>this.__propertyToAttribute(p, this[p]));
        this.__markUpdated();
    }
    /**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */ updated(_changedProperties) {}
    /**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * ```ts
     * firstUpdated() {
     *   this.renderRoot.getElementById('my-text-area').focus();
     * }
     * ```
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */ firstUpdated(_changedProperties) {}
}
/**
 * Memoized list of all element styles.
 * Created lazily on user subclasses when finalizing the class.
 * @nocollapse
 * @category styles
 */ ReactiveElement.elementStyles = [];
/**
 * Options used when calling `attachShadow`. Set this property to customize
 * the options for the shadowRoot; for example, to create a closed
 * shadowRoot: `{mode: 'closed'}`.
 *
 * Note, these options are used in `createRenderRoot`. If this method
 * is customized, options should be respected if possible.
 * @nocollapse
 * @category rendering
 */ ReactiveElement.shadowRootOptions = {
    mode: 'open'
};
// Assigned here to work around a jscompiler bug with static fields
// when compiling to ES5.
// https://github.com/google/closure-compiler/issues/3177
ReactiveElement[JSCompiler_renameProperty('elementProperties')] = new Map();
ReactiveElement[JSCompiler_renameProperty('finalized')] = new Map();
// Apply polyfills if available
polyfillSupport?.({
    ReactiveElement
});
// Dev mode warnings...
{
    // Default warning set.
    ReactiveElement.enabledWarnings = [
        'change-in-update',
        'async-perform-update'
    ];
    const ensureOwnWarnings = function(ctor) {
        if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings'))) {
            ctor.enabledWarnings = ctor.enabledWarnings.slice();
        }
    };
    ReactiveElement.enableWarning = function(warning) {
        ensureOwnWarnings(this);
        if (!this.enabledWarnings.includes(warning)) {
            this.enabledWarnings.push(warning);
        }
    };
    ReactiveElement.disableWarning = function(warning) {
        ensureOwnWarnings(this);
        const i = this.enabledWarnings.indexOf(warning);
        if (i >= 0) {
            this.enabledWarnings.splice(i, 1);
        }
    };
}// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for ReactiveElement usage.
(global.reactiveElementVersions ??= []).push('2.0.4');
if (global.reactiveElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);
}
;
 //# sourceMappingURL=reactive-element.js.map
}}),
"[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2d$labs$2f$ssr$2d$dom$2d$shim$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@lit-labs/ssr-dom-shim/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$css$2d$tag$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/css-tag.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/@lit/reactive-element/node/development/decorators/property.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "property": (()=>property),
    "standardProperty": (()=>standardProperty)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <locals>");
;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ let issueWarning;
{
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = globalThis.litIssuedWarnings ??= new Set();
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning)=>{
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
}const legacyProperty = (options, proto, name)=>{
    const hasOwnProperty = proto.hasOwnProperty(name);
    proto.constructor.createProperty(name, hasOwnProperty ? {
        ...options,
        wrapped: true
    } : options);
    // For accessors (which have a descriptor on the prototype) we need to
    // return a descriptor, otherwise TypeScript overwrites the descriptor we
    // define in createProperty() with the original descriptor. We don't do this
    // for fields, which don't have a descriptor, because this could overwrite
    // descriptor defined by other decorators.
    return hasOwnProperty ? Object.getOwnPropertyDescriptor(proto, name) : undefined;
};
// This is duplicated from a similar variable in reactive-element.ts, but
// actually makes sense to have this default defined with the decorator, so
// that different decorators could have different defaults.
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["defaultConverter"],
    reflect: false,
    hasChanged: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["notEqual"]
};
/**
 * Wraps a class accessor or setter so that `requestUpdate()` is called with the
 * property name and old value when the accessor is set.
 */ const standardProperty = (options = defaultPropertyDeclaration, target, context)=>{
    const { kind, metadata } = context;
    if (metadata == null) {
        issueWarning('missing-class-metadata', `The class ${target} is missing decorator metadata. This ` + `could mean that you're using a compiler that supports decorators ` + `but doesn't support decorator metadata, such as TypeScript 5.1. ` + `Please update your compiler.`);
    }
    // Store the property options
    let properties = globalThis.litPropertyMetadata.get(metadata);
    if (properties === undefined) {
        globalThis.litPropertyMetadata.set(metadata, properties = new Map());
    }
    properties.set(context.name, options);
    if (kind === 'accessor') {
        // Standard decorators cannot dynamically modify the class, so we can't
        // replace a field with accessors. The user must use the new `accessor`
        // keyword instead.
        const { name } = context;
        return {
            set (v) {
                const oldValue = target.get.call(this);
                target.set.call(this, v);
                this.requestUpdate(name, oldValue, options);
            },
            init (v) {
                if (v !== undefined) {
                    this._$changeProperty(name, undefined, options);
                }
                return v;
            }
        };
    } else if (kind === 'setter') {
        const { name } = context;
        return function(value) {
            const oldValue = this[name];
            target.call(this, value);
            this.requestUpdate(name, oldValue, options);
        };
    }
    throw new Error(`Unsupported decorator location: ${kind}`);
};
/**
 * A class field or accessor decorator which creates a reactive property that
 * reflects a corresponding attribute value. When a decorated property is set
 * the element will update and render. A {@linkcode PropertyDeclaration} may
 * optionally be supplied to configure property features.
 *
 * This decorator should only be used for public fields. As public fields,
 * properties should be considered as primarily settable by element users,
 * either via attribute or the property itself.
 *
 * Generally, properties that are changed by the element should be private or
 * protected fields and should use the {@linkcode state} decorator.
 *
 * However, sometimes element code does need to set a public property. This
 * should typically only be done in response to user interaction, and an event
 * should be fired informing the user; for example, a checkbox sets its
 * `checked` property when clicked and fires a `changed` event. Mutating public
 * properties should typically not be done for non-primitive (object or array)
 * properties. In other cases when an element needs to manage state, a private
 * property decorated via the {@linkcode state} decorator should be used. When
 * needed, state properties can be initialized via public properties to
 * facilitate complex interactions.
 *
 * ```ts
 * class MyElement {
 *   @property({ type: Boolean })
 *   clicked = false;
 * }
 * ```
 * @category Decorator
 * @ExportDecoratedItems
 */ function property(options) {
    return (protoOrTarget, nameOrContext)=>{
        return typeof nameOrContext === 'object' ? standardProperty(options, protoOrTarget, nameOrContext) : legacyProperty(options, protoOrTarget, nameOrContext);
    };
}
;
 //# sourceMappingURL=property.js.map
}}),
"[project]/node_modules/@lit/reactive-element/node/development/decorators/state.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "state": (()=>state)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$decorators$2f$property$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/decorators/property.js [app-ssr] (ecmascript)");
;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ /**
 * Declares a private or protected reactive property that still triggers
 * updates to the element when it changes. It does not reflect from the
 * corresponding attribute.
 *
 * Properties declared this way must not be used from HTML or HTML templating
 * systems, they're solely for properties internal to the element. These
 * properties may be renamed by optimization tools like closure compiler.
 * @category Decorator
 */ function state(options) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$decorators$2f$property$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["property"])({
        ...options,
        // Add both `state` and `attribute` because we found a third party
        // controller that is keying off of PropertyOptions.state to determine
        // whether a field is a private internal property or not.
        state: true,
        attribute: false
    });
}
;
 //# sourceMappingURL=state.js.map
}}),
"[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ // Allows minifiers to rename references to globalThis
__turbopack_esm__({
    "_$LH": (()=>_$LH),
    "html": (()=>html),
    "mathml": (()=>mathml),
    "noChange": (()=>noChange),
    "nothing": (()=>nothing),
    "render": (()=>render),
    "svg": (()=>svg)
});
const global = globalThis;
/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */ const debugLogEvent = (event)=>{
    const shouldEmit = global.emitLitDebugLogEvents;
    if (!shouldEmit) {
        return;
    }
    global.dispatchEvent(new CustomEvent('lit-debug', {
        detail: event
    }));
};
// Used for connecting beginRender and endRender events when there are nested
// renders when errors are thrown preventing an endRender event from being
// called.
let debugLogRenderId = 0;
let issueWarning;
{
    global.litIssuedWarnings ??= new Set();
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning)=>{
        warning += code ? ` See https://lit.dev/msg/${code} for more information.` : '';
        if (!global.litIssuedWarnings.has(warning)) {
            console.warn(warning);
            global.litIssuedWarnings.add(warning);
        }
    };
    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
}const wrap = (node)=>node;
const trustedTypes = global.trustedTypes;
/**
 * Our TrustedTypePolicy for HTML which is declared using the html template
 * tag function.
 *
 * That HTML is a developer-authored constant, and is parsed with innerHTML
 * before any untrusted expressions have been mixed in. Therefor it is
 * considered safe by construction.
 */ const policy = trustedTypes ? trustedTypes.createPolicy('lit-html', {
    createHTML: (s)=>s
}) : undefined;
const identityFunction = (value)=>value;
const noopSanitizer = (_node, _name, _type)=>identityFunction;
/** Sets the global sanitizer factory. */ const setSanitizer = (newSanitizer)=>{
    if (sanitizerFactoryInternal !== noopSanitizer) {
        throw new Error(`Attempted to overwrite existing lit-html security policy.` + ` setSanitizeDOMValueFactory should be called at most once.`);
    }
    sanitizerFactoryInternal = newSanitizer;
};
/**
 * Only used in internal tests, not a part of the public API.
 */ const _testOnlyClearSanitizerFactoryDoNotCallOrElse = ()=>{
    sanitizerFactoryInternal = noopSanitizer;
};
const createSanitizer = (node, name, type)=>{
    return sanitizerFactoryInternal(node, name, type);
};
// Added to an attribute name to mark the attribute as bound so we can find
// it easily.
const boundAttributeSuffix = '$lit$';
// This marker is used in many syntactic positions in HTML, so it must be
// a valid element name and attribute name. We don't support dynamic names (yet)
// but this at least ensures that the parse tree is closer to the template
// intention.
const marker = `lit$${Math.random().toFixed(9).slice(2)}$`;
// String used to tell if a comment is a marker comment
const markerMatch = '?' + marker;
// Text used to insert a comment marker node. We use processing instruction
// syntax because it's slightly smaller, but parses as a comment node.
const nodeMarker = `<${markerMatch}>`;
const d = global.document === undefined ? {
    createTreeWalker () {
        return {};
    }
} : document;
// Creates a dynamic marker. We never have to search for these in the DOM.
const createMarker = ()=>d.createComment('');
const isPrimitive = (value)=>value === null || typeof value != 'object' && typeof value != 'function';
const isArray = Array.isArray;
const isIterable = (value)=>isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof value?.[Symbol.iterator] === 'function';
const SPACE_CHAR = `[ \t\n\f\r]`;
const ATTR_VALUE_CHAR = `[^ \t\n\f\r"'\`<>=]`;
const NAME_CHAR = `[^\\s"'>=/]`;
// These regexes represent the five parsing states that we care about in the
// Template's HTML scanner. They match the *end* of the state they're named
// after.
// Depending on the match, we transition to a new state. If there's no match,
// we stay in the same state.
// Note that the regexes are stateful. We utilize lastIndex and sync it
// across the multiple regexes used. In addition to the five regexes below
// we also dynamically create a regex to find the matching end tags for raw
// text elements.
/**
 * End of text is: `<` followed by:
 *   (comment start) or (tag) or (dynamic tag binding)
 */ const textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
const COMMENT_START = 1;
const TAG_NAME = 2;
const DYNAMIC_TAG_NAME = 3;
const commentEndRegex = /-->/g;
/**
 * Comments not started with <!--, like </{, can be ended by a single `>`
 */ const comment2EndRegex = />/g;
/**
 * The tagEnd regex matches the end of the "inside an opening" tag syntax
 * position. It either matches a `>`, an attribute-like sequence, or the end
 * of the string after a space (attribute-name position ending).
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \t\n\f\r" are HTML space characters:
 * https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * So an attribute is:
 *  * The name: any character except a whitespace character, ("), ('), ">",
 *    "=", or "/". Note: this is different from the HTML spec which also excludes control characters.
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */ const tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, 'g');
const ENTIRE_MATCH = 0;
const ATTRIBUTE_NAME = 1;
const SPACES_AND_EQUALS = 2;
const QUOTE_CHAR = 3;
const singleQuoteAttrEndRegex = /'/g;
const doubleQuoteAttrEndRegex = /"/g;
/**
 * Matches the raw text elements.
 *
 * Comments are not parsed within raw text elements, so we need to search their
 * text content for marker strings.
 */ const rawTextElement = /^(?:script|style|textarea|title)$/i;
/** TemplateResult types */ const HTML_RESULT = 1;
const SVG_RESULT = 2;
const MATHML_RESULT = 3;
// TemplatePart types
// IMPORTANT: these must match the values in PartType
const ATTRIBUTE_PART = 1;
const CHILD_PART = 2;
const PROPERTY_PART = 3;
const BOOLEAN_ATTRIBUTE_PART = 4;
const EVENT_PART = 5;
const ELEMENT_PART = 6;
const COMMENT_PART = 7;
/**
 * Generates a template literal tag function that returns a TemplateResult with
 * the given result type.
 */ const tag = (type)=>(strings, ...values)=>{
        // Warn against templates octal escape sequences
        // We do this here rather than in render so that the warning is closer to the
        // template definition.
        if (strings.some((s)=>s === undefined)) {
            console.warn('Some template strings are undefined.\n' + 'This is probably caused by illegal octal escape sequences.');
        }
        {
            // Import static-html.js results in a circular dependency which g3 doesn't
            // handle. Instead we know that static values must have the field
            // `_$litStatic$`.
            if (values.some((val)=>val?.['_$litStatic$'])) {
                issueWarning('', `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\n` + `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`);
            }
        }
        return {
            // This property needs to remain unminified.
            ['_$litType$']: type,
            strings,
            values
        };
    };
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 *
 * ```ts
 * const header = (title: string) => html`<h1>${title}</h1>`;
 * ```
 *
 * The `html` tag returns a description of the DOM to render as a value. It is
 * lazy, meaning no work is done until the template is rendered. When rendering,
 * if a template comes from the same expression as a previously rendered result,
 * it's efficiently updated instead of replaced.
 */ const html = tag(HTML_RESULT);
/**
 * Interprets a template literal as an SVG fragment that can efficiently render
 * to and update a container.
 *
 * ```ts
 * const rect = svg`<rect width="10" height="10"></rect>`;
 *
 * const myImage = html`
 *   <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *     ${rect}
 *   </svg>`;
 * ```
 *
 * The `svg` *tag function* should only be used for SVG fragments, or elements
 * that would be contained **inside** an `<svg>` HTML element. A common error is
 * placing an `<svg>` *element* in a template tagged with the `svg` tag
 * function. The `<svg>` element is an HTML element and should be used within a
 * template tagged with the {@linkcode html} tag function.
 *
 * In LitElement usage, it's invalid to return an SVG fragment from the
 * `render()` method, as the SVG fragment will be contained within the element's
 * shadow root and thus not be properly contained within an `<svg>` HTML
 * element.
 */ const svg = tag(SVG_RESULT);
/**
 * Interprets a template literal as MathML fragment that can efficiently render
 * to and update a container.
 *
 * ```ts
 * const num = mathml`<mn>1</mn>`;
 *
 * const eq = html`
 *   <math>
 *     ${num}
 *   </math>`;
 * ```
 *
 * The `mathml` *tag function* should only be used for MathML fragments, or
 * elements that would be contained **inside** a `<math>` HTML element. A common
 * error is placing a `<math>` *element* in a template tagged with the `mathml`
 * tag function. The `<math>` element is an HTML element and should be used
 * within a template tagged with the {@linkcode html} tag function.
 *
 * In LitElement usage, it's invalid to return an MathML fragment from the
 * `render()` method, as the MathML fragment will be contained within the
 * element's shadow root and thus not be properly contained within a `<math>`
 * HTML element.
 */ const mathml = tag(MATHML_RESULT);
/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */ const noChange = Symbol.for('lit-noChange');
/**
 * A sentinel value that signals a ChildPart to fully clear its content.
 *
 * ```ts
 * const button = html`${
 *  user.isAdmin
 *    ? html`<button>DELETE</button>`
 *    : nothing
 * }`;
 * ```
 *
 * Prefer using `nothing` over other falsy values as it provides a consistent
 * behavior between various expression binding contexts.
 *
 * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the
 * same and render no nodes. In attribute expressions, `nothing` _removes_ the
 * attribute, while `undefined` and `null` will render an empty string. In
 * property expressions `nothing` becomes `undefined`.
 */ const nothing = Symbol.for('lit-nothing');
/**
 * The cache of prepared templates, keyed by the tagged TemplateStringsArray
 * and _not_ accounting for the specific template tag used. This means that
 * template tags cannot be dynamic - they must statically be one of html, svg,
 * or attr. This restriction simplifies the cache lookup, which is on the hot
 * path for rendering.
 */ const templateCache = new WeakMap();
const walker = d.createTreeWalker(d, 129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */ );
let sanitizerFactoryInternal = noopSanitizer;
function trustFromTemplateString(tsa, stringFromTSA) {
    // A security check to prevent spoofing of Lit template results.
    // In the future, we may be able to replace this with Array.isTemplateObject,
    // though we might need to make that check inside of the html and svg
    // functions, because precompiled templates don't come in as
    // TemplateStringArray objects.
    if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {
        let message = 'invalid template strings array';
        {
            message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `.trim().replace(/\n */g, '\n');
        }
        throw new Error(message);
    }
    return policy !== undefined ? policy.createHTML(stringFromTSA) : stringFromTSA;
}
/**
 * Returns an HTML string for the given TemplateStringsArray and result type
 * (HTML or SVG), along with the case-sensitive bound attribute names in
 * template order. The HTML contains comment markers denoting the `ChildPart`s
 * and suffixes on bound attributes denoting the `AttributeParts`.
 *
 * @param strings template strings array
 * @param type HTML or SVG
 * @return Array containing `[html, attrNames]` (array returned for terseness,
 *     to avoid object fields since this code is shared with non-minified SSR
 *     code)
 */ const getTemplateHtml = (strings, type)=>{
    // Insert makers into the template HTML to represent the position of
    // bindings. The following code scans the template strings to determine the
    // syntactic position of the bindings. They can be in text position, where
    // we insert an HTML comment, attribute value position, where we insert a
    // sentinel string and re-write the attribute name, or inside a tag where
    // we insert the sentinel string.
    const l = strings.length - 1;
    // Stores the case-sensitive bound attribute names in the order of their
    // parts. ElementParts are also reflected in this array as undefined
    // rather than a string, to disambiguate from attribute bindings.
    const attrNames = [];
    let html = type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';
    // When we're inside a raw text tag (not it's text content), the regex
    // will still be tagRegex so we can find attributes, but will switch to
    // this regex when the tag ends.
    let rawTextEndRegex;
    // The current parsing state, represented as a reference to one of the
    // regexes
    let regex = textEndRegex;
    for(let i = 0; i < l; i++){
        const s = strings[i];
        // The index of the end of the last attribute name. When this is
        // positive at end of a string, it means we're in an attribute value
        // position and need to rewrite the attribute name.
        // We also use a special value of -2 to indicate that we encountered
        // the end of a string in attribute name position.
        let attrNameEndIndex = -1;
        let attrName;
        let lastIndex = 0;
        let match;
        // The conditions in this loop handle the current parse state, and the
        // assignments to the `regex` variable are the state transitions.
        while(lastIndex < s.length){
            // Make sure we start searching from where we previously left off
            regex.lastIndex = lastIndex;
            match = regex.exec(s);
            if (match === null) {
                break;
            }
            lastIndex = regex.lastIndex;
            if (regex === textEndRegex) {
                if (match[COMMENT_START] === '!--') {
                    regex = commentEndRegex;
                } else if (match[COMMENT_START] !== undefined) {
                    // We started a weird comment, like </{
                    regex = comment2EndRegex;
                } else if (match[TAG_NAME] !== undefined) {
                    if (rawTextElement.test(match[TAG_NAME])) {
                        // Record if we encounter a raw-text element. We'll switch to
                        // this regex at the end of the tag.
                        rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');
                    }
                    regex = tagEndRegex;
                } else if (match[DYNAMIC_TAG_NAME] !== undefined) {
                    {
                        throw new Error('Bindings in tag names are not supported. Please use static templates instead. ' + 'See https://lit.dev/docs/templates/expressions/#static-expressions');
                    }
                }
            } else if (regex === tagEndRegex) {
                if (match[ENTIRE_MATCH] === '>') {
                    // End of a tag. If we had started a raw-text element, use that
                    // regex
                    regex = rawTextEndRegex ?? textEndRegex;
                    // We may be ending an unquoted attribute value, so make sure we
                    // clear any pending attrNameEndIndex
                    attrNameEndIndex = -1;
                } else if (match[ATTRIBUTE_NAME] === undefined) {
                    // Attribute name position
                    attrNameEndIndex = -2;
                } else {
                    attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
                    attrName = match[ATTRIBUTE_NAME];
                    regex = match[QUOTE_CHAR] === undefined ? tagEndRegex : match[QUOTE_CHAR] === '"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;
                }
            } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {
                regex = tagEndRegex;
            } else if (regex === commentEndRegex || regex === comment2EndRegex) {
                regex = textEndRegex;
            } else {
                // Not one of the five state regexes, so it must be the dynamically
                // created raw text regex and we're at the close of that element.
                regex = tagEndRegex;
                rawTextEndRegex = undefined;
            }
        }
        {
            // If we have a attrNameEndIndex, which indicates that we should
            // rewrite the attribute name, assert that we're in a valid attribute
            // position - either in a tag, or a quoted attribute value.
            console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');
        }
        // We have four cases:
        //  1. We're in text position, and not in a raw text element
        //     (regex === textEndRegex): insert a comment marker.
        //  2. We have a non-negative attrNameEndIndex which means we need to
        //     rewrite the attribute name to add a bound attribute suffix.
        //  3. We're at the non-first binding in a multi-binding attribute, use a
        //     plain marker.
        //  4. We're somewhere else inside the tag. If we're in attribute name
        //     position (attrNameEndIndex === -2), add a sequential suffix to
        //     generate a unique attribute name.
        // Detect a binding next to self-closing tag end and insert a space to
        // separate the marker from the tag end:
        const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';
        html += regex === textEndRegex ? s + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s.slice(0, attrNameEndIndex) + boundAttributeSuffix + s.slice(attrNameEndIndex)) + marker + end : s + marker + (attrNameEndIndex === -2 ? i : end);
    }
    const htmlResult = html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');
    // Returned as an array for terseness
    return [
        trustFromTemplateString(strings, htmlResult),
        attrNames
    ];
};
class Template {
    constructor(// This property needs to remain unminified.
    { strings, ['_$litType$']: type }, options){
        this.parts = [];
        let node;
        let nodeIndex = 0;
        let attrNameIndex = 0;
        const partCount = strings.length - 1;
        const parts = this.parts;
        // Create template element
        const [html, attrNames] = getTemplateHtml(strings, type);
        this.el = Template.createElement(html, options);
        walker.currentNode = this.el.content;
        // Re-parent SVG or MathML nodes into template root
        if (type === SVG_RESULT || type === MATHML_RESULT) {
            const wrapper = this.el.content.firstChild;
            wrapper.replaceWith(...wrapper.childNodes);
        }
        // Walk the template to find binding markers and create TemplateParts
        while((node = walker.nextNode()) !== null && parts.length < partCount){
            if (node.nodeType === 1) {
                {
                    const tag = node.localName;
                    // Warn if `textarea` includes an expression and throw if `template`
                    // does since these are not supported. We do this by checking
                    // innerHTML for anything that looks like a marker. This catches
                    // cases like bindings in textarea there markers turn into text nodes.
                    if (/^(?:textarea|template)$/i.test(tag) && node.innerHTML.includes(marker)) {
                        const m = `Expressions are not supported inside \`${tag}\` ` + `elements. See https://lit.dev/msg/expression-in-${tag} for more ` + `information.`;
                        if (tag === 'template') {
                            throw new Error(m);
                        } else issueWarning('', m);
                    }
                }
                // TODO (justinfagnani): for attempted dynamic tag names, we don't
                // increment the bindingIndex, and it'll be off by 1 in the element
                // and off by two after it.
                if (node.hasAttributes()) {
                    for (const name of node.getAttributeNames()){
                        if (name.endsWith(boundAttributeSuffix)) {
                            const realName = attrNames[attrNameIndex++];
                            const value = node.getAttribute(name);
                            const statics = value.split(marker);
                            const m = /([.?@])?(.*)/.exec(realName);
                            parts.push({
                                type: ATTRIBUTE_PART,
                                index: nodeIndex,
                                name: m[2],
                                strings: statics,
                                ctor: m[1] === '.' ? PropertyPart : m[1] === '?' ? BooleanAttributePart : m[1] === '@' ? EventPart : AttributePart
                            });
                            node.removeAttribute(name);
                        } else if (name.startsWith(marker)) {
                            parts.push({
                                type: ELEMENT_PART,
                                index: nodeIndex
                            });
                            node.removeAttribute(name);
                        }
                    }
                }
                // TODO (justinfagnani): benchmark the regex against testing for each
                // of the 3 raw text element names.
                if (rawTextElement.test(node.tagName)) {
                    // For raw text elements we need to split the text content on
                    // markers, create a Text node for each segment, and create
                    // a TemplatePart for each marker.
                    const strings = node.textContent.split(marker);
                    const lastIndex = strings.length - 1;
                    if (lastIndex > 0) {
                        node.textContent = trustedTypes ? trustedTypes.emptyScript : '';
                        // Generate a new text node for each literal section
                        // These nodes are also used as the markers for node parts
                        // We can't use empty text nodes as markers because they're
                        // normalized when cloning in IE (could simplify when
                        // IE is no longer supported)
                        for(let i = 0; i < lastIndex; i++){
                            node.append(strings[i], createMarker());
                            // Walk past the marker node we just added
                            walker.nextNode();
                            parts.push({
                                type: CHILD_PART,
                                index: ++nodeIndex
                            });
                        }
                        // Note because this marker is added after the walker's current
                        // node, it will be walked to in the outer loop (and ignored), so
                        // we don't need to adjust nodeIndex here
                        node.append(strings[lastIndex], createMarker());
                    }
                }
            } else if (node.nodeType === 8) {
                const data = node.data;
                if (data === markerMatch) {
                    parts.push({
                        type: CHILD_PART,
                        index: nodeIndex
                    });
                } else {
                    let i = -1;
                    while((i = node.data.indexOf(marker, i + 1)) !== -1){
                        // Comment node has a binding marker inside, make an inactive part
                        // The binding won't work, but subsequent bindings will
                        parts.push({
                            type: COMMENT_PART,
                            index: nodeIndex
                        });
                        // Move to the end of the match
                        i += marker.length - 1;
                    }
                }
            }
            nodeIndex++;
        }
        {
            // If there was a duplicate attribute on a tag, then when the tag is
            // parsed into an element the attribute gets de-duplicated. We can detect
            // this mismatch if we haven't precisely consumed every attribute name
            // when preparing the template. This works because `attrNames` is built
            // from the template string and `attrNameIndex` comes from processing the
            // resulting DOM.
            if (attrNames.length !== attrNameIndex) {
                throw new Error(`Detected duplicate attribute bindings. This occurs if your template ` + `has duplicate attributes on an element tag. For example ` + `"<input ?disabled=\${true} ?disabled=\${false}>" contains a ` + `duplicate "disabled" attribute. The error was detected in ` + `the following template: \n` + '`' + strings.join('${...}') + '`');
            }
        }
        // We could set walker.currentNode to another node here to prevent a memory
        // leak, but every time we prepare a template, we immediately render it
        // and re-use the walker in new TemplateInstance._clone().
        debugLogEvent && debugLogEvent({
            kind: 'template prep',
            template: this,
            clonableTemplate: this.el,
            parts: this.parts,
            strings
        });
    }
    // Overridden via `litHtmlPolyfillSupport` to provide platform support.
    /** @nocollapse */ static createElement(html, _options) {
        const el = d.createElement('template');
        el.innerHTML = html;
        return el;
    }
}
function resolveDirective(part, value, parent = part, attributeIndex) {
    // Bail early if the value is explicitly noChange. Note, this means any
    // nested directive is still attached and is not run.
    if (value === noChange) {
        return value;
    }
    let currentDirective = attributeIndex !== undefined ? parent.__directives?.[attributeIndex] : parent.__directive;
    const nextDirectiveConstructor = isPrimitive(value) ? undefined : value['_$litDirective$'];
    if (currentDirective?.constructor !== nextDirectiveConstructor) {
        // This property needs to remain unminified.
        currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);
        if (nextDirectiveConstructor === undefined) {
            currentDirective = undefined;
        } else {
            currentDirective = new nextDirectiveConstructor(part);
            currentDirective._$initialize(part, parent, attributeIndex);
        }
        if (attributeIndex !== undefined) {
            (parent.__directives ??= [])[attributeIndex] = currentDirective;
        } else {
            parent.__directive = currentDirective;
        }
    }
    if (currentDirective !== undefined) {
        value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
    }
    return value;
}
/**
 * An updateable instance of a Template. Holds references to the Parts used to
 * update the template instance.
 */ class TemplateInstance {
    constructor(template, parent){
        this._$parts = [];
        /** @internal */ this._$disconnectableChildren = undefined;
        this._$template = template;
        this._$parent = parent;
    }
    // Called by ChildPart parentNode getter
    get parentNode() {
        return this._$parent.parentNode;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    // This method is separate from the constructor because we need to return a
    // DocumentFragment and we don't want to hold onto it with an instance field.
    _clone(options) {
        const { el: { content }, parts: parts } = this._$template;
        const fragment = (options?.creationScope ?? d).importNode(content, true);
        walker.currentNode = fragment;
        let node = walker.nextNode();
        let nodeIndex = 0;
        let partIndex = 0;
        let templatePart = parts[0];
        while(templatePart !== undefined){
            if (nodeIndex === templatePart.index) {
                let part;
                if (templatePart.type === CHILD_PART) {
                    part = new ChildPart(node, node.nextSibling, this, options);
                } else if (templatePart.type === ATTRIBUTE_PART) {
                    part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
                } else if (templatePart.type === ELEMENT_PART) {
                    part = new ElementPart(node, this, options);
                }
                this._$parts.push(part);
                templatePart = parts[++partIndex];
            }
            if (nodeIndex !== templatePart?.index) {
                node = walker.nextNode();
                nodeIndex++;
            }
        }
        // We need to set the currentNode away from the cloned tree so that we
        // don't hold onto the tree even if the tree is detached and should be
        // freed.
        walker.currentNode = d;
        return fragment;
    }
    _update(values) {
        let i = 0;
        for (const part of this._$parts){
            if (part !== undefined) {
                debugLogEvent && debugLogEvent({
                    kind: 'set part',
                    part,
                    value: values[i],
                    valueIndex: i,
                    values,
                    templateInstance: this
                });
                if (part.strings !== undefined) {
                    part._$setValue(values, part, i);
                    // The number of values the part consumes is part.strings.length - 1
                    // since values are in between template spans. We increment i by 1
                    // later in the loop, so increment it by part.strings.length - 2 here
                    i += part.strings.length - 2;
                } else {
                    part._$setValue(values[i]);
                }
            }
            i++;
        }
    }
}
class ChildPart {
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        // ChildParts that are not at the root should always be created with a
        // parent; only RootChildNode's won't, so they return the local isConnected
        // state
        return this._$parent?._$isConnected ?? this.__isConnected;
    }
    constructor(startNode, endNode, parent, options){
        this.type = CHILD_PART;
        this._$committedValue = nothing;
        // The following fields will be patched onto ChildParts when required by
        // AsyncDirective
        /** @internal */ this._$disconnectableChildren = undefined;
        this._$startNode = startNode;
        this._$endNode = endNode;
        this._$parent = parent;
        this.options = options;
        // Note __isConnected is only ever accessed on RootParts (i.e. when there is
        // no _$parent); the value on a non-root-part is "don't care", but checking
        // for parent would be more code
        this.__isConnected = options?.isConnected ?? true;
        {
            // Explicitly initialize for consistent class shape.
            this._textSanitizer = undefined;
        }
    }
    /**
     * The parent node into which the part renders its content.
     *
     * A ChildPart's content consists of a range of adjacent child nodes of
     * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
     * `.endNode`).
     *
     * - If both `.startNode` and `.endNode` are non-null, then the part's content
     * consists of all siblings between `.startNode` and `.endNode`, exclusively.
     *
     * - If `.startNode` is non-null but `.endNode` is null, then the part's
     * content consists of all siblings following `.startNode`, up to and
     * including the last child of `.parentNode`. If `.endNode` is non-null, then
     * `.startNode` will always be non-null.
     *
     * - If both `.endNode` and `.startNode` are null, then the part's content
     * consists of all child nodes of `.parentNode`.
     */ get parentNode() {
        let parentNode = wrap(this._$startNode).parentNode;
        const parent = this._$parent;
        if (parent !== undefined && parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */ ) {
            // If the parentNode is a DocumentFragment, it may be because the DOM is
            // still in the cloned fragment during initial render; if so, get the real
            // parentNode the part will be committed into by asking the parent.
            parentNode = parent.parentNode;
        }
        return parentNode;
    }
    /**
     * The part's leading marker node, if any. See `.parentNode` for more
     * information.
     */ get startNode() {
        return this._$startNode;
    }
    /**
     * The part's trailing marker node, if any. See `.parentNode` for more
     * information.
     */ get endNode() {
        return this._$endNode;
    }
    _$setValue(value, directiveParent = this) {
        if (this.parentNode === null) {
            throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
        }
        value = resolveDirective(this, value, directiveParent);
        if (isPrimitive(value)) {
            // Non-rendering child values. It's important that these do not render
            // empty text nodes to avoid issues with preventing default <slot>
            // fallback content.
            if (value === nothing || value == null || value === '') {
                if (this._$committedValue !== nothing) {
                    debugLogEvent && debugLogEvent({
                        kind: 'commit nothing to child',
                        start: this._$startNode,
                        end: this._$endNode,
                        parent: this._$parent,
                        options: this.options
                    });
                    this._$clear();
                }
                this._$committedValue = nothing;
            } else if (value !== this._$committedValue && value !== noChange) {
                this._commitText(value);
            }
        // This property needs to remain unminified.
        } else if (value['_$litType$'] !== undefined) {
            this._commitTemplateResult(value);
        } else if (value.nodeType !== undefined) {
            if (this.options?.host === value) {
                this._commitText(`[probable mistake: rendered a template's host in itself ` + `(commonly caused by writing \${this} in a template]`);
                console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
                return;
            }
            this._commitNode(value);
        } else if (isIterable(value)) {
            this._commitIterable(value);
        } else {
            // Fallback, will render the string representation
            this._commitText(value);
        }
    }
    _insert(node) {
        return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
    }
    _commitNode(value) {
        if (this._$committedValue !== value) {
            this._$clear();
            if (sanitizerFactoryInternal !== noopSanitizer) {
                const parentNodeName = this._$startNode.parentNode?.nodeName;
                if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {
                    let message = 'Forbidden';
                    {
                        if (parentNodeName === 'STYLE') {
                            message = `Lit does not support binding inside style nodes. ` + `This is a security risk, as style injection attacks can ` + `exfiltrate data and spoof UIs. ` + `Consider instead using css\`...\` literals ` + `to compose styles, and do dynamic styling with ` + `css custom properties, ::parts, <slot>s, ` + `and by mutating the DOM rather than stylesheets.`;
                        } else {
                            message = `Lit does not support binding inside script nodes. ` + `This is a security risk, as it could allow arbitrary ` + `code execution.`;
                        }
                    }
                    throw new Error(message);
                }
            }
            debugLogEvent && debugLogEvent({
                kind: 'commit node',
                start: this._$startNode,
                parent: this._$parent,
                value: value,
                options: this.options
            });
            this._$committedValue = this._insert(value);
        }
    }
    _commitText(value) {
        // If the committed value is a primitive it means we called _commitText on
        // the previous render, and we know that this._$startNode.nextSibling is a
        // Text node. We can now just replace the text content (.data) of the node.
        if (this._$committedValue !== nothing && isPrimitive(this._$committedValue)) {
            const node = wrap(this._$startNode).nextSibling;
            {
                if (this._textSanitizer === undefined) {
                    this._textSanitizer = createSanitizer(node, 'data', 'property');
                }
                value = this._textSanitizer(value);
            }
            debugLogEvent && debugLogEvent({
                kind: 'commit text',
                node,
                value,
                options: this.options
            });
            node.data = value;
        } else {
            {
                const textNode = d.createTextNode('');
                this._commitNode(textNode);
                // When setting text content, for security purposes it matters a lot
                // what the parent is. For example, <style> and <script> need to be
                // handled with care, while <span> does not. So first we need to put a
                // text node into the document, then we can sanitize its content.
                if (this._textSanitizer === undefined) {
                    this._textSanitizer = createSanitizer(textNode, 'data', 'property');
                }
                value = this._textSanitizer(value);
                debugLogEvent && debugLogEvent({
                    kind: 'commit text',
                    node: textNode,
                    value,
                    options: this.options
                });
                textNode.data = value;
            }
        }
        this._$committedValue = value;
    }
    _commitTemplateResult(result) {
        // This property needs to remain unminified.
        const { values, ['_$litType$']: type } = result;
        // If $litType$ is a number, result is a plain TemplateResult and we get
        // the template from the template cache. If not, result is a
        // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need
        // to create the <template> element the first time we see it.
        const template = typeof type === 'number' ? this._$getTemplate(result) : (type.el === undefined && (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)), type);
        if (this._$committedValue?._$template === template) {
            debugLogEvent && debugLogEvent({
                kind: 'template updating',
                template,
                instance: this._$committedValue,
                parts: this._$committedValue._$parts,
                options: this.options,
                values
            });
            this._$committedValue._update(values);
        } else {
            const instance = new TemplateInstance(template, this);
            const fragment = instance._clone(this.options);
            debugLogEvent && debugLogEvent({
                kind: 'template instantiated',
                template,
                instance,
                parts: instance._$parts,
                options: this.options,
                fragment,
                values
            });
            instance._update(values);
            debugLogEvent && debugLogEvent({
                kind: 'template instantiated and updated',
                template,
                instance,
                parts: instance._$parts,
                options: this.options,
                fragment,
                values
            });
            this._commitNode(fragment);
            this._$committedValue = instance;
        }
    }
    // Overridden via `litHtmlPolyfillSupport` to provide platform support.
    /** @internal */ _$getTemplate(result) {
        let template = templateCache.get(result.strings);
        if (template === undefined) {
            templateCache.set(result.strings, template = new Template(result));
        }
        return template;
    }
    _commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If value is an array, then the previous render was of an
        // iterable and value will contain the ChildParts from the previous
        // render. If value is not an array, clear this part and make a new
        // array for ChildParts.
        if (!isArray(this._$committedValue)) {
            this._$committedValue = [];
            this._$clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this._$committedValue;
        let partIndex = 0;
        let itemPart;
        for (const item of value){
            if (partIndex === itemParts.length) {
                // If no existing part, create a new one
                // TODO (justinfagnani): test perf impact of always creating two parts
                // instead of sharing parts between nodes
                // https://github.com/lit/lit/issues/1266
                itemParts.push(itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));
            } else {
                // Reuse an existing part
                itemPart = itemParts[partIndex];
            }
            itemPart._$setValue(item);
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // itemParts always have end nodes
            this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
        }
    }
    /**
     * Removes the nodes contained within this Part from the DOM.
     *
     * @param start Start node to clear from, for clearing a subset of the part's
     *     DOM (used when truncating iterables)
     * @param from  When `start` is specified, the index within the iterable from
     *     which ChildParts are being removed, used for disconnecting directives in
     *     those Parts.
     *
     * @internal
     */ _$clear(start = wrap(this._$startNode).nextSibling, from) {
        this._$notifyConnectionChanged?.(false, true, from);
        while(start && start !== this._$endNode){
            const n = wrap(start).nextSibling;
            wrap(start).remove();
            start = n;
        }
    }
    /**
     * Implementation of RootPart's `isConnected`. Note that this method
     * should only be called on `RootPart`s (the `ChildPart` returned from a
     * top-level `render()` call). It has no effect on non-root ChildParts.
     * @param isConnected Whether to set
     * @internal
     */ setConnected(isConnected) {
        if (this._$parent === undefined) {
            this.__isConnected = isConnected;
            this._$notifyConnectionChanged?.(isConnected);
        } else {
            throw new Error('part.setConnected() may only be called on a ' + 'RootPart returned from render().');
        }
    }
}
class AttributePart {
    get tagName() {
        return this.element.tagName;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    constructor(element, name, strings, parent, options){
        this.type = ATTRIBUTE_PART;
        /** @internal */ this._$committedValue = nothing;
        /** @internal */ this._$disconnectableChildren = undefined;
        this.element = element;
        this.name = name;
        this._$parent = parent;
        this.options = options;
        if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {
            this._$committedValue = new Array(strings.length - 1).fill(new String());
            this.strings = strings;
        } else {
            this._$committedValue = nothing;
        }
        {
            this._sanitizer = undefined;
        }
    }
    /**
     * Sets the value of this part by resolving the value from possibly multiple
     * values and static strings and committing it to the DOM.
     * If this part is single-valued, `this._strings` will be undefined, and the
     * method will be called with a single value argument. If this part is
     * multi-value, `this._strings` will be defined, and the method is called
     * with the value array of the part's owning TemplateInstance, and an offset
     * into the value array from which the values should be read.
     * This method is overloaded this way to eliminate short-lived array slices
     * of the template instance values, and allow a fast-path for single-valued
     * parts.
     *
     * @param value The part value, or an array of values for multi-valued parts
     * @param valueIndex the index to start reading values from. `undefined` for
     *   single-valued parts
     * @param noCommit causes the part to not commit its value to the DOM. Used
     *   in hydration to prime attribute parts with their first-rendered value,
     *   but not set the attribute, and in SSR to no-op the DOM operation and
     *   capture the value for serialization.
     *
     * @internal
     */ _$setValue(value, directiveParent = this, valueIndex, noCommit) {
        const strings = this.strings;
        // Whether any of the values has changed, for dirty-checking
        let change = false;
        if (strings === undefined) {
            // Single-value binding case
            value = resolveDirective(this, value, directiveParent, 0);
            change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;
            if (change) {
                this._$committedValue = value;
            }
        } else {
            // Interpolation case
            const values = value;
            value = strings[0];
            let i, v;
            for(i = 0; i < strings.length - 1; i++){
                v = resolveDirective(this, values[valueIndex + i], directiveParent, i);
                if (v === noChange) {
                    // If the user-provided value is `noChange`, use the previous value
                    v = this._$committedValue[i];
                }
                change ||= !isPrimitive(v) || v !== this._$committedValue[i];
                if (v === nothing) {
                    value = nothing;
                } else if (value !== nothing) {
                    value += (v ?? '') + strings[i + 1];
                }
                // We always record each value, even if one is `nothing`, for future
                // change detection.
                this._$committedValue[i] = v;
            }
        }
        if (change && !noCommit) {
            this._commitValue(value);
        }
    }
    /** @internal */ _commitValue(value) {
        if (value === nothing) {
            wrap(this.element).removeAttribute(this.name);
        } else {
            {
                if (this._sanitizer === undefined) {
                    this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');
                }
                value = this._sanitizer(value ?? '');
            }
            debugLogEvent && debugLogEvent({
                kind: 'commit attribute',
                element: this.element,
                name: this.name,
                value,
                options: this.options
            });
            wrap(this.element).setAttribute(this.name, value ?? '');
        }
    }
}
class PropertyPart extends AttributePart {
    constructor(){
        super(...arguments);
        this.type = PROPERTY_PART;
    }
    /** @internal */ _commitValue(value) {
        {
            if (this._sanitizer === undefined) {
                this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');
            }
            value = this._sanitizer(value);
        }
        debugLogEvent && debugLogEvent({
            kind: 'commit property',
            element: this.element,
            name: this.name,
            value,
            options: this.options
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.element[this.name] = value === nothing ? undefined : value;
    }
}
class BooleanAttributePart extends AttributePart {
    constructor(){
        super(...arguments);
        this.type = BOOLEAN_ATTRIBUTE_PART;
    }
    /** @internal */ _commitValue(value) {
        debugLogEvent && debugLogEvent({
            kind: 'commit boolean attribute',
            element: this.element,
            name: this.name,
            value: !!(value && value !== nothing),
            options: this.options
        });
        wrap(this.element).toggleAttribute(this.name, !!value && value !== nothing);
    }
}
class EventPart extends AttributePart {
    constructor(element, name, strings, parent, options){
        super(element, name, strings, parent, options);
        this.type = EVENT_PART;
        if (this.strings !== undefined) {
            throw new Error(`A \`<${element.localName}>\` has a \`@${name}=...\` listener with ` + 'invalid content. Event listeners in templates must have exactly ' + 'one expression and no surrounding text.');
        }
    }
    // EventPart does not use the base _$setValue/_resolveValue implementation
    // since the dirty checking is more complex
    /** @internal */ _$setValue(newListener, directiveParent = this) {
        newListener = resolveDirective(this, newListener, directiveParent, 0) ?? nothing;
        if (newListener === noChange) {
            return;
        }
        const oldListener = this._$committedValue;
        // If the new value is nothing or any options change we have to remove the
        // part as a listener.
        const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive;
        // If the new value is not nothing and we removed the listener, we have
        // to add the part as a listener.
        const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);
        debugLogEvent && debugLogEvent({
            kind: 'commit event listener',
            element: this.element,
            name: this.name,
            value: newListener,
            options: this.options,
            removeListener: shouldRemoveListener,
            addListener: shouldAddListener,
            oldListener
        });
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.name, this, oldListener);
        }
        if (shouldAddListener) {
            // Beware: IE11 and Chrome 41 don't like using the listener as the
            // options object. Figure out how to deal w/ this in IE11 - maybe
            // patch addEventListener?
            this.element.addEventListener(this.name, this, newListener);
        }
        this._$committedValue = newListener;
    }
    handleEvent(event) {
        if (typeof this._$committedValue === 'function') {
            this._$committedValue.call(this.options?.host ?? this.element, event);
        } else {
            this._$committedValue.handleEvent(event);
        }
    }
}
class ElementPart {
    constructor(element, parent, options){
        this.element = element;
        this.type = ELEMENT_PART;
        /** @internal */ this._$disconnectableChildren = undefined;
        this._$parent = parent;
        this.options = options;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    _$setValue(value) {
        debugLogEvent && debugLogEvent({
            kind: 'commit to element binding',
            element: this.element,
            value,
            options: this.options
        });
        resolveDirective(this, value);
    }
}
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * Private exports for use by other Lit packages, not intended for use by
 * external users.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports mangled in the
 * client side code, we export a _$LH object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * This has a unique name, to disambiguate it from private exports in
 * lit-element, which re-exports all of lit-html.
 *
 * @private
 */ const _$LH = {
    // Used in lit-ssr
    _boundAttributeSuffix: boundAttributeSuffix,
    _marker: marker,
    _markerMatch: markerMatch,
    _HTML_RESULT: HTML_RESULT,
    _getTemplateHtml: getTemplateHtml,
    // Used in tests and private-ssr-support
    _TemplateInstance: TemplateInstance,
    _isIterable: isIterable,
    _resolveDirective: resolveDirective,
    _ChildPart: ChildPart,
    _AttributePart: AttributePart,
    _BooleanAttributePart: BooleanAttributePart,
    _EventPart: EventPart,
    _PropertyPart: PropertyPart,
    _ElementPart: ElementPart
};
// Apply polyfills if available
const polyfillSupport = global.litHtmlPolyfillSupportDevMode;
polyfillSupport?.(Template, ChildPart);
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.
(global.litHtmlVersions ??= []).push('3.2.1');
if (global.litHtmlVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. ` + `Loading multiple versions is not recommended.`);
}
/**
 * Renders a value, usually a lit-html TemplateResult, to the container.
 *
 * This example renders the text "Hello, Zoe!" inside a paragraph tag, appending
 * it to the container `document.body`.
 *
 * ```js
 * import {html, render} from 'lit';
 *
 * const name = "Zoe";
 * render(html`<p>Hello, ${name}!</p>`, document.body);
 * ```
 *
 * @param value Any [renderable
 *   value](https://lit.dev/docs/templates/expressions/#child-expressions),
 *   typically a {@linkcode TemplateResult} created by evaluating a template tag
 *   like {@linkcode html} or {@linkcode svg}.
 * @param container A DOM container to render to. The first render will append
 *   the rendered value to the container, and subsequent renders will
 *   efficiently update the rendered value if the same result type was
 *   previously rendered there.
 * @param options See {@linkcode RenderOptions} for options documentation.
 * @see
 * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}
 */ const render = (value, container, options)=>{
    if (container == null) {
        // Give a clearer error message than
        //     Uncaught TypeError: Cannot read properties of null (reading
        //     '_$litPart$')
        // which reads like an internal Lit error.
        throw new TypeError(`The container to render into may not be ${container}`);
    }
    const renderId = debugLogRenderId++;
    const partOwnerNode = options?.renderBefore ?? container;
    // This property needs to remain unminified.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let part = partOwnerNode['_$litPart$'];
    debugLogEvent && debugLogEvent({
        kind: 'begin render',
        id: renderId,
        value,
        container,
        options,
        part
    });
    if (part === undefined) {
        const endNode = options?.renderBefore ?? null;
        // This property needs to remain unminified.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        partOwnerNode['_$litPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options ?? {});
    }
    part._$setValue(value);
    debugLogEvent && debugLogEvent({
        kind: 'end render',
        id: renderId,
        value,
        container,
        options,
        part
    });
    return part;
};
{
    render.setSanitizer = setSanitizer;
    render.createSanitizer = createSanitizer;
    {
        render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;
    }
};
 //# sourceMappingURL=lit-html.js.map
}}),
"[project]/node_modules/lit-html/node/development/is-server.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ /**
 * @fileoverview
 *
 * This file exports a boolean const whose value will depend on what environment
 * the module is being imported from.
 */ __turbopack_esm__({
    "isServer": (()=>isServer)
});
const NODE_MODE = true;
/**
 * A boolean that will be `true` in server environments like Node, and `false`
 * in browser environments. Note that your server environment or toolchain must
 * support the `"node"` export condition for this to be `true`.
 *
 * This can be used when authoring components to change behavior based on
 * whether or not the component is executing in an SSR context.
 */ const isServer = NODE_MODE;
;
 //# sourceMappingURL=is-server.js.map
}}),
"[project]/node_modules/lit-html/node/development/directive.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ __turbopack_esm__({
    "Directive": (()=>Directive),
    "PartType": (()=>PartType),
    "directive": (()=>directive)
});
const PartType = {
    ATTRIBUTE: 1,
    CHILD: 2,
    PROPERTY: 3,
    BOOLEAN_ATTRIBUTE: 4,
    EVENT: 5,
    ELEMENT: 6
};
/**
 * Creates a user-facing directive function from a Directive class. This
 * function has the same parameters as the directive's render() method.
 */ const directive = (c)=>(...values)=>({
            // This property needs to remain unminified.
            ['_$litDirective$']: c,
            values
        });
/**
 * Base class for creating custom directives. Users should extend this class,
 * implement `render` and/or `update`, and then pass their subclass to
 * `directive`.
 */ class Directive {
    constructor(_partInfo){}
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    /** @internal */ _$initialize(part, parent, attributeIndex) {
        this.__part = part;
        this._$parent = parent;
        this.__attributeIndex = attributeIndex;
    }
    /** @internal */ _$resolve(part, props) {
        return this.update(part, props);
    }
    update(_part, props) {
        return this.render(...props);
    }
}
;
 //# sourceMappingURL=directive.js.map
}}),
"[project]/node_modules/lit-html/node/development/directives/class-map.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "classMap": (()=>classMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directive.js [app-ssr] (ecmascript)");
;
;
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ class ClassMapDirective extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Directive"] {
    constructor(partInfo){
        super(partInfo);
        if (partInfo.type !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].ATTRIBUTE || partInfo.name !== 'class' || partInfo.strings?.length > 2) {
            throw new Error('`classMap()` can only be used in the `class` attribute ' + 'and must be the only part in the attribute.');
        }
    }
    render(classInfo) {
        // Add spaces to ensure separation from static classes
        return ' ' + Object.keys(classInfo).filter((key)=>classInfo[key]).join(' ') + ' ';
    }
    update(part, [classInfo]) {
        // Remember dynamic classes on the first render
        if (this._previousClasses === undefined) {
            this._previousClasses = new Set();
            if (part.strings !== undefined) {
                this._staticClasses = new Set(part.strings.join(' ').split(/\s/).filter((s)=>s !== ''));
            }
            for(const name in classInfo){
                if (classInfo[name] && !this._staticClasses?.has(name)) {
                    this._previousClasses.add(name);
                }
            }
            return this.render(classInfo);
        }
        const classList = part.element.classList;
        // Remove old classes that no longer apply
        for (const name of this._previousClasses){
            if (!(name in classInfo)) {
                classList.remove(name);
                this._previousClasses.delete(name);
            }
        }
        // Add or remove classes based on their classMap value
        for(const name in classInfo){
            // We explicitly want a loose truthy check of `value` because it seems
            // more convenient that '' and 0 are skipped.
            const value = !!classInfo[name];
            if (value !== this._previousClasses.has(name) && !this._staticClasses?.has(name)) {
                if (value) {
                    classList.add(name);
                    this._previousClasses.add(name);
                } else {
                    classList.remove(name);
                    this._previousClasses.delete(name);
                }
            }
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"];
    }
}
/**
 * A directive that applies dynamic CSS classes.
 *
 * This must be used in the `class` attribute and must be the only part used in
 * the attribute. It takes each property in the `classInfo` argument and adds
 * the property name to the element's `classList` if the property value is
 * truthy; if the property value is falsy, the property name is removed from
 * the element's `class`.
 *
 * For example `{foo: bar}` applies the class `foo` if the value of `bar` is
 * truthy.
 *
 * @param classInfo
 */ const classMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["directive"])(ClassMapDirective);
;
 //# sourceMappingURL=class-map.js.map
}}),
"[project]/node_modules/lit-html/node/development/directives/style-map.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "styleMap": (()=>styleMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directive.js [app-ssr] (ecmascript)");
;
;
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const important = 'important';
// The leading space is important
const importantFlag = ' !' + important;
// How many characters to remove from a value, as a negative number
const flagTrim = 0 - importantFlag.length;
class StyleMapDirective extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Directive"] {
    constructor(partInfo){
        super(partInfo);
        if (partInfo.type !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].ATTRIBUTE || partInfo.name !== 'style' || partInfo.strings?.length > 2) {
            throw new Error('The `styleMap` directive must be used in the `style` attribute ' + 'and must be the only part in the attribute.');
        }
    }
    render(styleInfo) {
        return Object.keys(styleInfo).reduce((style, prop)=>{
            const value = styleInfo[prop];
            if (value == null) {
                return style;
            }
            // Convert property names from camel-case to dash-case, i.e.:
            //  `backgroundColor` -> `background-color`
            // Vendor-prefixed names need an extra `-` appended to front:
            //  `webkitAppearance` -> `-webkit-appearance`
            // Exception is any property name containing a dash, including
            // custom properties; we assume these are already dash-cased i.e.:
            //  `--my-button-color` --> `--my-button-color`
            prop = prop.includes('-') ? prop : prop.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&').toLowerCase();
            return style + `${prop}:${value};`;
        }, '');
    }
    update(part, [styleInfo]) {
        const { style } = part.element;
        if (this._previousStyleProperties === undefined) {
            this._previousStyleProperties = new Set(Object.keys(styleInfo));
            return this.render(styleInfo);
        }
        // Remove old properties that no longer exist in styleInfo
        for (const name of this._previousStyleProperties){
            // If the name isn't in styleInfo or it's null/undefined
            if (styleInfo[name] == null) {
                this._previousStyleProperties.delete(name);
                if (name.includes('-')) {
                    style.removeProperty(name);
                } else {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    style[name] = null;
                }
            }
        }
        // Add or update properties
        for(const name in styleInfo){
            const value = styleInfo[name];
            if (value != null) {
                this._previousStyleProperties.add(name);
                const isImportant = typeof value === 'string' && value.endsWith(importantFlag);
                if (name.includes('-') || isImportant) {
                    style.setProperty(name, isImportant ? value.slice(0, flagTrim) : value, isImportant ? important : '');
                } else {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    style[name] = value;
                }
            }
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"];
    }
}
/**
 * A directive that applies CSS properties to an element.
 *
 * `styleMap` can only be used in the `style` attribute and must be the only
 * expression in the attribute. It takes the property names in the
 * {@link StyleInfo styleInfo} object and adds the properties to the inline
 * style of the element.
 *
 * Property names with dashes (`-`) are assumed to be valid CSS
 * property names and set on the element's style object using `setProperty()`.
 * Names without dashes are assumed to be camelCased JavaScript property names
 * and set on the element's style object using property assignment, allowing the
 * style object to translate JavaScript-style names to CSS property names.
 *
 * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':
 * '0'})` sets the `background-color`, `border-top` and `--size` properties.
 *
 * @param styleInfo
 * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}
 */ const styleMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["directive"])(StyleMapDirective);
;
 //# sourceMappingURL=style-map.js.map
}}),
"[project]/node_modules/lit-html/node/development/directive-helpers.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TemplateResultType": (()=>TemplateResultType),
    "clearPart": (()=>clearPart),
    "getCommittedValue": (()=>getCommittedValue),
    "getDirectiveClass": (()=>getDirectiveClass),
    "insertPart": (()=>insertPart),
    "isCompiledTemplateResult": (()=>isCompiledTemplateResult),
    "isDirectiveResult": (()=>isDirectiveResult),
    "isPrimitive": (()=>isPrimitive),
    "isSingleExpression": (()=>isSingleExpression),
    "isTemplateResult": (()=>isTemplateResult),
    "removePart": (()=>removePart),
    "setChildPartValue": (()=>setChildPartValue),
    "setCommittedValue": (()=>setCommittedValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
;
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const { _ChildPart: ChildPart } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["_$LH"];
const wrap = (node)=>node;
/**
 * Tests if a value is a primitive value.
 *
 * See https://tc39.github.io/ecma262/#sec-typeof-operator
 */ const isPrimitive = (value)=>value === null || typeof value != 'object' && typeof value != 'function';
const TemplateResultType = {
    HTML: 1,
    SVG: 2,
    MATHML: 3
};
/**
 * Tests if a value is a TemplateResult or a CompiledTemplateResult.
 */ const isTemplateResult = (value, type)=>type === undefined ? value?.['_$litType$'] !== undefined : value?.['_$litType$'] === type;
/**
 * Tests if a value is a CompiledTemplateResult.
 */ const isCompiledTemplateResult = (value)=>{
    return value?.['_$litType$']?.h != null;
};
/**
 * Tests if a value is a DirectiveResult.
 */ const isDirectiveResult = (value)=>// This property needs to remain unminified.
    value?.['_$litDirective$'] !== undefined;
/**
 * Retrieves the Directive class for a DirectiveResult
 */ const getDirectiveClass = (value)=>// This property needs to remain unminified.
    value?.['_$litDirective$'];
/**
 * Tests whether a part has only a single-expression with no strings to
 * interpolate between.
 *
 * Only AttributePart and PropertyPart can have multiple expressions.
 * Multi-expression parts have a `strings` property and single-expression
 * parts do not.
 */ const isSingleExpression = (part)=>part.strings === undefined;
const createMarker = ()=>document.createComment('');
/**
 * Inserts a ChildPart into the given container ChildPart's DOM, either at the
 * end of the container ChildPart, or before the optional `refPart`.
 *
 * This does not add the part to the containerPart's committed value. That must
 * be done by callers.
 *
 * @param containerPart Part within which to add the new ChildPart
 * @param refPart Part before which to add the new ChildPart; when omitted the
 *     part added to the end of the `containerPart`
 * @param part Part to insert, or undefined to create a new part
 */ const insertPart = (containerPart, refPart, part)=>{
    const container = wrap(containerPart._$startNode).parentNode;
    const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;
    if (part === undefined) {
        const startNode = wrap(container).insertBefore(createMarker(), refNode);
        const endNode = wrap(container).insertBefore(createMarker(), refNode);
        part = new ChildPart(startNode, endNode, containerPart, containerPart.options);
    } else {
        const endNode = wrap(part._$endNode).nextSibling;
        const oldParent = part._$parent;
        const parentChanged = oldParent !== containerPart;
        if (parentChanged) {
            part._$reparentDisconnectables?.(containerPart);
            // Note that although `_$reparentDisconnectables` updates the part's
            // `_$parent` reference after unlinking from its current parent, that
            // method only exists if Disconnectables are present, so we need to
            // unconditionally set it here
            part._$parent = containerPart;
            // Since the _$isConnected getter is somewhat costly, only
            // read it once we know the subtree has directives that need
            // to be notified
            let newConnectionState;
            if (part._$notifyConnectionChanged !== undefined && (newConnectionState = containerPart._$isConnected) !== oldParent._$isConnected) {
                part._$notifyConnectionChanged(newConnectionState);
            }
        }
        if (endNode !== refNode || parentChanged) {
            let start = part._$startNode;
            while(start !== endNode){
                const n = wrap(start).nextSibling;
                wrap(container).insertBefore(start, refNode);
                start = n;
            }
        }
    }
    return part;
};
/**
 * Sets the value of a Part.
 *
 * Note that this should only be used to set/update the value of user-created
 * parts (i.e. those created using `insertPart`); it should not be used
 * by directives to set the value of the directive's container part. Directives
 * should return a value from `update`/`render` to update their part state.
 *
 * For directives that require setting their part value asynchronously, they
 * should extend `AsyncDirective` and call `this.setValue()`.
 *
 * @param part Part to set
 * @param value Value to set
 * @param index For `AttributePart`s, the index to set
 * @param directiveParent Used internally; should not be set by user
 */ const setChildPartValue = (part, value, directiveParent = part)=>{
    part._$setValue(value, directiveParent);
    return part;
};
// A sentinel value that can never appear as a part value except when set by
// live(). Used to force a dirty-check to fail and cause a re-render.
const RESET_VALUE = {};
/**
 * Sets the committed value of a ChildPart directly without triggering the
 * commit stage of the part.
 *
 * This is useful in cases where a directive needs to update the part such
 * that the next update detects a value change or not. When value is omitted,
 * the next update will be guaranteed to be detected as a change.
 *
 * @param part
 * @param value
 */ const setCommittedValue = (part, value = RESET_VALUE)=>part._$committedValue = value;
/**
 * Returns the committed value of a ChildPart.
 *
 * The committed value is used for change detection and efficient updates of
 * the part. It can differ from the value set by the template or directive in
 * cases where the template value is transformed before being committed.
 *
 * - `TemplateResult`s are committed as a `TemplateInstance`
 * - Iterables are committed as `Array<ChildPart>`
 * - All other types are committed as the template value or value returned or
 *   set by a directive.
 *
 * @param part
 */ const getCommittedValue = (part)=>part._$committedValue;
/**
 * Removes a ChildPart from the DOM, including any of its content.
 *
 * @param part The Part to remove
 */ const removePart = (part)=>{
    part._$notifyConnectionChanged?.(false, true);
    let start = part._$startNode;
    const end = wrap(part._$endNode).nextSibling;
    while(start !== end){
        const n = wrap(start).nextSibling;
        wrap(start).remove();
        start = n;
    }
};
const clearPart = (part)=>{
    part._$clear();
};
;
 //# sourceMappingURL=directive-helpers.js.map
}}),
"[project]/node_modules/lit-html/node/development/directives/live.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "live": (()=>live)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directive.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2d$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directive-helpers.js [app-ssr] (ecmascript)");
;
;
;
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ class LiveDirective extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Directive"] {
    constructor(partInfo){
        super(partInfo);
        if (!(partInfo.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].PROPERTY || partInfo.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].ATTRIBUTE || partInfo.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].BOOLEAN_ATTRIBUTE)) {
            throw new Error('The `live` directive is not allowed on child or event bindings');
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2d$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSingleExpression"])(partInfo)) {
            throw new Error('`live` bindings can only contain a single expression');
        }
    }
    render(value) {
        return value;
    }
    update(part, [value]) {
        if (value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"] || value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nothing"]) {
            return value;
        }
        const element = part.element;
        const name = part.name;
        if (part.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].PROPERTY) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            if (value === element[name]) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"];
            }
        } else if (part.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].BOOLEAN_ATTRIBUTE) {
            if (!!value === element.hasAttribute(name)) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"];
            }
        } else if (part.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PartType"].ATTRIBUTE) {
            if (element.getAttribute(name) === String(value)) {
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"];
            }
        }
        // Resets the part's value, causing its dirty-check to fail so that it
        // always sets the value.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2d$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setCommittedValue"])(part);
        return value;
    }
}
/**
 * Checks binding values against live DOM values, instead of previously bound
 * values, when determining whether to update the value.
 *
 * This is useful for cases where the DOM value may change from outside of
 * lit-html, such as with a binding to an `<input>` element's `value` property,
 * a content editable elements text, or to a custom element that changes it's
 * own properties or attributes.
 *
 * In these cases if the DOM value changes, but the value set through lit-html
 * bindings hasn't, lit-html won't know to update the DOM value and will leave
 * it alone. If this is not what you want--if you want to overwrite the DOM
 * value with the bound value no matter what--use the `live()` directive:
 *
 * ```js
 * html`<input .value=${live(x)}>`
 * ```
 *
 * `live()` performs a strict equality check against the live DOM value, and if
 * the new value is equal to the live value, does nothing. This means that
 * `live()` should not be used when the binding will cause a type conversion. If
 * you use `live()` with an attribute binding, make sure that only strings are
 * passed in, or the binding will update every render.
 */ const live = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directive$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["directive"])(LiveDirective);
;
 //# sourceMappingURL=live.js.map
}}),
"[project]/node_modules/lit-element/development/lit-element.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ /**
 * The main LitElement module, which defines the {@linkcode LitElement} base
 * class and related APIs.
 *
 * LitElement components can define a template and a set of observed
 * properties. Changing an observed property triggers a re-render of the
 * element.
 *
 * Import {@linkcode LitElement} and {@linkcode html} from this module to
 * create a component:
 *
 *  ```js
 * import {LitElement, html} from 'lit-element';
 *
 * class MyElement extends LitElement {
 *
 *   // Declare observed properties
 *   static get properties() {
 *     return {
 *       adjective: {}
 *     }
 *   }
 *
 *   constructor() {
 *     this.adjective = 'awesome';
 *   }
 *
 *   // Define the element's template
 *   render() {
 *     return html`<p>your ${adjective} template here</p>`;
 *   }
 * }
 *
 * customElements.define('my-element', MyElement);
 * ```
 *
 * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html
 * templating. The `ReactiveElement` class is provided for users that want to
 * build their own custom element base classes that don't use lit-html.
 *
 * @packageDocumentation
 */ __turbopack_esm__({
    "LitElement": (()=>LitElement),
    "_$LE": (()=>_$LE)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <locals>");
;
;
;
;
/*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */ /*@__INLINE__*/ const JSCompiler_renameProperty = (prop, _obj)=>prop;
const DEV_MODE = true;
let issueWarning;
if ("TURBOPACK compile-time truthy", 1) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = globalThis.litIssuedWarnings ??= new Set();
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning)=>{
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
}
class LitElement extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactiveElement"] {
    constructor(){
        super(...arguments);
        /**
         * @category rendering
         */ this.renderOptions = {
            host: this
        };
        this.__childPart = undefined;
    }
    /**
     * @category rendering
     */ createRenderRoot() {
        const renderRoot = super.createRenderRoot();
        // When adoptedStyleSheets are shimmed, they are inserted into the
        // shadowRoot by createRenderRoot. Adjust the renderBefore node so that
        // any styles in Lit content render before adoptedStyleSheets. This is
        // important so that adoptedStyleSheets have precedence over styles in
        // the shadowRoot.
        this.renderOptions.renderBefore ??= renderRoot.firstChild;
        return renderRoot;
    }
    /**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * @param changedProperties Map of changed properties with old values
     * @category updates
     */ update(changedProperties) {
        // Setting properties in `render` should not trigger an update. Since
        // updates are allowed after super.update, it's important to call `render`
        // before that.
        const value = this.render();
        if (!this.hasUpdated) {
            this.renderOptions.isConnected = this.isConnected;
        }
        super.update(changedProperties);
        this.__childPart = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["render"])(value, this.renderRoot, this.renderOptions);
    }
    /**
     * Invoked when the component is added to the document's DOM.
     *
     * In `connectedCallback()` you should setup tasks that should only occur when
     * the element is connected to the document. The most common of these is
     * adding event listeners to nodes external to the element, like a keydown
     * event handler added to the window.
     *
     * ```ts
     * connectedCallback() {
     *   super.connectedCallback();
     *   addEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * Typically, anything done in `connectedCallback()` should be undone when the
     * element is disconnected, in `disconnectedCallback()`.
     *
     * @category lifecycle
     */ connectedCallback() {
        super.connectedCallback();
        this.__childPart?.setConnected(true);
    }
    /**
     * Invoked when the component is removed from the document's DOM.
     *
     * This callback is the main signal to the element that it may no longer be
     * used. `disconnectedCallback()` should ensure that nothing is holding a
     * reference to the element (such as event listeners added to nodes external
     * to the element), so that it is free to be garbage collected.
     *
     * ```ts
     * disconnectedCallback() {
     *   super.disconnectedCallback();
     *   window.removeEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * An element may be re-connected after being disconnected.
     *
     * @category lifecycle
     */ disconnectedCallback() {
        super.disconnectedCallback();
        this.__childPart?.setConnected(false);
    }
    /**
     * Invoked on each update to perform rendering tasks. This method may return
     * any value renderable by lit-html's `ChildPart` - typically a
     * `TemplateResult`. Setting properties inside this method will *not* trigger
     * the element to update.
     * @category rendering
     */ render() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noChange"];
    }
}
// This property needs to remain unminified.
LitElement['_$litElement$'] = true;
/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 *
 * Note this property name is a string to prevent breaking Closure JS Compiler
 * optimizations. See @lit/reactive-element for more information.
 */ LitElement[JSCompiler_renameProperty('finalized', LitElement)] = true;
// Install hydration if available
globalThis.litElementHydrateSupport?.({
    LitElement
});
// Apply polyfills if available
const polyfillSupport = ("TURBOPACK compile-time truthy", 1) ? globalThis.litElementPolyfillSupportDevMode : ("TURBOPACK unreachable", undefined);
polyfillSupport?.({
    LitElement
});
const _$LE = {
    _$attributeToProperty: (el, name, value)=>{
        // eslint-disable-next-line
        el._$attributeToProperty(name, value);
    },
    // eslint-disable-next-line
    _$changedProperties: (el)=>el._$changedProperties
};
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
(globalThis.litElementVersions ??= []).push('4.1.1');
if (DEV_MODE && globalThis.litElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);
} //# sourceMappingURL=lit-element.js.map
}}),
"[project]/node_modules/lit-element/development/lit-element.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$element$2f$development$2f$lit$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/lit-element/development/lit-element.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/lit/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/lit/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lit$2f$reactive$2d$element$2f$node$2f$development$2f$reactive$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@lit/reactive-element/node/development/reactive-element.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$lit$2d$html$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/lit-html.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$element$2f$development$2f$lit$2d$element$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/lit-element/development/lit-element.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$is$2d$server$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/is-server.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/lit/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/lit/directives/style-map.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
 //# sourceMappingURL=style-map.js.map
}}),
"[project]/node_modules/lit/directives/style-map.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$directives$2f$style$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/directives/style-map.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2f$directives$2f$style$2d$map$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/lit/directives/style-map.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/@esri/calcite-components/dist/chunks/runtime.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "C": (()=>D),
    "D": (()=>M),
    "a": (()=>L),
    "c": (()=>S),
    "f": (()=>_),
    "g": (()=>T),
    "i": (()=>m),
    "l": (()=>E),
    "r": (()=>A),
    "s": (()=>I)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@arcgis/lumina/dist/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$is$2d$server$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lit-html/node/development/is-server.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@arcgis/lumina/dist/index.js [app-ssr] (ecmascript) <locals>");
;
;
/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
v3.1.0 */ const l = "calcite-mode-auto", u = "calcite-mode-dark", h = "calcite-mode-light", D = {
    autoMode: l,
    darkMode: u,
    lightMode: h,
    rtl: "calcite--rtl",
    calciteAnimate: "calcite-animate",
    calciteAnimateInUp: "calcite-animate__in-up",
    calciteAnimateInDown: "calcite-animate__in-down",
    calciteAnimateInRight: "calcite-animate__in-right",
    calciteAnimateInLeft: "calcite-animate__in-left"
}, M = {
    filter: 250,
    nextTick: 0,
    resize: 150,
    reposition: 100
};
function r() {
    const { classList: t } = document.body, i = window.matchMedia("(prefers-color-scheme: dark)").matches, a = ()=>t.contains(u) || t.contains(l) && i ? "dark" : "light", c = (e)=>document.body.dispatchEvent(new CustomEvent("calciteModeChange", {
            bubbles: !0,
            detail: {
                mode: e
            }
        })), s = (e)=>{
        o !== e && c(e), o = e;
    };
    let o = a();
    c(o), window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e)=>s(e.matches ? "dark" : "light")), new MutationObserver(()=>s(a())).observe(document.body, {
        attributes: !0,
        attributeFilter: [
            "class"
        ]
    });
}
const n = globalThis.calciteConfig, _ = n?.focusTrapStack || [], E = n?.logLevel || "info", d = "3.1.0", p = "2025-03-26", b = "d5f75fd64";
function v() {
    if (n && n.version) return;
    console.info(`Using Calcite Components ${d} [Date: ${p}, Revision: ${b}]`);
    const t = n || globalThis.calciteConfig || {};
    Object.defineProperty(t, "version", {
        value: d,
        writable: !1
    }), globalThis.calciteConfig = t;
}
const m = ()=>!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lit$2d$html$2f$node$2f$development$2f$is$2d$server$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isServer"] && typeof navigator < "u" && typeof window < "u" && typeof location < "u" && typeof document < "u" && window.location === location && window.document === document;
function C() {
    return navigator.userAgentData;
}
function L() {
    if (!m()) return "";
    const t = C();
    return t?.brands ? t.brands.map(({ brand: i, version: a })=>`${i}/${a}`).join(" ") : navigator.userAgent;
}
function w() {
    m() && (document.readyState === "interactive" ? r() : document.addEventListener("DOMContentLoaded", ()=>r(), {
        once: !0
    })), v();
}
w();
const A = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$arcgis$2f$lumina$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["makeRuntime"])({
    defaultAssetPath: "https://js.arcgis.com/calcite-components/3.1.0/",
    hydratedAttribute: "calcite-hydrated"
}), { customElement: S, getAssetPath: T, setAssetPath: I } = A;
;
}}),
"[project]/node_modules/@esri/calcite-components/dist/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "assetPathChanged": (()=>e),
    "setAssetPath": (()=>o)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$esri$2f$calcite$2d$components$2f$dist$2f$chunks$2f$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@esri/calcite-components/dist/chunks/runtime.js [app-ssr] (ecmascript)");
;
;
/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
v3.1.0 */ let e = !1;
const o = (t)=>{
    e = !0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$esri$2f$calcite$2d$components$2f$dist$2f$chunks$2f$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["s"])(t);
};
;
}}),
"[project]/node_modules/@esri/calcite-components/dist/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$esri$2f$calcite$2d$components$2f$dist$2f$chunks$2f$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@esri/calcite-components/dist/chunks/runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$esri$2f$calcite$2d$components$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@esri/calcite-components/dist/index.js [app-ssr] (ecmascript) <locals>");
}}),

};

//# sourceMappingURL=node_modules_1ba42a._.js.map