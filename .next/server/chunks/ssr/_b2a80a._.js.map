{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Dev/Applications/auth_gate/app/components/login.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/login.tsx <module evaluation>\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Dev/Applications/auth_gate/app/components/login.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/components/login.tsx\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,sCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Dev/Applications/auth_gate/app/page.tsx"],"sourcesContent":["import {LoginForm} from \"./components/login\";\n\nexport default function Home() {\n  return (\n    <LoginForm />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC,2HAAA,CAAA,YAAS;;;;;AAEd"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Dev/Applications/auth_gate/app/hooks/actions.tsx"],"sourcesContent":["\"use server\";\r\n\r\nimport { z } from \"zod\";\r\nimport { createToken, deleteToken } from \"../lib/token\";\r\nimport { redirect } from \"next/navigation\";\r\nimport esriConfig from '@arcgis/core/config';\r\nimport IdentityManager from '@arcgis/core/identity/IdentityManager';\r\nimport ServerInfo from '@arcgis/core/identity/ServerInfo';\r\n\r\nconst config = {\r\n  apiKey: process.env.NEXT_PUBLIC_ArcGISAPIKey ?? 'API_KEY_NOT_SET',\r\n  portalUrl: process.env.NEXT_PUBLIC_PORTAL_URL ?? 'PORTAL_URL_NOT_SET',\r\n  tokenServiceUrl: process.env.NEXT_PUBLIC_PORTAL_TOKEN_SERVICE_URL ?? 'PORTAL_TOKEN_NOT_SET',\r\n};\r\n\r\nesriConfig.apiKey = config.apiKey;\r\n\r\nconst serverInfo = new ServerInfo({\r\n  server: config.portalUrl,\r\n  tokenServiceUrl: config.tokenServiceUrl,\r\n});\r\n\r\nIdentityManager.registerServers([serverInfo]);\r\n\r\nconst loginSchema = z.object({\r\n  username: z.string().min(3, { message: \"Invalid username\" }).trim(),\r\n  password: z.string().min(4, { message: \"Password must be at least 4 characters\" }).trim(),\r\n});\r\n\r\nexport async function login(prevState: any, formData: FormData) {\r\n  const result = loginSchema.safeParse(Object.fromEntries(formData));\r\n\r\n  if (!result.success) {\r\n  return {\r\n    errors: result.error.flatten().fieldErrors,\r\n  };\r\n  }\r\n\r\n  const { username, password } = result.data;\r\n\r\n  try {\r\n    const response = await IdentityManager.generateToken(serverInfo, {\r\n      username: username,\r\n      password: password,\r\n      client: 'referer',\r\n      referer: \"http://localhost:3000\",\r\n    });\r\n\r\n    if (serverInfo.server) {\r\n      IdentityManager.registerToken({\r\n        server: serverInfo.server,\r\n        token: response.token,\r\n        expires: response.expires,\r\n      });\r\n    }\r\n    // Assuming successful ArcGIS authentication implies user is valid\r\n    // await createToken(\"arcgis_user\"); // Use a generic ID or fetch from ArcGIS\r\n\r\n    redirect(\"http://localhost:3000\");\r\n  } catch (error) {\r\n    console.error('ArcGIS Authentication failed:', error);\r\n    return {\r\n      errors: {\r\n        username: [\"Invalid username or password\"], // Generic error message\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport async function logout() {\r\n  // await deleteToken();\r\n  redirect(\"/login\");\r\n}"],"names":[],"mappings":";;;;;;AAIA;AACA;AACA;AACA;;AALA;AAEA;;;;;;;;AAKA,MAAM,SAAS;IACb,QAAQ,4IAAwC;IAChD,WAAW,qEAAsC;IACjD,iBAAiB,gGAAoD;AACvE;AAEA,0IAAA,CAAA,UAAU,CAAC,MAAM,GAAG,OAAO,MAAM;AAEjC,MAAM,aAAa,IAAI,0JAAA,CAAA,UAAU,CAAC;IAChC,QAAQ,OAAO,SAAS;IACxB,iBAAiB,OAAO,eAAe;AACzC;AAEA,+JAAA,CAAA,UAAe,CAAC,eAAe,CAAC;IAAC;CAAW;AAE5C,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GAAG,IAAI;IACjE,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAyC,GAAG,IAAI;AACzF;AAEO,eAAe,uCAAG,GAAH,MAAM,SAAc,EAAE,QAAkB;IAC5D,MAAM,SAAS,YAAY,SAAS,CAAC,OAAO,WAAW,CAAC;IAExD,IAAI,CAAC,OAAO,OAAO,EAAE;QACrB,OAAO;YACL,QAAQ,OAAO,KAAK,CAAC,OAAO,GAAG,WAAW;QAC5C;IACA;IAEA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,OAAO,IAAI;IAE1C,IAAI;QACF,MAAM,WAAW,MAAM,+JAAA,CAAA,UAAe,CAAC,aAAa,CAAC,YAAY;YAC/D,UAAU;YACV,UAAU;YACV,QAAQ;YACR,SAAS;QACX;QAEA,IAAI,WAAW,MAAM,EAAE;YACrB,+JAAA,CAAA,UAAe,CAAC,aAAa,CAAC;gBAC5B,QAAQ,WAAW,MAAM;gBACzB,OAAO,SAAS,KAAK;gBACrB,SAAS,SAAS,OAAO;YAC3B;QACF;QACA,kEAAkE;QAClE,6EAA6E;QAE7E,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;YACL,QAAQ;gBACN,UAAU;oBAAC;iBAA+B;YAC5C;QACF;IACF;AACF;AAEO,eAAe,uCAAI,GAAJ;IACpB,uBAAuB;IACvB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;;;IA3CsB;IAwCA;;AAxCA,+OAAA;AAwCA,+OAAA"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}