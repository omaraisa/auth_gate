{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/lib/token.ts"],"sourcesContent":["import \"server-only\";\r\nimport { SignJWT, jwtVerify } from \"jose\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nconst secretKey = process.env.TOKEN_SECRET;\r\nconst encodedKey = new TextEncoder().encode(secretKey);\r\n\r\nexport async function createToken(userId: string) {\r\n  const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\r\n  const token = await encrypt({ userId, expiresAt });\r\n\r\n  const cookieStore = await cookies();\r\n  cookieStore.set(\"authToken\", token, {\r\n    httpOnly: true,\r\n    secure: true,\r\n    expires: expiresAt,\r\n  });\r\n}\r\n\r\nexport async function deleteToken() {\r\n  const cookieStore = await cookies();\r\n  cookieStore.delete(\"authToken\");\r\n}\r\n\r\ntype TokenPayload = {\r\n  userId: string;\r\n  expiresAt: Date;\r\n};\r\n\r\nexport async function encrypt(payload: TokenPayload) {\r\n  return new SignJWT(payload)\r\n    .setProtectedHeader({ alg: \"HS256\" })\r\n    .setIssuedAt()\r\n    .setExpirationTime(\"1h\")\r\n    .sign(encodedKey);\r\n}\r\n\r\nexport async function decrypt(token: string | undefined = \"\") {\r\n  try {\r\n    const { payload } = await jwtVerify(token, encodedKey, {\r\n      algorithms: [\"HS256\"],\r\n    });\r\n    return payload;\r\n  } catch (error) {\r\n    console.log(\"Failed to verify auth token\", error);\r\n  }\r\n}"],"names":[],"mappings":";;;;;;AAAA;;;;;;AAEA;AAAA;;;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,YAAY;AAC1C,MAAM,aAAa,IAAI,cAAc,MAAM,CAAC;AAErC,eAAe,YAAY,MAAc;IAC9C,MAAM,YAAY,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK;IAClD,MAAM,QAAQ,MAAM,QAAQ;QAAE;QAAQ;IAAU;IAEhD,MAAM,cAAc,MAAM,CAAA,GAAA,mKAAA,CAAA,UAAO,AAAD;IAChC,YAAY,GAAG,CAAC,aAAa,OAAO;QAClC,UAAU;QACV,QAAQ;QACR,SAAS;IACX;AACF;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,mKAAA,CAAA,UAAO,AAAD;IAChC,YAAY,MAAM,CAAC;AACrB;AAOO,eAAe,QAAQ,OAAqB;IACjD,OAAO,IAAI,QAAQ,SAChB,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,MAClB,IAAI,CAAC;AACV;AAEO,eAAe,QAAQ,QAA4B,EAAE;IAC1D,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,UAAU,OAAO,YAAY;YACrD,YAAY;gBAAC;aAAQ;QACvB;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,+BAA+B;IAC7C;AACF"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { cookies } from \"next/headers\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { decrypt } from \"./app/lib/token\";\r\n\r\nexport default async function middleware(req: NextRequest) {\r\n  // Get the session token from cookies\r\n  const cookie = (await cookies()).get(\"authToken\")?.value;\r\n  if (cookie) {\r\n    const token = await decrypt(cookie);\r\n\r\n    if (token?.userId) {\r\n      const currentTime = Math.floor(Date.now() / 1000);\r\n      if (token.exp && token.exp > currentTime) {\r\n        console.log(\"User is logged in. Redirecting\");\r\n        return NextResponse.redirect(new URL(\"http://localhost:3000\", req.url));\r\n      }\r\n  }\r\n  return NextResponse.redirect(new URL(\"/\", req.url));\r\n}\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAFA;AACA;;;;AAGe,eAAe,WAAW,GAAgB;IACvD,qCAAqC;IACrC,MAAM,SAAS,CAAC,MAAM,CAAA,GAAA,mKAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,cAAc;IACnD,IAAI,QAAQ;QACV,MAAM,QAAQ,MAAM,CAAA,GAAA,mHAAA,CAAA,UAAO,AAAD,EAAE;QAE5B,IAAI,OAAO,QAAQ;YACjB,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK;YAC5C,IAAI,MAAM,GAAG,IAAI,MAAM,GAAG,GAAG,aAAa;gBACxC,QAAQ,GAAG,CAAC;gBACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,yBAAyB,IAAI,GAAG;YACvE;QACJ;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,IAAI,GAAG;IACnD;AACA"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}