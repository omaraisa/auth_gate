{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Dev/Applications/auth_gate/app/hooks/actions.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { z } from \"zod\";\r\nimport { createToken, deleteToken } from \"../lib/token\";\r\nimport { redirect } from \"next/navigation\";\r\nimport esriConfig from '@arcgis/core/config';\r\nimport IdentityManager from '@arcgis/core/identity/IdentityManager';\r\nimport ServerInfo from '@arcgis/core/identity/ServerInfo';\r\n\r\nconst config = {\r\n  apiKey: process.env.NEXT_PUBLIC_ArcGISAPIKey ?? 'API_KEY_NOT_SET',\r\n  portalUrl: process.env.NEXT_PUBLIC_PORTAL_URL ?? 'PORTAL_URL_NOT_SET',\r\n  tokenServiceUrl: process.env.NEXT_PUBLIC_PORTAL_TOKEN_SERVICE_URL ?? 'PORTAL_TOKEN_NOT_SET',\r\n};\r\nesriConfig.apiKey = config.apiKey;\r\n\r\nconst serverInfo = new ServerInfo({\r\n  server: config.portalUrl,\r\n  tokenServiceUrl: config.tokenServiceUrl,\r\n});\r\n\r\nIdentityManager.registerServers([serverInfo]);\r\n\r\nconst loginSchema = z.object({\r\n  username: z.string().min(3, { message: \"Invalid username\" }).trim(),\r\n  password: z.string().min(4, { message: \"Password must be at least 4 characters\" }).trim(),\r\n});\r\n\r\nexport async function login(prevState: any, formData: FormData) {\r\n  const result = loginSchema.safeParse(Object.fromEntries(formData));\r\n\r\n  if (!result.success) {\r\n  return {\r\n    errors: result.error.flatten().fieldErrors,\r\n  };\r\n  }\r\n\r\n  const { username, password } = result.data;\r\n\r\n  try {\r\n    const response = await IdentityManager.generateToken(serverInfo, {\r\n      username: \"omaradmin\", //username,\r\n      password: \"1qa2ws@WS!QA\", //password,\r\n      client: 'referer',\r\n      referer: \"http://localhost:3000\",\r\n    });\r\n\r\n    if (serverInfo.server) {\r\n      IdentityManager.registerToken({\r\n        server: serverInfo.server,\r\n        token: response.token,\r\n        expires: response.expires,\r\n      });\r\n    }\r\n\r\n    redirect(\"http://localhost:3000\");\r\n  } catch (error) {\r\n    console.error('ArcGIS Authentication failed:', error);\r\n    // return {\r\n    //   errors: {\r\n    //     username: [\"Invalid username or password\"], // Generic error message\r\n    //   },\r\n    // };\r\n  }\r\n}\r\n\r\nexport async function logout() {\r\n  // await deleteToken();\r\n  redirect(\"/login\");\r\n}"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AAGU;AARV;AAFA;;;;;;AASA,MAAM,SAAS;IACb,QAAQ,4IAAwC;IAChD,WAAW,qEAAsC;IACjD,iBAAiB,gGAAoD;AACvE;AACA,6IAAA,CAAA,UAAU,CAAC,MAAM,GAAG,OAAO,MAAM;AAEjC,MAAM,aAAa,IAAI,6JAAA,CAAA,UAAU,CAAC;IAChC,QAAQ,OAAO,SAAS;IACxB,iBAAiB,OAAO,eAAe;AACzC;AAEA,kKAAA,CAAA,UAAe,CAAC,eAAe,CAAC;IAAC;CAAW;AAE5C,MAAM,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAmB,GAAG,IAAI;IACjE,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAyC,GAAG,IAAI;AACzF;AAEO,eAAe,MAAM,SAAc,EAAE,QAAkB;IAC5D,MAAM,SAAS,YAAY,SAAS,CAAC,OAAO,WAAW,CAAC;IAExD,IAAI,CAAC,OAAO,OAAO,EAAE;QACrB,OAAO;YACL,QAAQ,OAAO,KAAK,CAAC,OAAO,GAAG,WAAW;QAC5C;IACA;IAEA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,OAAO,IAAI;IAE1C,IAAI;QACF,MAAM,WAAW,MAAM,kKAAA,CAAA,UAAe,CAAC,aAAa,CAAC,YAAY;YAC/D,UAAU;YACV,UAAU;YACV,QAAQ;YACR,SAAS;QACX;QAEA,IAAI,WAAW,MAAM,EAAE;YACrB,kKAAA,CAAA,UAAe,CAAC,aAAa,CAAC;gBAC5B,QAAQ,WAAW,MAAM;gBACzB,OAAO,SAAS,KAAK;gBACrB,SAAS,SAAS,OAAO;YAC3B;QACF;QAEA,CAAA,GAAA,qIAAA,CAAA,WAAQ,AAAD,EAAE;IACX,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;IAC/C,WAAW;IACX,cAAc;IACd,2EAA2E;IAC3E,OAAO;IACP,KAAK;IACP;AACF;AAEO,eAAe;IACpB,uBAAuB;IACvB,CAAA,GAAA,qIAAA,CAAA,WAAQ,AAAD,EAAE;AACX"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Dev/Applications/auth_gate/app/components/login.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useActionState } from \"react\";\r\nimport { login } from \"../hooks/actions\";\r\n\r\nexport function LoginForm() {\r\n  const [state, loginAction, pending] = useActionState(login, undefined);\r\n\r\n  return (\r\n    <form action={loginAction} className=\"flex max-w-[300px] flex-col gap-2\">\r\n      <div className=\"flex flex-col gap-2\">\r\n        <input id=\"username\" name=\"username\" placeholder=\"username\" />\r\n      </div>\r\n      {state?.errors?.username && (\r\n        <p className=\"text-red-500\">{state.errors.username}</p>\r\n      )}\r\n\r\n      <div className=\"flex flex-col gap-2\">\r\n        <input\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n        />\r\n      </div>\r\n      {state?.errors?.password && (\r\n        <p className=\"text-red-500\">{state.errors.password}</p>\r\n      )}\r\n      <SubmitButton pending={pending} />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction SubmitButton({ pending }: { pending: boolean }) {\r\n  return (\r\n    <button disabled={pending} type=\"submit\">\r\n      Login\r\n    </button>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKO,SAAS;;IACd,MAAM,CAAC,OAAO,aAAa,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,iBAAc,AAAD,EAAE,2HAAA,CAAA,QAAK,EAAE;IAE5D,qBACE,6LAAC;QAAK,QAAQ;QAAa,WAAU;;0BACnC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAM,IAAG;oBAAW,MAAK;oBAAW,aAAY;;;;;;;;;;;YAElD,OAAO,QAAQ,0BACd,6LAAC;gBAAE,WAAU;0BAAgB,MAAM,MAAM,CAAC,QAAQ;;;;;;0BAGpD,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBACC,IAAG;oBACH,MAAK;oBACL,MAAK;oBACL,aAAY;;;;;;;;;;;YAGf,OAAO,QAAQ,0BACd,6LAAC;gBAAE,WAAU;0BAAgB,MAAM,MAAM,CAAC,QAAQ;;;;;;0BAEpD,6LAAC;gBAAa,SAAS;;;;;;;;;;;;AAG7B;GA1BgB;;QACwB,6JAAA,CAAA,iBAAc;;;KADtC;AA4BhB,SAAS,aAAa,EAAE,OAAO,EAAwB;IACrD,qBACE,6LAAC;QAAO,UAAU;QAAS,MAAK;kBAAS;;;;;;AAI7C;MANS"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}